(function (crypto, require$$0) {
	'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var crypto__default = /*#__PURE__*/_interopDefaultLegacy(crypto);
	var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	function createCommonjsModule(fn) {
	  var module = { exports: {} };
		return fn(module, module.exports), module.exports;
	}

	function commonjsRequire (target) {
		throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
	}

	var browserPolyfill = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
	  {
	    factory(module);
	  }
	})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : commonjsGlobal, function (module) {

	  if (typeof browser === "undefined" || Object.getPrototypeOf(browser) !== Object.prototype) {
	    const CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE = "The message port closed before a response was received.";
	    const SEND_RESPONSE_DEPRECATION_WARNING = "Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)"; // Wrapping the bulk of this polyfill in a one-time-use function is a minor
	    // optimization for Firefox. Since Spidermonkey does not fully parse the
	    // contents of a function until the first time it's called, and since it will
	    // never actually need to be called, this allows the polyfill to be included
	    // in Firefox nearly for free.

	    const wrapAPIs = extensionAPIs => {
	      // NOTE: apiMetadata is associated to the content of the api-metadata.json file
	      // at build time by replacing the following "include" with the content of the
	      // JSON file.
	      const apiMetadata = {
	        "alarms": {
	          "clear": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "clearAll": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "get": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "getAll": {
	            "minArgs": 0,
	            "maxArgs": 0
	          }
	        },
	        "bookmarks": {
	          "create": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "get": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getChildren": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getRecent": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getSubTree": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getTree": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "move": {
	            "minArgs": 2,
	            "maxArgs": 2
	          },
	          "remove": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "removeTree": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "search": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "update": {
	            "minArgs": 2,
	            "maxArgs": 2
	          }
	        },
	        "browserAction": {
	          "disable": {
	            "minArgs": 0,
	            "maxArgs": 1,
	            "fallbackToNoCallback": true
	          },
	          "enable": {
	            "minArgs": 0,
	            "maxArgs": 1,
	            "fallbackToNoCallback": true
	          },
	          "getBadgeBackgroundColor": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getBadgeText": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getPopup": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getTitle": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "openPopup": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "setBadgeBackgroundColor": {
	            "minArgs": 1,
	            "maxArgs": 1,
	            "fallbackToNoCallback": true
	          },
	          "setBadgeText": {
	            "minArgs": 1,
	            "maxArgs": 1,
	            "fallbackToNoCallback": true
	          },
	          "setIcon": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "setPopup": {
	            "minArgs": 1,
	            "maxArgs": 1,
	            "fallbackToNoCallback": true
	          },
	          "setTitle": {
	            "minArgs": 1,
	            "maxArgs": 1,
	            "fallbackToNoCallback": true
	          }
	        },
	        "browsingData": {
	          "remove": {
	            "minArgs": 2,
	            "maxArgs": 2
	          },
	          "removeCache": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "removeCookies": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "removeDownloads": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "removeFormData": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "removeHistory": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "removeLocalStorage": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "removePasswords": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "removePluginData": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "settings": {
	            "minArgs": 0,
	            "maxArgs": 0
	          }
	        },
	        "commands": {
	          "getAll": {
	            "minArgs": 0,
	            "maxArgs": 0
	          }
	        },
	        "contextMenus": {
	          "remove": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "removeAll": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "update": {
	            "minArgs": 2,
	            "maxArgs": 2
	          }
	        },
	        "cookies": {
	          "get": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getAll": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getAllCookieStores": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "remove": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "set": {
	            "minArgs": 1,
	            "maxArgs": 1
	          }
	        },
	        "devtools": {
	          "inspectedWindow": {
	            "eval": {
	              "minArgs": 1,
	              "maxArgs": 2,
	              "singleCallbackArg": false
	            }
	          },
	          "panels": {
	            "create": {
	              "minArgs": 3,
	              "maxArgs": 3,
	              "singleCallbackArg": true
	            },
	            "elements": {
	              "createSidebarPane": {
	                "minArgs": 1,
	                "maxArgs": 1
	              }
	            }
	          }
	        },
	        "downloads": {
	          "cancel": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "download": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "erase": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getFileIcon": {
	            "minArgs": 1,
	            "maxArgs": 2
	          },
	          "open": {
	            "minArgs": 1,
	            "maxArgs": 1,
	            "fallbackToNoCallback": true
	          },
	          "pause": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "removeFile": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "resume": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "search": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "show": {
	            "minArgs": 1,
	            "maxArgs": 1,
	            "fallbackToNoCallback": true
	          }
	        },
	        "extension": {
	          "isAllowedFileSchemeAccess": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "isAllowedIncognitoAccess": {
	            "minArgs": 0,
	            "maxArgs": 0
	          }
	        },
	        "history": {
	          "addUrl": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "deleteAll": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "deleteRange": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "deleteUrl": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getVisits": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "search": {
	            "minArgs": 1,
	            "maxArgs": 1
	          }
	        },
	        "i18n": {
	          "detectLanguage": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getAcceptLanguages": {
	            "minArgs": 0,
	            "maxArgs": 0
	          }
	        },
	        "identity": {
	          "launchWebAuthFlow": {
	            "minArgs": 1,
	            "maxArgs": 1
	          }
	        },
	        "idle": {
	          "queryState": {
	            "minArgs": 1,
	            "maxArgs": 1
	          }
	        },
	        "management": {
	          "get": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getAll": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "getSelf": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "setEnabled": {
	            "minArgs": 2,
	            "maxArgs": 2
	          },
	          "uninstallSelf": {
	            "minArgs": 0,
	            "maxArgs": 1
	          }
	        },
	        "notifications": {
	          "clear": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "create": {
	            "minArgs": 1,
	            "maxArgs": 2
	          },
	          "getAll": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "getPermissionLevel": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "update": {
	            "minArgs": 2,
	            "maxArgs": 2
	          }
	        },
	        "pageAction": {
	          "getPopup": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getTitle": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "hide": {
	            "minArgs": 1,
	            "maxArgs": 1,
	            "fallbackToNoCallback": true
	          },
	          "setIcon": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "setPopup": {
	            "minArgs": 1,
	            "maxArgs": 1,
	            "fallbackToNoCallback": true
	          },
	          "setTitle": {
	            "minArgs": 1,
	            "maxArgs": 1,
	            "fallbackToNoCallback": true
	          },
	          "show": {
	            "minArgs": 1,
	            "maxArgs": 1,
	            "fallbackToNoCallback": true
	          }
	        },
	        "permissions": {
	          "contains": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getAll": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "remove": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "request": {
	            "minArgs": 1,
	            "maxArgs": 1
	          }
	        },
	        "runtime": {
	          "getBackgroundPage": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "getPlatformInfo": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "openOptionsPage": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "requestUpdateCheck": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "sendMessage": {
	            "minArgs": 1,
	            "maxArgs": 3
	          },
	          "sendNativeMessage": {
	            "minArgs": 2,
	            "maxArgs": 2
	          },
	          "setUninstallURL": {
	            "minArgs": 1,
	            "maxArgs": 1
	          }
	        },
	        "sessions": {
	          "getDevices": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "getRecentlyClosed": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "restore": {
	            "minArgs": 0,
	            "maxArgs": 1
	          }
	        },
	        "storage": {
	          "local": {
	            "clear": {
	              "minArgs": 0,
	              "maxArgs": 0
	            },
	            "get": {
	              "minArgs": 0,
	              "maxArgs": 1
	            },
	            "getBytesInUse": {
	              "minArgs": 0,
	              "maxArgs": 1
	            },
	            "remove": {
	              "minArgs": 1,
	              "maxArgs": 1
	            },
	            "set": {
	              "minArgs": 1,
	              "maxArgs": 1
	            }
	          },
	          "managed": {
	            "get": {
	              "minArgs": 0,
	              "maxArgs": 1
	            },
	            "getBytesInUse": {
	              "minArgs": 0,
	              "maxArgs": 1
	            }
	          },
	          "sync": {
	            "clear": {
	              "minArgs": 0,
	              "maxArgs": 0
	            },
	            "get": {
	              "minArgs": 0,
	              "maxArgs": 1
	            },
	            "getBytesInUse": {
	              "minArgs": 0,
	              "maxArgs": 1
	            },
	            "remove": {
	              "minArgs": 1,
	              "maxArgs": 1
	            },
	            "set": {
	              "minArgs": 1,
	              "maxArgs": 1
	            }
	          }
	        },
	        "tabs": {
	          "captureVisibleTab": {
	            "minArgs": 0,
	            "maxArgs": 2
	          },
	          "create": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "detectLanguage": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "discard": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "duplicate": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "executeScript": {
	            "minArgs": 1,
	            "maxArgs": 2
	          },
	          "get": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getCurrent": {
	            "minArgs": 0,
	            "maxArgs": 0
	          },
	          "getZoom": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "getZoomSettings": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "goBack": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "goForward": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "highlight": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "insertCSS": {
	            "minArgs": 1,
	            "maxArgs": 2
	          },
	          "move": {
	            "minArgs": 2,
	            "maxArgs": 2
	          },
	          "query": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "reload": {
	            "minArgs": 0,
	            "maxArgs": 2
	          },
	          "remove": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "removeCSS": {
	            "minArgs": 1,
	            "maxArgs": 2
	          },
	          "sendMessage": {
	            "minArgs": 2,
	            "maxArgs": 3
	          },
	          "setZoom": {
	            "minArgs": 1,
	            "maxArgs": 2
	          },
	          "setZoomSettings": {
	            "minArgs": 1,
	            "maxArgs": 2
	          },
	          "update": {
	            "minArgs": 1,
	            "maxArgs": 2
	          }
	        },
	        "topSites": {
	          "get": {
	            "minArgs": 0,
	            "maxArgs": 0
	          }
	        },
	        "webNavigation": {
	          "getAllFrames": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "getFrame": {
	            "minArgs": 1,
	            "maxArgs": 1
	          }
	        },
	        "webRequest": {
	          "handlerBehaviorChanged": {
	            "minArgs": 0,
	            "maxArgs": 0
	          }
	        },
	        "windows": {
	          "create": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "get": {
	            "minArgs": 1,
	            "maxArgs": 2
	          },
	          "getAll": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "getCurrent": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "getLastFocused": {
	            "minArgs": 0,
	            "maxArgs": 1
	          },
	          "remove": {
	            "minArgs": 1,
	            "maxArgs": 1
	          },
	          "update": {
	            "minArgs": 2,
	            "maxArgs": 2
	          }
	        }
	      };

	      if (Object.keys(apiMetadata).length === 0) {
	        throw new Error("api-metadata.json has not been included in browser-polyfill");
	      }
	      /**
	       * A WeakMap subclass which creates and stores a value for any key which does
	       * not exist when accessed, but behaves exactly as an ordinary WeakMap
	       * otherwise.
	       *
	       * @param {function} createItem
	       *        A function which will be called in order to create the value for any
	       *        key which does not exist, the first time it is accessed. The
	       *        function receives, as its only argument, the key being created.
	       */


	      class DefaultWeakMap extends WeakMap {
	        constructor(createItem, items = undefined) {
	          super(items);
	          this.createItem = createItem;
	        }

	        get(key) {
	          if (!this.has(key)) {
	            this.set(key, this.createItem(key));
	          }

	          return super.get(key);
	        }

	      }
	      /**
	       * Returns true if the given object is an object with a `then` method, and can
	       * therefore be assumed to behave as a Promise.
	       *
	       * @param {*} value The value to test.
	       * @returns {boolean} True if the value is thenable.
	       */


	      const isThenable = value => {
	        return value && typeof value === "object" && typeof value.then === "function";
	      };
	      /**
	       * Creates and returns a function which, when called, will resolve or reject
	       * the given promise based on how it is called:
	       *
	       * - If, when called, `chrome.runtime.lastError` contains a non-null object,
	       *   the promise is rejected with that value.
	       * - If the function is called with exactly one argument, the promise is
	       *   resolved to that value.
	       * - Otherwise, the promise is resolved to an array containing all of the
	       *   function's arguments.
	       *
	       * @param {object} promise
	       *        An object containing the resolution and rejection functions of a
	       *        promise.
	       * @param {function} promise.resolve
	       *        The promise's resolution function.
	       * @param {function} promise.rejection
	       *        The promise's rejection function.
	       * @param {object} metadata
	       *        Metadata about the wrapped method which has created the callback.
	       * @param {integer} metadata.maxResolvedArgs
	       *        The maximum number of arguments which may be passed to the
	       *        callback created by the wrapped async function.
	       *
	       * @returns {function}
	       *        The generated callback function.
	       */


	      const makeCallback = (promise, metadata) => {
	        return (...callbackArgs) => {
	          if (extensionAPIs.runtime.lastError) {
	            promise.reject(extensionAPIs.runtime.lastError);
	          } else if (metadata.singleCallbackArg || callbackArgs.length <= 1 && metadata.singleCallbackArg !== false) {
	            promise.resolve(callbackArgs[0]);
	          } else {
	            promise.resolve(callbackArgs);
	          }
	        };
	      };

	      const pluralizeArguments = numArgs => numArgs == 1 ? "argument" : "arguments";
	      /**
	       * Creates a wrapper function for a method with the given name and metadata.
	       *
	       * @param {string} name
	       *        The name of the method which is being wrapped.
	       * @param {object} metadata
	       *        Metadata about the method being wrapped.
	       * @param {integer} metadata.minArgs
	       *        The minimum number of arguments which must be passed to the
	       *        function. If called with fewer than this number of arguments, the
	       *        wrapper will raise an exception.
	       * @param {integer} metadata.maxArgs
	       *        The maximum number of arguments which may be passed to the
	       *        function. If called with more than this number of arguments, the
	       *        wrapper will raise an exception.
	       * @param {integer} metadata.maxResolvedArgs
	       *        The maximum number of arguments which may be passed to the
	       *        callback created by the wrapped async function.
	       *
	       * @returns {function(object, ...*)}
	       *       The generated wrapper function.
	       */


	      const wrapAsyncFunction = (name, metadata) => {
	        return function asyncFunctionWrapper(target, ...args) {
	          if (args.length < metadata.minArgs) {
	            throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
	          }

	          if (args.length > metadata.maxArgs) {
	            throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
	          }

	          return new Promise((resolve, reject) => {
	            if (metadata.fallbackToNoCallback) {
	              // This API method has currently no callback on Chrome, but it return a promise on Firefox,
	              // and so the polyfill will try to call it with a callback first, and it will fallback
	              // to not passing the callback if the first call fails.
	              try {
	                target[name](...args, makeCallback({
	                  resolve,
	                  reject
	                }, metadata));
	              } catch (cbError) {
	                console.warn(`${name} API method doesn't seem to support the callback parameter, ` + "falling back to call it without a callback: ", cbError);
	                target[name](...args); // Update the API method metadata, so that the next API calls will not try to
	                // use the unsupported callback anymore.

	                metadata.fallbackToNoCallback = false;
	                metadata.noCallback = true;
	                resolve();
	              }
	            } else if (metadata.noCallback) {
	              target[name](...args);
	              resolve();
	            } else {
	              target[name](...args, makeCallback({
	                resolve,
	                reject
	              }, metadata));
	            }
	          });
	        };
	      };
	      /**
	       * Wraps an existing method of the target object, so that calls to it are
	       * intercepted by the given wrapper function. The wrapper function receives,
	       * as its first argument, the original `target` object, followed by each of
	       * the arguments passed to the original method.
	       *
	       * @param {object} target
	       *        The original target object that the wrapped method belongs to.
	       * @param {function} method
	       *        The method being wrapped. This is used as the target of the Proxy
	       *        object which is created to wrap the method.
	       * @param {function} wrapper
	       *        The wrapper function which is called in place of a direct invocation
	       *        of the wrapped method.
	       *
	       * @returns {Proxy<function>}
	       *        A Proxy object for the given method, which invokes the given wrapper
	       *        method in its place.
	       */


	      const wrapMethod = (target, method, wrapper) => {
	        return new Proxy(method, {
	          apply(targetMethod, thisObj, args) {
	            return wrapper.call(thisObj, target, ...args);
	          }

	        });
	      };

	      let hasOwnProperty = Function.call.bind(Object.prototype.hasOwnProperty);
	      /**
	       * Wraps an object in a Proxy which intercepts and wraps certain methods
	       * based on the given `wrappers` and `metadata` objects.
	       *
	       * @param {object} target
	       *        The target object to wrap.
	       *
	       * @param {object} [wrappers = {}]
	       *        An object tree containing wrapper functions for special cases. Any
	       *        function present in this object tree is called in place of the
	       *        method in the same location in the `target` object tree. These
	       *        wrapper methods are invoked as described in {@see wrapMethod}.
	       *
	       * @param {object} [metadata = {}]
	       *        An object tree containing metadata used to automatically generate
	       *        Promise-based wrapper functions for asynchronous. Any function in
	       *        the `target` object tree which has a corresponding metadata object
	       *        in the same location in the `metadata` tree is replaced with an
	       *        automatically-generated wrapper function, as described in
	       *        {@see wrapAsyncFunction}
	       *
	       * @returns {Proxy<object>}
	       */

	      const wrapObject = (target, wrappers = {}, metadata = {}) => {
	        let cache = Object.create(null);
	        let handlers = {
	          has(proxyTarget, prop) {
	            return prop in target || prop in cache;
	          },

	          get(proxyTarget, prop, receiver) {
	            if (prop in cache) {
	              return cache[prop];
	            }

	            if (!(prop in target)) {
	              return undefined;
	            }

	            let value = target[prop];

	            if (typeof value === "function") {
	              // This is a method on the underlying object. Check if we need to do
	              // any wrapping.
	              if (typeof wrappers[prop] === "function") {
	                // We have a special-case wrapper for this method.
	                value = wrapMethod(target, target[prop], wrappers[prop]);
	              } else if (hasOwnProperty(metadata, prop)) {
	                // This is an async method that we have metadata for. Create a
	                // Promise wrapper for it.
	                let wrapper = wrapAsyncFunction(prop, metadata[prop]);
	                value = wrapMethod(target, target[prop], wrapper);
	              } else {
	                // This is a method that we don't know or care about. Return the
	                // original method, bound to the underlying object.
	                value = value.bind(target);
	              }
	            } else if (typeof value === "object" && value !== null && (hasOwnProperty(wrappers, prop) || hasOwnProperty(metadata, prop))) {
	              // This is an object that we need to do some wrapping for the children
	              // of. Create a sub-object wrapper for it with the appropriate child
	              // metadata.
	              value = wrapObject(value, wrappers[prop], metadata[prop]);
	            } else if (hasOwnProperty(metadata, "*")) {
	              // Wrap all properties in * namespace.
	              value = wrapObject(value, wrappers[prop], metadata["*"]);
	            } else {
	              // We don't need to do any wrapping for this property,
	              // so just forward all access to the underlying object.
	              Object.defineProperty(cache, prop, {
	                configurable: true,
	                enumerable: true,

	                get() {
	                  return target[prop];
	                },

	                set(value) {
	                  target[prop] = value;
	                }

	              });
	              return value;
	            }

	            cache[prop] = value;
	            return value;
	          },

	          set(proxyTarget, prop, value, receiver) {
	            if (prop in cache) {
	              cache[prop] = value;
	            } else {
	              target[prop] = value;
	            }

	            return true;
	          },

	          defineProperty(proxyTarget, prop, desc) {
	            return Reflect.defineProperty(cache, prop, desc);
	          },

	          deleteProperty(proxyTarget, prop) {
	            return Reflect.deleteProperty(cache, prop);
	          }

	        }; // Per contract of the Proxy API, the "get" proxy handler must return the
	        // original value of the target if that value is declared read-only and
	        // non-configurable. For this reason, we create an object with the
	        // prototype set to `target` instead of using `target` directly.
	        // Otherwise we cannot return a custom object for APIs that
	        // are declared read-only and non-configurable, such as `chrome.devtools`.
	        //
	        // The proxy handlers themselves will still use the original `target`
	        // instead of the `proxyTarget`, so that the methods and properties are
	        // dereferenced via the original targets.

	        let proxyTarget = Object.create(target);
	        return new Proxy(proxyTarget, handlers);
	      };
	      /**
	       * Creates a set of wrapper functions for an event object, which handles
	       * wrapping of listener functions that those messages are passed.
	       *
	       * A single wrapper is created for each listener function, and stored in a
	       * map. Subsequent calls to `addListener`, `hasListener`, or `removeListener`
	       * retrieve the original wrapper, so that  attempts to remove a
	       * previously-added listener work as expected.
	       *
	       * @param {DefaultWeakMap<function, function>} wrapperMap
	       *        A DefaultWeakMap object which will create the appropriate wrapper
	       *        for a given listener function when one does not exist, and retrieve
	       *        an existing one when it does.
	       *
	       * @returns {object}
	       */


	      const wrapEvent = wrapperMap => ({
	        addListener(target, listener, ...args) {
	          target.addListener(wrapperMap.get(listener), ...args);
	        },

	        hasListener(target, listener) {
	          return target.hasListener(wrapperMap.get(listener));
	        },

	        removeListener(target, listener) {
	          target.removeListener(wrapperMap.get(listener));
	        }

	      }); // Keep track if the deprecation warning has been logged at least once.


	      let loggedSendResponseDeprecationWarning = false;
	      const onMessageWrappers = new DefaultWeakMap(listener => {
	        if (typeof listener !== "function") {
	          return listener;
	        }
	        /**
	         * Wraps a message listener function so that it may send responses based on
	         * its return value, rather than by returning a sentinel value and calling a
	         * callback. If the listener function returns a Promise, the response is
	         * sent when the promise either resolves or rejects.
	         *
	         * @param {*} message
	         *        The message sent by the other end of the channel.
	         * @param {object} sender
	         *        Details about the sender of the message.
	         * @param {function(*)} sendResponse
	         *        A callback which, when called with an arbitrary argument, sends
	         *        that value as a response.
	         * @returns {boolean}
	         *        True if the wrapped listener returned a Promise, which will later
	         *        yield a response. False otherwise.
	         */


	        return function onMessage(message, sender, sendResponse) {
	          let didCallSendResponse = false;
	          let wrappedSendResponse;
	          let sendResponsePromise = new Promise(resolve => {
	            wrappedSendResponse = function (response) {
	              if (!loggedSendResponseDeprecationWarning) {
	                console.warn(SEND_RESPONSE_DEPRECATION_WARNING, new Error().stack);
	                loggedSendResponseDeprecationWarning = true;
	              }

	              didCallSendResponse = true;
	              resolve(response);
	            };
	          });
	          let result;

	          try {
	            result = listener(message, sender, wrappedSendResponse);
	          } catch (err) {
	            result = Promise.reject(err);
	          }

	          const isResultThenable = result !== true && isThenable(result); // If the listener didn't returned true or a Promise, or called
	          // wrappedSendResponse synchronously, we can exit earlier
	          // because there will be no response sent from this listener.

	          if (result !== true && !isResultThenable && !didCallSendResponse) {
	            return false;
	          } // A small helper to send the message if the promise resolves
	          // and an error if the promise rejects (a wrapped sendMessage has
	          // to translate the message into a resolved promise or a rejected
	          // promise).


	          const sendPromisedResult = promise => {
	            promise.then(msg => {
	              // send the message value.
	              sendResponse(msg);
	            }, error => {
	              // Send a JSON representation of the error if the rejected value
	              // is an instance of error, or the object itself otherwise.
	              let message;

	              if (error && (error instanceof Error || typeof error.message === "string")) {
	                message = error.message;
	              } else {
	                message = "An unexpected error occurred";
	              }

	              sendResponse({
	                __mozWebExtensionPolyfillReject__: true,
	                message
	              });
	            }).catch(err => {
	              // Print an error on the console if unable to send the response.
	              console.error("Failed to send onMessage rejected reply", err);
	            });
	          }; // If the listener returned a Promise, send the resolved value as a
	          // result, otherwise wait the promise related to the wrappedSendResponse
	          // callback to resolve and send it as a response.


	          if (isResultThenable) {
	            sendPromisedResult(result);
	          } else {
	            sendPromisedResult(sendResponsePromise);
	          } // Let Chrome know that the listener is replying.


	          return true;
	        };
	      });

	      const wrappedSendMessageCallback = ({
	        reject,
	        resolve
	      }, reply) => {
	        if (extensionAPIs.runtime.lastError) {
	          // Detect when none of the listeners replied to the sendMessage call and resolve
	          // the promise to undefined as in Firefox.
	          // See https://github.com/mozilla/webextension-polyfill/issues/130
	          if (extensionAPIs.runtime.lastError.message === CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE) {
	            resolve();
	          } else {
	            reject(extensionAPIs.runtime.lastError);
	          }
	        } else if (reply && reply.__mozWebExtensionPolyfillReject__) {
	          // Convert back the JSON representation of the error into
	          // an Error instance.
	          reject(new Error(reply.message));
	        } else {
	          resolve(reply);
	        }
	      };

	      const wrappedSendMessage = (name, metadata, apiNamespaceObj, ...args) => {
	        if (args.length < metadata.minArgs) {
	          throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
	        }

	        if (args.length > metadata.maxArgs) {
	          throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
	        }

	        return new Promise((resolve, reject) => {
	          const wrappedCb = wrappedSendMessageCallback.bind(null, {
	            resolve,
	            reject
	          });
	          args.push(wrappedCb);
	          apiNamespaceObj.sendMessage(...args);
	        });
	      };

	      const staticWrappers = {
	        runtime: {
	          onMessage: wrapEvent(onMessageWrappers),
	          onMessageExternal: wrapEvent(onMessageWrappers),
	          sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
	            minArgs: 1,
	            maxArgs: 3
	          })
	        },
	        tabs: {
	          sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
	            minArgs: 2,
	            maxArgs: 3
	          })
	        }
	      };
	      const settingMetadata = {
	        clear: {
	          minArgs: 1,
	          maxArgs: 1
	        },
	        get: {
	          minArgs: 1,
	          maxArgs: 1
	        },
	        set: {
	          minArgs: 1,
	          maxArgs: 1
	        }
	      };
	      apiMetadata.privacy = {
	        network: {
	          "*": settingMetadata
	        },
	        services: {
	          "*": settingMetadata
	        },
	        websites: {
	          "*": settingMetadata
	        }
	      };
	      return wrapObject(extensionAPIs, staticWrappers, apiMetadata);
	    };

	    if (typeof chrome != "object" || !chrome || !chrome.runtime || !chrome.runtime.id) {
	      throw new Error("This script should only be loaded in a browser extension.");
	    } // The build process adds a UMD wrapper around this file, which makes the
	    // `module` variable available.


	    module.exports = wrapAPIs(chrome);
	  } else {
	    module.exports = browser;
	  }
	});

	});

	/**
	 * @function
	 * @param {object} site
	 * @param {string} site.name
	 * @param {string} site.host
	 * @returns {object}
	 * @description returns an object containing the host and name of the given site.
	 * Example: https://example.com/fragment returns {name: "example", host: "www.example.com"} */
	function parseUrl(site) {
	  let host = site.includes("http") ? site.split("/")[2] : site.split("/")[0];
	  let name = host.includes("www") ? host.split(".")[1] : host.split(".")[0];
	  return { host: host, name: name };
	}

	/**
	 * @function
	 * @returns {object} date
	 * @description returns a new object containing a string with the date at time of function call,
	 * as well as numbers for hours, minutes, seconds and milliseconds, as well as a timestamp for use in
	 * Firestore document creation. */
	function makeDate() {
	  const options = {
	    weekday: "long",
	    year: "numeric",
	    month: "long",
	    day: "numeric",
	  };
	  const date = new Date();
	  return {
	    dateString: date.toLocaleDateString("en-US", options),
	    milliseconds: date.getMilliseconds(),
	    minutes: date.getMinutes(),
	    seconds: date.getSeconds(),
	    timestamp: date.getTime(),
	    hours: date.getHours(),
	  };
	}

	/**
	 * @param {number} milliseconds
	 * @returns {string} time
	 * @description Parses a given value of milliseconds into a short human-readable string.
	 * This function should be used only when counting up.
	 * For values greater than 60 seconds, the string value will be rounded up
	 * to the nearest minute. (eg: 1m). For values lesser than or equal to 60 seconds,
	 * the string value will be in seconds.
	 * For a long string version, use parseTimerDownLong. */
	function parseTimerDown(milliseconds) {
	  let seconds = milliseconds / 1000;
	  if (seconds <= 30) {
	    return `${seconds}s`;
	  } else if (seconds >= 31 && seconds <= 59) {
	    return "1m";
	  } else if (seconds >= 60) {
	    let minutes = seconds / 60;
	    minutes = Math.ceil(minutes);
	    return `${minutes}m`;
	  }
	}

	const parseTime = {
	  toHumanReadableArray: (time) => {
	    return [ Math.floor(time / 60 / 1000), (time / 1000) % 60 ];
	  },

	  toSystem: (time) => {
	    return 1000 * (time.min * 60 + time.sec);
	  },
	};

	const learningSites = [
	  {name: "codecademy", host: "www.codecademy.com"},
	  {name: "sololearn", host: "www.sololearn.com"},
	  {name: "udemy", host: "www.udemy.com"},
	];

	const participantResource = {name: "codecademy", host: "www.codecademy.com"};
	// export const participantResource = {name: "sololearn", host: "www.sololearn.com"}
	// export const participantResource = {name: "udemy", host: "www.udemy.com"}

	const storage = browserPolyfill.storage.local;

	/**
	 * @function
	 * @description Clears all stored data in browser storage. */
	function clearStorage() {
	  storage.clear();
	}

	/**
	 * @function
	 * @description Inverts the state of the "toggled" variable in storage
	 * that determines whether or not a user should be redirected.
	 * redirectionToggled is a settings parameter changed by the user. */

	function toggleRedirection() {
	  storage.get("toggled").then((data) => {
	    storage.set({ toggled: !data.toggled });
	  });
	}

	/**
	 * @async @function
	 * @returns {object} userData that includes a list of procrastination websites as defined by the user, as well as the user ID.
	 * @description Returns the user ID and a list of procrastination websites wrapped in an object. */
	async function getUserData() {
	  const result = await storage.get(["list", "uid"]);
	  return result;
	}

	/**
	 * @async @function
	 * @returns {Boolean} Determines whether user should be redirected.
	 * @description Returns a boolean value indicating whether user should be redirected.
	 * redirectionToggled is a settings parameter changed by the user. */
	async function getRedirectionToggled() {
	  const result = await storage.get("toggled");
	  return result.toggled;
	}

	/**
	 * @function
	 * @param {object[]} list
	 * @param {string} list[].name
	 * @param {string} list[].id
	 * @description Sets the list of procrastination websites in storage. */
	function setList(list) {
	  storage.set({ list: list });
	}

	/**
	 * @async @function
	 * @returns {object[]} list
	 * @description returns the list of procrastination websites from storage.*/
	async function getList() {
	  const result = await storage.get("list");
	  return result.list;
	}

	/**
	 * @function
	 * @param {string} uid
	 * @description sets the user ID in storage. */
	function setUid(uid) {
	  storage.set({ uid: uid });
	}

	/**
	 * @async @function
	 * @returns {string} User ID
	 * @description returns the user ID from storage. */
	async function getUid() {
	  const result = await storage.get("uid");
	  return result.uid;
	}

	/**
	 * @function
	 * @param {object} origin
	 * @param {string} origin.url
	 * @param {number} origin.tabId
	 * @description sets the origin tabID and url in storage for later reference.
	 * The origin object is tied to the website from which the user was intercepted by Aiki3 */
	function setOrigin(origin) {
	  storage.set({ origin: origin });
	}

	/**
	 * @async @function
	 * @returns {object} origin
	 * @description returns the origin tabID and url in storage.
	 *  The origin object is tied to the website from which the user was intercepted by Aiki3 */
	async function getOrigin() {
	  const result = await storage.get("origin");
	  return result.origin;
	}

	/**
	 * @function
	 * @description removes the origin variable from storage.
	 *  The origin object is tied to the website from which the user was intercepted by Aiki3 */
	function removeOrigin() {
	  storage.remove("origin");
	}

	function setLearningUri(uri) {
	  if (uri) {
	    storage.set({ learningUri: uri });
	  } else {
	    storage.set({ learningUri: participantResource.host });
	  }
	}

	async function getLearningUri() {
	  let result = await storage.get("learningUri");
	  if (result.learningUri) {
	    return result.learningUri;
	  } else return `https://${participantResource.host}`;
	}

	// function setLearningUri (uri){
	//   storage.set({learningUri: uri});
	// }

	/**
	 * @async @function
	 * @returns {number} learningTime
	 * @description returns a userdefined amount of miliseconds
	 * before they can continue to their origin procrastination website. */
	async function getLearningTime() {
	  const result = await storage.get("learningTime");
	  return result.learningTime;
	}

	/**
	 * @function
	 * @param {number} time
	 * @description sets the amount of time before a user is allowed to
	 * continue to the origin procrastination website. */
	function setLearningTime(time) {
	  storage.set({ learningTime: time });
	}

	/**
	 * @async @function
	 * @returns {number} rewardTime
	 * @description returns the userdefined amount of miliseconds the user is allowed to spend on
	 * procrastination websites before interception is turned back on. */
	async function getRewardTime() {
	  const result = await storage.get("rewardTime");
	  return result.rewardTime;
	}

	/**
	 * @function
	 * @param {number} time
	 * @description sets in storage the userdefined amount of miliseconds the user is allowed
	 * to spend on procrastination websites before interception is turned back on. */
	function setRewardTime(time) {
	  storage.set({ rewardTime: time });
	}

	/**
	 * @async @function
	 * @returns {object} userTimes
	 * @description returns an object containing the time-related
	 * values set by the user: rewardTime and learningTime. */
	async function getUserTimes() {
	  const result = await storage.get(["rewardTime", "learningTime"]);
	  return result;
	}

	/**
	 * @description Initializes the time settings in storage upon app installation. */
	function userTimeInit() {
	  setLearningTime({ min: 5, sec: 0 });
	  setRewardTime({ min: 5, sec: 0 });
	}

	/**
	 * @async @function
	 * @param {Boolean} state
	 * @description sets in storage whether user should be redirected.
	 * shouldRedirect is defined by the application when the user has earned
	 * procrastination time, and again when this expires. */
	async function setShouldRedirect(state) {
	  storage.set({ shouldRedirect: state });
	}

	/**
	 * @async @function
	 * @returns {Boolean} shouldRedirect
	 * @description returns the state of whether user should be redirected.
	 * shouldRedirect is defined by the application when the user has earned
	 * procrastination time, and again when this expires. */
	async function getShouldRedirect() {
	  const result = await storage.get("shouldRedirect");
	  return result.shouldRedirect;
	}

	async function storeSession(data) {
	  const { statsDate } = await storage.get("statsDate");
	  await checkDate(statsDate);
	  const { sessionData } = await storage.get("sessionData");
	  let newData = sessionData;
	  if (
	    !newData.hasOwnProperty("procrastinationDuration") ||
	    newData.procrastinationDuration === NaN
	  ) {
	    newData.procrastinationDuration = 0;
	  }
	  if (
	    !newData.hasOwnProperty("learningDuration") ||
	    newData.learningDuration === NaN
	  ) {
	    newData.learningDuration = 0;
	  }

	  for (const key in data) {
	    if (key === participantResource.name) {
	      newData.learningDuration += data[key];
	    } else if (!["chromeInactive", "chromeActive"].includes(key)) {
	      newData[key] = sessionData.hasOwnProperty(key)
	        ? sessionData[key] + data[key]
	        : data[key];
	      newData.procrastinationDuration += data[key];
	    }
	  }
	  storage.set({ sessionData: newData });
	}

	async function checkDate(statsDate) {
	  const date = new Date().toDateString();
	  console.log("inc: ", statsDate, "date: ", date);
	  if (statsDate !== date) {
	    console.log("Rolling over date");
	    await overWriteYesterday();
	    await storage.set({ snoozeCount: 0 });
	    await storage.set({ completedCount: 0 });
	    await storage.set({ skipCount: 0 });
	    await storage.set({
	      sessionData: { procrastinationDuration: 0, learningDuration: 0 },
	    });
	    await storage.set({ statsDate: date });
	  }
	}

	async function incrSnoozeCount() {
	  const { statsDate, snoozeCount } = await storage.get([
	    "snoozeCount",
	    "statsDate",
	  ]);
	  await checkDate(statsDate);
	  storage.set({ snoozeCount: snoozeCount + 1 });
	}

	async function incrContinueCount() {
	  const { completedCount, statsDate } = await storage.get([
	    "completedCount",
	    "statsDate",
	  ]);
	  await checkDate(statsDate);
	  storage.set({ completedCount: completedCount + 1 });
	}

	async function incrSkipCount() {
	  const { skipCount, statsDate } = await storage.get([
	    "skipCount",
	    "statsDate",
	  ]);
	  await checkDate(statsDate);
	  storage.set({ skipCount: skipCount + 1 });
	}

	async function getAllStats() {
	  const result = await storage.get([
	    "sessionData",
	    "skipCount",
	    "completedCount",
	    "snoozeCount",
	    "yesterday",
	    "history",
	  ]);
	  return result;
	}

	// async function testStatsFlow() {
	//   await storage.set({ statsDate: new Date(2021, 5, 9).toDateString() });
	//   console.log(await storage.get("statsDate"))
	// await storeSession({ theguardian: 60, sololearn: 60 });
	// await incrContinueCount();
	// await storage.set({ statsDate: new Date(2021, 5, 10).dateString });
	// await storeSession({ theguardian: 60, sololearn: 60 });
	// await incrContinueCount();
	// await storage.set({ statsDate: new Date(2021, 5, 11).dateString });
	// await storeSession({ theguardian: 60, sololearn: 60 });
	// await incrContinueCount();
	// }

	// testStatsFlow();

	function initializeStats() {
	  storage.set({
	    sessionData: { procrastinationDuration: 0, learningDuration: 0 },
	  });
	  storage.set({ skipCount: 0 });
	  storage.set({ completedCount: 0 });
	  storage.set({ snoozeCount: 0 });
	  storage.set({
	    history: {
	      sessionData: { procrastinationDuration: 0, learningDuration: 0 },
	      completedCount: 0,
	      skipCount: 0,
	      snoozeCount: 0,
	    },
	  });
	  storage.set({
	    yesterday: {
	      sessionData: { procrastinationDuration: 0, learningDuration: 0 },
	      skipCount: 0,
	      completedCount: 0,
	      snoozeCount: 0,
	    },
	  });
	}

	async function overWriteYesterday() {
	  await addToHistory();
	  const yesterday = await storage.get([
	    "sessionData",
	    "skipCount",
	    "completedCount",
	    "snoozeCount",
	  ]);
	  storage.set({
	    yesterday: yesterday,
	  });
	}

	async function addToHistory() {
	  let { yesterday, history } = await storage.get(["yesterday", "history"]);
	  if (!history.hasOwnProperty("skipCount") || history.skipCount === NaN)
	    history.skipCount = 0;
	  if (
	    !history.hasOwnProperty("completedCount") ||
	    history.completedCount === NaN
	  )
	    history.completedCount = 0;
	  if (!history.hasOwnProperty("snoozeCount") || history.snoozeCount === NaN)
	    history.snoozeCount = 0;
	  if (!history.hasOwnProperty("sessionData")) {
	    history.sessionData = { procrastinationDuration: 0, learningDuration: 0 };
	  } else if (
	    history.sessionData.procrastinationDuration === NaN ||
	    history.sessionData.learningDuration === NaN
	  ) {
	    history.sessionData = { procrastinationDuration: 0, learningDuration: 0 };
	  }
	  history.skipCount += yesterday.skipCount;
	  history.completedCount += yesterday.completedCount;
	  history.snoozeCount += yesterday.snoozeCount;
	  history.sessionData.procrastinationDuration +=
	    yesterday.sessionData.procrastinationDuration;
	  history.sessionData.learningDuration +=
	    yesterday.sessionData.learningDuration;
	  storage.set({ history: history });
	}

	function setActiveTimeFrom(value) {
	  storage.set({ activeFrom: value });
	}
	async function getActiveTimeFrom() {
	  const { activeFrom } = await storage.get("activeFrom");
	  return activeFrom;
	}
	function setActiveTimeTo(value) {
	  storage.set({ activeTo: value });
	}
	async function getActiveTimeTo() {
	  const { activeTo } = await storage.get("activeTo");
	  return activeTo;
	}

	async function getAllActiveTimes() {
	  const result = await storage.get(["activeFrom", "activeTo"]);
	  return result;
	}

	function operatingHoursInit() {
	  setActiveTimeFrom({ hrs: 8, min: 0 });
	  setActiveTimeTo({ hrs: 21, min: 30 });
	}

	async function addBlockedTabs(tab) {
	  const { blockedTabs } = await storage.get("blockedTabs");
	  if (blockedTabs) {
	    if (!blockedTabs.includes(tab)) {
	      storage.set({ blockedTabs: [...blockedTabs, tab] });
	    }
	  } else {
	    storage.set({ blockedTabs: [tab] });
	  }
	}

	async function getBlockedTabs() {
	  const { blockedTabs } = await storage.get("blockedTabs");
	  if (blockedTabs) {
	    return blockedTabs;
	  } else return [];
	}

	function clearBlockedTabs() {
	  storage.remove("blockedTabs");
	}

	var storage$1 = {
	  timeSettings: {
	    getAll: getUserTimes,
	    init: userTimeInit,
	    learningTime: { get: getLearningTime, set: setLearningTime },
	    rewardTime: { get: getRewardTime, set: setRewardTime },
	  },
	  shouldRedirect: { get: getShouldRedirect, set: setShouldRedirect },
	  clearStorage,
	  getUserData,
	  origin: { get: getOrigin, set: setOrigin, remove: removeOrigin },
	  learningUri: { get: getLearningUri, set: setLearningUri },
	  list: { set: setList, get: getList },
	  uid: { set: setUid, get: getUid },
	  redirection: { toggle: toggleRedirection, get: getRedirectionToggled },
	  stats: {
	    storeSession: storeSession,
	    skip: incrSkipCount,
	    continue: incrContinueCount,
	    snooze: incrSnoozeCount,
	    getAll: getAllStats,
	    init: initializeStats,
	  },
	  operatingHours: {
	    from: { get: getActiveTimeFrom, set: setActiveTimeFrom },
	    to: { get: getActiveTimeTo, set: setActiveTimeTo },
	    getAll: getAllActiveTimes,
	    init: operatingHoursInit,
	  },
	  blockedTabs: {
	    get: getBlockedTabs,
	    add: addBlockedTabs,
	    clear: clearBlockedTabs,
	  },
	};

	var interopRequireDefault = createCommonjsModule(function (module) {
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}

	module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global$1 =
	  // eslint-disable-next-line es-x/no-global-this -- safe
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  // eslint-disable-next-line no-restricted-globals -- safe
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func -- fallback
	  (function () { return this; })() || Function('return this')();

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	var functionBindNative = !fails(function () {
	  // eslint-disable-next-line es-x/no-function-prototype-bind -- safe
	  var test = (function () { /* empty */ }).bind();
	  // eslint-disable-next-line no-prototype-builtins -- safe
	  return typeof test != 'function' || test.hasOwnProperty('prototype');
	});

	var FunctionPrototype = Function.prototype;
	var apply = FunctionPrototype.apply;
	var call = FunctionPrototype.call;

	// eslint-disable-next-line es-x/no-reflect -- safe
	var functionApply = typeof Reflect == 'object' && Reflect.apply || (functionBindNative ? call.bind(apply) : function () {
	  return call.apply(apply, arguments);
	});

	var FunctionPrototype$1 = Function.prototype;
	var bind = FunctionPrototype$1.bind;
	var call$1 = FunctionPrototype$1.call;
	var uncurryThis = functionBindNative && bind.bind(call$1, call$1);

	var functionUncurryThis = functionBindNative ? function (fn) {
	  return fn && uncurryThis(fn);
	} : function (fn) {
	  return fn && function () {
	    return call$1.apply(fn, arguments);
	  };
	};

	// `IsCallable` abstract operation
	// https://tc39.es/ecma262/#sec-iscallable
	var isCallable = function (argument) {
	  return typeof argument == 'function';
	};

	// Detect IE8's incomplete defineProperty implementation
	var descriptors = !fails(function () {
	  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var call$2 = Function.prototype.call;

	var functionCall = functionBindNative ? call$2.bind(call$2) : function () {
	  return call$2.apply(call$2, arguments);
	};

	var $propertyIsEnumerable = {}.propertyIsEnumerable;
	// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
	var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : $propertyIsEnumerable;

	var objectPropertyIsEnumerable = {
		f: f
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString$1 = functionUncurryThis({}.toString);
	var stringSlice = functionUncurryThis(''.slice);

	var classofRaw = function (it) {
	  return stringSlice(toString$1(it), 8, -1);
	};

	var Object$1 = global$1.Object;
	var split = functionUncurryThis(''.split);

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins -- safe
	  return !Object$1('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split(it, '') : Object$1(it);
	} : Object$1;

	var TypeError$1 = global$1.TypeError;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.es/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError$1("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	var isObject = function (it) {
	  return typeof it == 'object' ? it !== null : isCallable(it);
	};

	var path = {};

	var aFunction = function (variable) {
	  return isCallable(variable) ? variable : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global$1[namespace])
	    : path[namespace] && path[namespace][method] || global$1[namespace] && global$1[namespace][method];
	};

	var objectIsPrototypeOf = functionUncurryThis({}.isPrototypeOf);

	var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

	var process$1 = global$1.process;
	var Deno$1 = global$1.Deno;
	var versions = process$1 && process$1.versions || Deno$1 && Deno$1.version;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
	  // but their correct versions are not interesting for us
	  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
	}

	// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
	// so check `userAgent` even if `.v8` exists, but 0
	if (!version && engineUserAgent) {
	  match = engineUserAgent.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = engineUserAgent.match(/Chrome\/(\d+)/);
	    if (match) version = +match[1];
	  }
	}

	var engineV8Version = version;

	/* eslint-disable es-x/no-symbol -- required for testing */

	// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- required for testing
	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  var symbol = Symbol();
	  // Chrome 38 Symbol has incorrect toString conversion
	  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
	  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
	    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
	    !Symbol.sham && engineV8Version && engineV8Version < 41;
	});

	/* eslint-disable es-x/no-symbol -- required for testing */

	var useSymbolAsUid = nativeSymbol
	  && !Symbol.sham
	  && typeof Symbol.iterator == 'symbol';

	var Object$2 = global$1.Object;

	var isSymbol = useSymbolAsUid ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  var $Symbol = getBuiltIn('Symbol');
	  return isCallable($Symbol) && objectIsPrototypeOf($Symbol.prototype, Object$2(it));
	};

	var String$1 = global$1.String;

	var tryToString = function (argument) {
	  try {
	    return String$1(argument);
	  } catch (error) {
	    return 'Object';
	  }
	};

	var TypeError$2 = global$1.TypeError;

	// `Assert: IsCallable(argument) is true`
	var aCallable = function (argument) {
	  if (isCallable(argument)) return argument;
	  throw TypeError$2(tryToString(argument) + ' is not a function');
	};

	// `GetMethod` abstract operation
	// https://tc39.es/ecma262/#sec-getmethod
	var getMethod = function (V, P) {
	  var func = V[P];
	  return func == null ? undefined : aCallable(func);
	};

	var TypeError$3 = global$1.TypeError;

	// `OrdinaryToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-ordinarytoprimitive
	var ordinaryToPrimitive = function (input, pref) {
	  var fn, val;
	  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
	  if (isCallable(fn = input.valueOf) && !isObject(val = functionCall(fn, input))) return val;
	  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
	  throw TypeError$3("Can't convert object to primitive value");
	};

	var isPure = true;

	// eslint-disable-next-line es-x/no-object-defineproperty -- safe
	var defineProperty = Object.defineProperty;

	var setGlobal = function (key, value) {
	  try {
	    defineProperty(global$1, key, { value: value, configurable: true, writable: true });
	  } catch (error) {
	    global$1[key] = value;
	  } return value;
	};

	var SHARED = '__core-js_shared__';
	var store = global$1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store;

	var shared = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.22.4',
	  mode: 'pure' ,
	  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
	  license: 'https://github.com/zloirock/core-js/blob/v3.22.4/LICENSE',
	  source: 'https://github.com/zloirock/core-js'
	});
	});

	var Object$3 = global$1.Object;

	// `ToObject` abstract operation
	// https://tc39.es/ecma262/#sec-toobject
	var toObject = function (argument) {
	  return Object$3(requireObjectCoercible(argument));
	};

	var hasOwnProperty = functionUncurryThis({}.hasOwnProperty);

	// `HasOwnProperty` abstract operation
	// https://tc39.es/ecma262/#sec-hasownproperty
	// eslint-disable-next-line es-x/no-object-hasown -- safe
	var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
	  return hasOwnProperty(toObject(it), key);
	};

	var id = 0;
	var postfix = Math.random();
	var toString$2 = functionUncurryThis(1.0.toString);

	var uid = function (key) {
	  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$2(++id + postfix, 36);
	};

	var WellKnownSymbolsStore = shared('wks');
	var Symbol$1 = global$1.Symbol;
	var symbolFor = Symbol$1 && Symbol$1['for'];
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

	var wellKnownSymbol = function (name) {
	  if (!hasOwnProperty_1(WellKnownSymbolsStore, name) || !(nativeSymbol || typeof WellKnownSymbolsStore[name] == 'string')) {
	    var description = 'Symbol.' + name;
	    if (nativeSymbol && hasOwnProperty_1(Symbol$1, name)) {
	      WellKnownSymbolsStore[name] = Symbol$1[name];
	    } else if (useSymbolAsUid && symbolFor) {
	      WellKnownSymbolsStore[name] = symbolFor(description);
	    } else {
	      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
	    }
	  } return WellKnownSymbolsStore[name];
	};

	var TypeError$4 = global$1.TypeError;
	var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

	// `ToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-toprimitive
	var toPrimitive = function (input, pref) {
	  if (!isObject(input) || isSymbol(input)) return input;
	  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
	  var result;
	  if (exoticToPrim) {
	    if (pref === undefined) pref = 'default';
	    result = functionCall(exoticToPrim, input, pref);
	    if (!isObject(result) || isSymbol(result)) return result;
	    throw TypeError$4("Can't convert object to primitive value");
	  }
	  if (pref === undefined) pref = 'number';
	  return ordinaryToPrimitive(input, pref);
	};

	// `ToPropertyKey` abstract operation
	// https://tc39.es/ecma262/#sec-topropertykey
	var toPropertyKey = function (argument) {
	  var key = toPrimitive(argument, 'string');
	  return isSymbol(key) ? key : key + '';
	};

	var document$1 = global$1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS = isObject(document$1) && isObject(document$1.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS ? document$1.createElement(it) : {};
	};

	// Thanks to IE8 for its funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
	  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
	var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
	var f$1 = descriptors ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPropertyKey(P);
	  if (ie8DomDefine) try {
	    return $getOwnPropertyDescriptor(O, P);
	  } catch (error) { /* empty */ }
	  if (hasOwnProperty_1(O, P)) return createPropertyDescriptor(!functionCall(objectPropertyIsEnumerable.f, O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$1
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : isCallable(detection) ? fails(detection)
	    : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var bind$1 = functionUncurryThis(functionUncurryThis.bind);

	// optional / simple context binding
	var functionBindContext = function (fn, that) {
	  aCallable(fn);
	  return that === undefined ? fn : functionBindNative ? bind$1(fn, that) : function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	// V8 ~ Chrome 36-
	// https://bugs.chromium.org/p/v8/issues/detail?id=3334
	var v8PrototypeDefineBug = descriptors && fails(function () {
	  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
	  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
	    value: 42,
	    writable: false
	  }).prototype != 42;
	});

	var String$2 = global$1.String;
	var TypeError$5 = global$1.TypeError;

	// `Assert: Type(argument) is Object`
	var anObject = function (argument) {
	  if (isObject(argument)) return argument;
	  throw TypeError$5(String$2(argument) + ' is not an object');
	};

	var TypeError$6 = global$1.TypeError;
	// eslint-disable-next-line es-x/no-object-defineproperty -- safe
	var $defineProperty = Object.defineProperty;
	// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
	var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
	var ENUMERABLE = 'enumerable';
	var CONFIGURABLE = 'configurable';
	var WRITABLE = 'writable';

	// `Object.defineProperty` method
	// https://tc39.es/ecma262/#sec-object.defineproperty
	var f$2 = descriptors ? v8PrototypeDefineBug ? function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPropertyKey(P);
	  anObject(Attributes);
	  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
	    var current = $getOwnPropertyDescriptor$1(O, P);
	    if (current && current[WRITABLE]) {
	      O[P] = Attributes.value;
	      Attributes = {
	        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
	        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
	        writable: false
	      };
	    }
	  } return $defineProperty(O, P, Attributes);
	} : $defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPropertyKey(P);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return $defineProperty(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError$6('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty = {
		f: f$2
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






	var wrapConstructor = function (NativeConstructor) {
	  var Wrapper = function (a, b, c) {
	    if (this instanceof Wrapper) {
	      switch (arguments.length) {
	        case 0: return new NativeConstructor();
	        case 1: return new NativeConstructor(a);
	        case 2: return new NativeConstructor(a, b);
	      } return new NativeConstructor(a, b, c);
	    } return functionApply(NativeConstructor, this, arguments);
	  };
	  Wrapper.prototype = NativeConstructor.prototype;
	  return Wrapper;
	};

	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	  options.name        - the .name of the function if it does not match the key
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var PROTO = options.proto;

	  var nativeSource = GLOBAL ? global$1 : STATIC ? global$1[TARGET] : (global$1[TARGET] || {}).prototype;

	  var target = GLOBAL ? path : path[TARGET] || createNonEnumerableProperty(path, TARGET, {})[TARGET];
	  var targetPrototype = target.prototype;

	  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
	  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;

	  for (key in source) {
	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contains in native
	    USE_NATIVE = !FORCED && nativeSource && hasOwnProperty_1(nativeSource, key);

	    targetProperty = target[key];

	    if (USE_NATIVE) if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$1(nativeSource, key);
	      nativeProperty = descriptor && descriptor.value;
	    } else nativeProperty = nativeSource[key];

	    // export native or implementation
	    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];

	    if (USE_NATIVE && typeof targetProperty == typeof sourceProperty) continue;

	    // bind timers to global for call from export context
	    if (options.bind && USE_NATIVE) resultProperty = functionBindContext(sourceProperty, global$1);
	    // wrap global constructors for prevent changs in this version
	    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);
	    // make static versions for prototype methods
	    else if (PROTO && isCallable(sourceProperty)) resultProperty = functionUncurryThis(sourceProperty);
	    // default case
	    else resultProperty = sourceProperty;

	    // add a flag to not completely full polyfills
	    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(resultProperty, 'sham', true);
	    }

	    createNonEnumerableProperty(target, key, resultProperty);

	    if (PROTO) {
	      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';
	      if (!hasOwnProperty_1(path, VIRTUAL_PROTOTYPE)) {
	        createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
	      }
	      // export virtual prototype methods
	      createNonEnumerableProperty(path[VIRTUAL_PROTOTYPE], key, sourceProperty);
	      // export real prototype methods
	      if (options.real && targetPrototype && !targetPrototype[key]) {
	        createNonEnumerableProperty(targetPrototype, key, sourceProperty);
	      }
	    }
	  }
	};

	var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;


	var FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });
	var FORCED = !descriptors || FAILS_ON_PRIMITIVES;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
	_export({ target: 'Object', stat: true, forced: FORCED, sham: !descriptors }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
	    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
	  }
	});

	var getOwnPropertyDescriptor_1 = createCommonjsModule(function (module) {
	var Object = path.Object;

	var getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor(it, key) {
	  return Object.getOwnPropertyDescriptor(it, key);
	};

	if (Object.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor.sham = true;
	});

	var getOwnPropertyDescriptor$2 = getOwnPropertyDescriptor_1;

	var getOwnPropertyDescriptor$3 = getOwnPropertyDescriptor$2;

	var defineProperty$1 = objectDefineProperty.f;

	// `Object.defineProperty` method
	// https://tc39.es/ecma262/#sec-object.defineproperty
	// eslint-disable-next-line es-x/no-object-defineproperty -- safe
	_export({ target: 'Object', stat: true, forced: Object.defineProperty !== defineProperty$1, sham: !descriptors }, {
	  defineProperty: defineProperty$1
	});

	var defineProperty_1 = createCommonjsModule(function (module) {
	var Object = path.Object;

	var defineProperty = module.exports = function defineProperty(it, key, desc) {
	  return Object.defineProperty(it, key, desc);
	};

	if (Object.defineProperty.sham) defineProperty.sham = true;
	});

	var defineProperty$2 = defineProperty_1;

	var defineProperty$3 = defineProperty$2;

	// `IsArray` abstract operation
	// https://tc39.es/ecma262/#sec-isarray
	// eslint-disable-next-line es-x/no-array-isarray -- safe
	var isArray = Array.isArray || function isArray(argument) {
	  return classofRaw(argument) == 'Array';
	};

	var ceil = Math.ceil;
	var floor = Math.floor;

	// `ToIntegerOrInfinity` abstract operation
	// https://tc39.es/ecma262/#sec-tointegerorinfinity
	var toIntegerOrInfinity = function (argument) {
	  var number = +argument;
	  // eslint-disable-next-line no-self-compare -- safe
	  return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
	};

	var min = Math.min;

	// `ToLength` abstract operation
	// https://tc39.es/ecma262/#sec-tolength
	var toLength = function (argument) {
	  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	// `LengthOfArrayLike` abstract operation
	// https://tc39.es/ecma262/#sec-lengthofarraylike
	var lengthOfArrayLike = function (obj) {
	  return toLength(obj.length);
	};

	var createProperty = function (object, key, value) {
	  var propertyKey = toPropertyKey(key);
	  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
	  else object[propertyKey] = value;
	};

	var TO_STRING_TAG = wellKnownSymbol('toStringTag');
	var test = {};

	test[TO_STRING_TAG] = 'z';

	var toStringTagSupport = String(test) === '[object z]';

	var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
	var Object$4 = global$1.Object;

	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof = toStringTagSupport ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object$4(it), TO_STRING_TAG$1)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
	};

	var functionToString = functionUncurryThis(Function.toString);

	// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
	if (!isCallable(sharedStore.inspectSource)) {
	  sharedStore.inspectSource = function (it) {
	    return functionToString(it);
	  };
	}

	var inspectSource = sharedStore.inspectSource;

	var noop = function () { /* empty */ };
	var empty = [];
	var construct = getBuiltIn('Reflect', 'construct');
	var constructorRegExp = /^\s*(?:class|function)\b/;
	var exec = functionUncurryThis(constructorRegExp.exec);
	var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

	var isConstructorModern = function isConstructor(argument) {
	  if (!isCallable(argument)) return false;
	  try {
	    construct(noop, empty, argument);
	    return true;
	  } catch (error) {
	    return false;
	  }
	};

	var isConstructorLegacy = function isConstructor(argument) {
	  if (!isCallable(argument)) return false;
	  switch (classof(argument)) {
	    case 'AsyncFunction':
	    case 'GeneratorFunction':
	    case 'AsyncGeneratorFunction': return false;
	  }
	  try {
	    // we can't check .prototype since constructors produced by .bind haven't it
	    // `Function#toString` throws on some built-it function in some legacy engines
	    // (for example, `DOMQuad` and similar in FF41-)
	    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
	  } catch (error) {
	    return true;
	  }
	};

	isConstructorLegacy.sham = true;

	// `IsConstructor` abstract operation
	// https://tc39.es/ecma262/#sec-isconstructor
	var isConstructor = !construct || fails(function () {
	  var called;
	  return isConstructorModern(isConstructorModern.call)
	    || !isConstructorModern(Object)
	    || !isConstructorModern(function () { called = true; })
	    || called;
	}) ? isConstructorLegacy : isConstructorModern;

	var SPECIES = wellKnownSymbol('species');
	var Array$1 = global$1.Array;

	// a part of `ArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#sec-arrayspeciescreate
	var arraySpeciesConstructor = function (originalArray) {
	  var C;
	  if (isArray(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (isConstructor(C) && (C === Array$1 || isArray(C.prototype))) C = undefined;
	    else if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array$1 : C;
	};

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
	  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
	};

	var SPECIES$1 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return engineV8Version >= 51 || !fails(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$1] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
	var TypeError$7 = global$1.TypeError;

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray(O);
	};

	var FORCED$1 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.es/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	_export({ target: 'Array', proto: true, arity: 1, forced: FORCED$1 }, {
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  concat: function concat(arg) {
	    var O = toObject(this);
	    var A = arraySpeciesCreate(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable(E)) {
	        len = lengthOfArrayLike(E);
	        if (n + len > MAX_SAFE_INTEGER) throw TypeError$7(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER) throw TypeError$7(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	var String$3 = global$1.String;

	var toString$3 = function (argument) {
	  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
	  return String$3(argument);
	};

	var max = Math.max;
	var min$1 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex = function (index, length) {
	  var integer = toIntegerOrInfinity(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = lengthOfArrayLike(O);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare -- NaN check
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare -- NaN check
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.es/ecma262/#sec-array.prototype.includes
	  includes: createMethod(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.es/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod(false)
	};

	var hiddenKeys = {};

	var indexOf = arrayIncludes.indexOf;


	var push = functionUncurryThis([].push);

	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !hasOwnProperty_1(hiddenKeys, key) && hasOwnProperty_1(O, key) && push(result, key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (hasOwnProperty_1(O, key = names[i++])) {
	    ~indexOf(result, key) || push(result, key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	// `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys
	// eslint-disable-next-line es-x/no-object-keys -- safe
	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	// `Object.defineProperties` method
	// https://tc39.es/ecma262/#sec-object.defineproperties
	// eslint-disable-next-line es-x/no-object-defineproperties -- safe
	var f$3 = descriptors && !v8PrototypeDefineBug ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var props = toIndexedObject(Properties);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) objectDefineProperty.f(O, key = keys[index++], props[key]);
	  return O;
	};

	var objectDefineProperties = {
		f: f$3
	};

	var html = getBuiltIn('document', 'documentElement');

	var keys = shared('keys');

	var sharedKey = function (key) {
	  return keys[key] || (keys[key] = uid(key));
	};

	/* global ActiveXObject -- old IE, WSH */

	var GT = '>';
	var LT = '<';
	var PROTOTYPE = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO = sharedKey('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
	  try {
	    activeXDocument = new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject = typeof document != 'undefined'
	    ? document.domain && activeXDocument
	      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
	      : NullProtoObjectViaIFrame()
	    : NullProtoObjectViaActiveX(activeXDocument); // WSH
	  var length = enumBugKeys.length;
	  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
	  return NullProtoObject();
	};

	hiddenKeys[IE_PROTO] = true;

	// `Object.create` method
	// https://tc39.es/ecma262/#sec-object.create
	// eslint-disable-next-line es-x/no-object-create -- safe
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE] = anObject(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = NullProtoObject();
	  return Properties === undefined ? result : objectDefineProperties.f(result, Properties);
	};

	var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.es/ecma262/#sec-object.getownpropertynames
	// eslint-disable-next-line es-x/no-object-getownpropertynames -- safe
	var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys$1);
	};

	var objectGetOwnPropertyNames = {
		f: f$4
	};

	var Array$2 = global$1.Array;
	var max$1 = Math.max;

	var arraySliceSimple = function (O, start, end) {
	  var length = lengthOfArrayLike(O);
	  var k = toAbsoluteIndex(start, length);
	  var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	  var result = Array$2(max$1(fin - k, 0));
	  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);
	  result.length = n;
	  return result;
	};

	/* eslint-disable es-x/no-object-getownpropertynames -- safe */

	var $getOwnPropertyNames = objectGetOwnPropertyNames.f;


	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return $getOwnPropertyNames(it);
	  } catch (error) {
	    return arraySliceSimple(windowNames);
	  }
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var f$5 = function getOwnPropertyNames(it) {
	  return windowNames && classofRaw(it) == 'Window'
	    ? getWindowNames(it)
	    : $getOwnPropertyNames(toIndexedObject(it));
	};

	var objectGetOwnPropertyNamesExternal = {
		f: f$5
	};

	// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- safe
	var f$6 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$6
	};

	var defineBuiltIn = function (target, key, value, options) {
	  if (options && options.enumerable) target[key] = value;
	  else createNonEnumerableProperty(target, key, value);
	  return target;
	};

	var f$7 = wellKnownSymbol;

	var wellKnownSymbolWrapped = {
		f: f$7
	};

	var defineProperty$4 = objectDefineProperty.f;

	var defineWellKnownSymbol = function (NAME) {
	  var Symbol = path.Symbol || (path.Symbol = {});
	  if (!hasOwnProperty_1(Symbol, NAME)) defineProperty$4(Symbol, NAME, {
	    value: wellKnownSymbolWrapped.f(NAME)
	  });
	};

	var symbolDefineToPrimitive = function () {
	  var Symbol = getBuiltIn('Symbol');
	  var SymbolPrototype = Symbol && Symbol.prototype;
	  var valueOf = SymbolPrototype && SymbolPrototype.valueOf;
	  var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

	  if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) {
	    // `Symbol.prototype[@@toPrimitive]` method
	    // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
	    // eslint-disable-next-line no-unused-vars -- required for .length
	    defineBuiltIn(SymbolPrototype, TO_PRIMITIVE, function (hint) {
	      return functionCall(valueOf, this);
	    }, { arity: 1 });
	  }
	};

	// `Object.prototype.toString` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.tostring
	var objectToString = toStringTagSupport ? {}.toString : function toString() {
	  return '[object ' + classof(this) + ']';
	};

	var defineProperty$5 = objectDefineProperty.f;





	var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');

	var setToStringTag = function (it, TAG, STATIC, SET_METHOD) {
	  if (it) {
	    var target = STATIC ? it : it.prototype;
	    if (!hasOwnProperty_1(target, TO_STRING_TAG$2)) {
	      defineProperty$5(target, TO_STRING_TAG$2, { configurable: true, value: TAG });
	    }
	    if (SET_METHOD && !toStringTagSupport) {
	      createNonEnumerableProperty(target, 'toString', objectToString);
	    }
	  }
	};

	var WeakMap$1 = global$1.WeakMap;

	var nativeWeakMap = isCallable(WeakMap$1) && /native code/.test(inspectSource(WeakMap$1));

	var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
	var TypeError$8 = global$1.TypeError;
	var WeakMap$2 = global$1.WeakMap;
	var set, get, has;

	var enforce = function (it) {
	  return has(it) ? get(it) : set(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError$8('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap || sharedStore.state) {
	  var store$1 = sharedStore.state || (sharedStore.state = new WeakMap$2());
	  var wmget = functionUncurryThis(store$1.get);
	  var wmhas = functionUncurryThis(store$1.has);
	  var wmset = functionUncurryThis(store$1.set);
	  set = function (it, metadata) {
	    if (wmhas(store$1, it)) throw new TypeError$8(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    wmset(store$1, it, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return wmget(store$1, it) || {};
	  };
	  has = function (it) {
	    return wmhas(store$1, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys[STATE] = true;
	  set = function (it, metadata) {
	    if (hasOwnProperty_1(it, STATE)) throw new TypeError$8(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    createNonEnumerableProperty(it, STATE, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return hasOwnProperty_1(it, STATE) ? it[STATE] : {};
	  };
	  has = function (it) {
	    return hasOwnProperty_1(it, STATE);
	  };
	}

	var internalState = {
	  set: set,
	  get: get,
	  has: has,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var push$1 = functionUncurryThis([].push);

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
	var createMethod$1 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var IS_FILTER_REJECT = TYPE == 7;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = functionBindContext(callbackfn, that);
	    var length = lengthOfArrayLike(self);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push$1(target, value);      // filter
	        } else switch (TYPE) {
	          case 4: return false;             // every
	          case 7: push$1(target, value);      // filterReject
	        }
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.es/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$1(0),
	  // `Array.prototype.map` method
	  // https://tc39.es/ecma262/#sec-array.prototype.map
	  map: createMethod$1(1),
	  // `Array.prototype.filter` method
	  // https://tc39.es/ecma262/#sec-array.prototype.filter
	  filter: createMethod$1(2),
	  // `Array.prototype.some` method
	  // https://tc39.es/ecma262/#sec-array.prototype.some
	  some: createMethod$1(3),
	  // `Array.prototype.every` method
	  // https://tc39.es/ecma262/#sec-array.prototype.every
	  every: createMethod$1(4),
	  // `Array.prototype.find` method
	  // https://tc39.es/ecma262/#sec-array.prototype.find
	  find: createMethod$1(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$1(6),
	  // `Array.prototype.filterReject` method
	  // https://github.com/tc39/proposal-array-filtering
	  filterReject: createMethod$1(7)
	};

	var $forEach = arrayIteration.forEach;

	var HIDDEN = sharedKey('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE$1 = 'prototype';

	var setInternalState = internalState.set;
	var getInternalState = internalState.getterFor(SYMBOL);

	var ObjectPrototype = Object[PROTOTYPE$1];
	var $Symbol = global$1.Symbol;
	var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE$1];
	var TypeError$9 = global$1.TypeError;
	var QObject = global$1.QObject;
	var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var nativeDefineProperty = objectDefineProperty.f;
	var nativeGetOwnPropertyNames = objectGetOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable = objectPropertyIsEnumerable.f;
	var push$2 = functionUncurryThis([].push);

	var AllSymbols = shared('symbols');
	var ObjectPrototypeSymbols = shared('op-symbols');
	var WellKnownSymbolsStore$1 = shared('wks');

	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDescriptor = descriptors && fails(function () {
	  return objectCreate(nativeDefineProperty({}, 'a', {
	    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
	  nativeDefineProperty(O, P, Attributes);
	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
	    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty;

	var wrap = function (tag, description) {
	  var symbol = AllSymbols[tag] = objectCreate(SymbolPrototype);
	  setInternalState(symbol, {
	    type: SYMBOL,
	    tag: tag,
	    description: description
	  });
	  if (!descriptors) symbol.description = description;
	  return symbol;
	};

	var $defineProperty$1 = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype) $defineProperty$1(ObjectPrototypeSymbols, P, Attributes);
	  anObject(O);
	  var key = toPropertyKey(P);
	  anObject(Attributes);
	  if (hasOwnProperty_1(AllSymbols, key)) {
	    if (!Attributes.enumerable) {
	      if (!hasOwnProperty_1(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
	      O[HIDDEN][key] = true;
	    } else {
	      if (hasOwnProperty_1(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
	      Attributes = objectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
	    } return setSymbolDescriptor(O, key, Attributes);
	  } return nativeDefineProperty(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
	  anObject(O);
	  var properties = toIndexedObject(Properties);
	  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
	  $forEach(keys, function (key) {
	    if (!descriptors || functionCall($propertyIsEnumerable$1, properties, key)) $defineProperty$1(O, key, properties[key]);
	  });
	  return O;
	};

	var $create = function create(O, Properties) {
	  return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
	};

	var $propertyIsEnumerable$1 = function propertyIsEnumerable(V) {
	  var P = toPropertyKey(V);
	  var enumerable = functionCall(nativePropertyIsEnumerable, this, P);
	  if (this === ObjectPrototype && hasOwnProperty_1(AllSymbols, P) && !hasOwnProperty_1(ObjectPrototypeSymbols, P)) return false;
	  return enumerable || !hasOwnProperty_1(this, P) || !hasOwnProperty_1(AllSymbols, P) || hasOwnProperty_1(this, HIDDEN) && this[HIDDEN][P]
	    ? enumerable : true;
	};

	var $getOwnPropertyDescriptor$2 = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject(O);
	  var key = toPropertyKey(P);
	  if (it === ObjectPrototype && hasOwnProperty_1(AllSymbols, key) && !hasOwnProperty_1(ObjectPrototypeSymbols, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor$1(it, key);
	  if (descriptor && hasOwnProperty_1(AllSymbols, key) && !(hasOwnProperty_1(it, HIDDEN) && it[HIDDEN][key])) {
	    descriptor.enumerable = true;
	  }
	  return descriptor;
	};

	var $getOwnPropertyNames$1 = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
	  var result = [];
	  $forEach(names, function (key) {
	    if (!hasOwnProperty_1(AllSymbols, key) && !hasOwnProperty_1(hiddenKeys, key)) push$2(result, key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols = function (O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
	  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
	  var result = [];
	  $forEach(names, function (key) {
	    if (hasOwnProperty_1(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwnProperty_1(ObjectPrototype, key))) {
	      push$2(result, AllSymbols[key]);
	    }
	  });
	  return result;
	};

	// `Symbol` constructor
	// https://tc39.es/ecma262/#sec-symbol-constructor
	if (!nativeSymbol) {
	  $Symbol = function Symbol() {
	    if (objectIsPrototypeOf(SymbolPrototype, this)) throw TypeError$9('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : toString$3(arguments[0]);
	    var tag = uid(description);
	    var setter = function (value) {
	      if (this === ObjectPrototype) functionCall(setter, ObjectPrototypeSymbols, value);
	      if (hasOwnProperty_1(this, HIDDEN) && hasOwnProperty_1(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
	    };
	    if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
	    return wrap(tag, description);
	  };

	  SymbolPrototype = $Symbol[PROTOTYPE$1];

	  defineBuiltIn(SymbolPrototype, 'toString', function toString() {
	    return getInternalState(this).tag;
	  });

	  defineBuiltIn($Symbol, 'withoutSetter', function (description) {
	    return wrap(uid(description), description);
	  });

	  objectPropertyIsEnumerable.f = $propertyIsEnumerable$1;
	  objectDefineProperty.f = $defineProperty$1;
	  objectDefineProperties.f = $defineProperties;
	  objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor$2;
	  objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames$1;
	  objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

	  wellKnownSymbolWrapped.f = function (name) {
	    return wrap(wellKnownSymbol(name), name);
	  };

	  if (descriptors) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty(SymbolPrototype, 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState(this).description;
	      }
	    });
	  }
	}

	_export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, {
	  Symbol: $Symbol
	});

	$forEach(objectKeys(WellKnownSymbolsStore$1), function (name) {
	  defineWellKnownSymbol(name);
	});

	_export({ target: SYMBOL, stat: true, forced: !nativeSymbol }, {
	  useSetter: function () { USE_SETTER = true; },
	  useSimple: function () { USE_SETTER = false; }
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {
	  // `Object.create` method
	  // https://tc39.es/ecma262/#sec-object.create
	  create: $create,
	  // `Object.defineProperty` method
	  // https://tc39.es/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty$1,
	  // `Object.defineProperties` method
	  // https://tc39.es/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor$2
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol }, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames$1
	});

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
	symbolDefineToPrimitive();

	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag($Symbol, SYMBOL);

	hiddenKeys[HIDDEN] = true;

	/* eslint-disable es-x/no-symbol -- safe */
	var nativeSymbolRegistry = nativeSymbol && !!Symbol['for'] && !!Symbol.keyFor;

	var StringToSymbolRegistry = shared('string-to-symbol-registry');
	var SymbolToStringRegistry = shared('symbol-to-string-registry');

	// `Symbol.for` method
	// https://tc39.es/ecma262/#sec-symbol.for
	_export({ target: 'Symbol', stat: true, forced: !nativeSymbolRegistry }, {
	  'for': function (key) {
	    var string = toString$3(key);
	    if (hasOwnProperty_1(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
	    var symbol = getBuiltIn('Symbol')(string);
	    StringToSymbolRegistry[string] = symbol;
	    SymbolToStringRegistry[symbol] = string;
	    return symbol;
	  }
	});

	var SymbolToStringRegistry$1 = shared('symbol-to-string-registry');

	// `Symbol.keyFor` method
	// https://tc39.es/ecma262/#sec-symbol.keyfor
	_export({ target: 'Symbol', stat: true, forced: !nativeSymbolRegistry }, {
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(tryToString(sym) + ' is not a symbol');
	    if (hasOwnProperty_1(SymbolToStringRegistry$1, sym)) return SymbolToStringRegistry$1[sym];
	  }
	});

	var arraySlice = functionUncurryThis([].slice);

	var $stringify = getBuiltIn('JSON', 'stringify');
	var exec$1 = functionUncurryThis(/./.exec);
	var charAt = functionUncurryThis(''.charAt);
	var charCodeAt = functionUncurryThis(''.charCodeAt);
	var replace = functionUncurryThis(''.replace);
	var numberToString = functionUncurryThis(1.0.toString);

	var tester = /[\uD800-\uDFFF]/g;
	var low = /^[\uD800-\uDBFF]$/;
	var hi = /^[\uDC00-\uDFFF]$/;

	var WRONG_SYMBOLS_CONVERSION = !nativeSymbol || fails(function () {
	  var symbol = getBuiltIn('Symbol')();
	  // MS Edge converts symbol values to JSON as {}
	  return $stringify([symbol]) != '[null]'
	    // WebKit converts symbol values to JSON as null
	    || $stringify({ a: symbol }) != '{}'
	    // V8 throws on boxed symbols
	    || $stringify(Object(symbol)) != '{}';
	});

	// https://github.com/tc39/proposal-well-formed-stringify
	var ILL_FORMED_UNICODE = fails(function () {
	  return $stringify('\uDF06\uD834') !== '"\\udf06\\ud834"'
	    || $stringify('\uDEAD') !== '"\\udead"';
	});

	var stringifyWithSymbolsFix = function (it, replacer) {
	  var args = arraySlice(arguments);
	  var $replacer = replacer;
	  if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	  if (!isArray(replacer)) replacer = function (key, value) {
	    if (isCallable($replacer)) value = functionCall($replacer, this, key, value);
	    if (!isSymbol(value)) return value;
	  };
	  args[1] = replacer;
	  return functionApply($stringify, null, args);
	};

	var fixIllFormed = function (match, offset, string) {
	  var prev = charAt(string, offset - 1);
	  var next = charAt(string, offset + 1);
	  if ((exec$1(low, match) && !exec$1(hi, next)) || (exec$1(hi, match) && !exec$1(low, prev))) {
	    return '\\u' + numberToString(charCodeAt(match, 0), 16);
	  } return match;
	};

	if ($stringify) {
	  // `JSON.stringify` method
	  // https://tc39.es/ecma262/#sec-json.stringify
	  _export({ target: 'JSON', stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
	    // eslint-disable-next-line no-unused-vars -- required for `.length`
	    stringify: function stringify(it, replacer, space) {
	      var args = arraySlice(arguments);
	      var result = functionApply(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
	      return ILL_FORMED_UNICODE && typeof result == 'string' ? replace(result, tester, fixIllFormed) : result;
	    }
	  });
	}

	// V8 ~ Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	var FORCED$2 = !nativeSymbol || fails(function () { objectGetOwnPropertySymbols.f(1); });

	// `Object.getOwnPropertySymbols` method
	// https://tc39.es/ecma262/#sec-object.getownpropertysymbols
	_export({ target: 'Object', stat: true, forced: FORCED$2 }, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    var $getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	    return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject(it)) : [];
	  }
	});

	// `Symbol.asyncIterator` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.asynciterator
	defineWellKnownSymbol('asyncIterator');

	// `Symbol.hasInstance` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.hasinstance
	defineWellKnownSymbol('hasInstance');

	// `Symbol.isConcatSpreadable` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.isconcatspreadable
	defineWellKnownSymbol('isConcatSpreadable');

	// `Symbol.iterator` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.iterator
	defineWellKnownSymbol('iterator');

	// `Symbol.match` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.match
	defineWellKnownSymbol('match');

	// `Symbol.matchAll` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.matchall
	defineWellKnownSymbol('matchAll');

	// `Symbol.replace` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.replace
	defineWellKnownSymbol('replace');

	// `Symbol.search` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.search
	defineWellKnownSymbol('search');

	// `Symbol.species` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.species
	defineWellKnownSymbol('species');

	// `Symbol.split` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.split
	defineWellKnownSymbol('split');

	// `Symbol.toPrimitive` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.toprimitive
	defineWellKnownSymbol('toPrimitive');

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
	symbolDefineToPrimitive();

	// `Symbol.toStringTag` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.tostringtag
	defineWellKnownSymbol('toStringTag');

	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag(getBuiltIn('Symbol'), 'Symbol');

	// `Symbol.unscopables` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.unscopables
	defineWellKnownSymbol('unscopables');

	// JSON[@@toStringTag] property
	// https://tc39.es/ecma262/#sec-json-@@tostringtag
	setToStringTag(global$1.JSON, 'JSON', true);

	var symbol = path.Symbol;

	var iterators = {};

	var FunctionPrototype$2 = Function.prototype;
	// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
	var getDescriptor = descriptors && Object.getOwnPropertyDescriptor;

	var EXISTS$1 = hasOwnProperty_1(FunctionPrototype$2, 'name');
	// additional protection from minified / mangled / dropped function names
	var PROPER = EXISTS$1 && (function something() { /* empty */ }).name === 'something';
	var CONFIGURABLE$1 = EXISTS$1 && (!descriptors || (descriptors && getDescriptor(FunctionPrototype$2, 'name').configurable));

	var functionName = {
	  EXISTS: EXISTS$1,
	  PROPER: PROPER,
	  CONFIGURABLE: CONFIGURABLE$1
	};

	var correctPrototypeGetter = !fails(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  // eslint-disable-next-line es-x/no-object-getprototypeof -- required for testing
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO$1 = sharedKey('IE_PROTO');
	var Object$5 = global$1.Object;
	var ObjectPrototype$1 = Object$5.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf = correctPrototypeGetter ? Object$5.getPrototypeOf : function (O) {
	  var object = toObject(O);
	  if (hasOwnProperty_1(object, IE_PROTO$1)) return object[IE_PROTO$1];
	  var constructor = object.constructor;
	  if (isCallable(constructor) && object instanceof constructor) {
	    return constructor.prototype;
	  } return object instanceof Object$5 ? ObjectPrototype$1 : null;
	};

	var ITERATOR = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS = false;

	// `%IteratorPrototype%` object
	// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

	/* eslint-disable es-x/no-array-prototype-keys -- safe */
	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
	  }
	}

	var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {
	  var test = {};
	  // FF44- legacy iterators case
	  return IteratorPrototype[ITERATOR].call(test) !== test;
	});

	if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
	else IteratorPrototype = objectCreate(IteratorPrototype);

	// `%IteratorPrototype%[@@iterator]()` method
	// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
	if (!isCallable(IteratorPrototype[ITERATOR])) {
	  defineBuiltIn(IteratorPrototype, ITERATOR, function () {
	    return this;
	  });
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





	var returnThis = function () { return this; };

	var createIteratorConstructor = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
	  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
	  iterators[TO_STRING_TAG] = returnThis;
	  return IteratorConstructor;
	};

	var String$4 = global$1.String;
	var TypeError$a = global$1.TypeError;

	var aPossiblePrototype = function (argument) {
	  if (typeof argument == 'object' || isCallable(argument)) return argument;
	  throw TypeError$a("Can't set " + String$4(argument) + ' as a prototype');
	};

	/* eslint-disable no-proto -- safe */

	// `Object.setPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	// eslint-disable-next-line es-x/no-object-setprototypeof -- safe
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
	    setter = functionUncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
	    setter(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var PROPER_FUNCTION_NAME = functionName.PROPER;
	var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$1 = wellKnownSymbol('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis$1 = function () { return this; };

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$1]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
	    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
	      iterators[TO_STRING_TAG] = returnThis$1;
	    }
	  }

	  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
	  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    {
	      INCORRECT_VALUES_NAME = true;
	      defaultIterator = function values() { return functionCall(nativeIterator, this); };
	    }
	  }

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
	  }

	  // define iterator
	  if ((FORCED) && IterablePrototype[ITERATOR$1] !== defaultIterator) {
	    defineBuiltIn(IterablePrototype, ITERATOR$1, defaultIterator, { name: DEFAULT });
	  }
	  iterators[NAME] = defaultIterator;

	  return methods;
	};

	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState$1 = internalState.set;
	var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR);

	// `Array.prototype.entries` method
	// https://tc39.es/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.es/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.es/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.es/ecma262/#sec-createarrayiterator
	defineIterator(Array, 'Array', function (iterated, kind) {
	  setInternalState$1(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject(iterated), // target
	    index: 0,                          // next index
	    kind: kind                         // kind
	  });
	// `%ArrayIteratorPrototype%.next` method
	// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState$1(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;
	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return { value: undefined, done: true };
	  }
	  if (kind == 'keys') return { value: index, done: false };
	  if (kind == 'values') return { value: target[index], done: false };
	  return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.es/ecma262/#sec-createmappedargumentsobject
	iterators.Arguments = iterators.Array;

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');

	for (var COLLECTION_NAME in domIterables) {
	  var Collection = global$1[COLLECTION_NAME];
	  var CollectionPrototype = Collection && Collection.prototype;
	  if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG$3) {
	    createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG$3, COLLECTION_NAME);
	  }
	  iterators[COLLECTION_NAME] = iterators.Array;
	}

	var symbol$1 = symbol;

	var symbol$2 = symbol$1;

	// `Symbol.asyncDispose` well-known symbol
	// https://github.com/tc39/proposal-using-statement
	defineWellKnownSymbol('asyncDispose');

	// `Symbol.dispose` well-known symbol
	// https://github.com/tc39/proposal-using-statement
	defineWellKnownSymbol('dispose');

	// `Symbol.matcher` well-known symbol
	// https://github.com/tc39/proposal-pattern-matching
	defineWellKnownSymbol('matcher');

	// `Symbol.metadata` well-known symbol
	// https://github.com/tc39/proposal-decorators
	defineWellKnownSymbol('metadata');

	// `Symbol.observable` well-known symbol
	// https://github.com/tc39/proposal-observable
	defineWellKnownSymbol('observable');

	// TODO: remove from `core-js@4`


	// `Symbol.patternMatch` well-known symbol
	// https://github.com/tc39/proposal-pattern-matching
	defineWellKnownSymbol('patternMatch');

	// TODO: remove from `core-js@4`


	defineWellKnownSymbol('replaceAll');

	// TODO: Remove from `core-js@4`

	// TODO: Remove from `core-js@4`


	var symbol$3 = symbol$2;

	var symbol$4 = symbol$3;

	var symbol$5 = symbol$4;

	var charAt$1 = functionUncurryThis(''.charAt);
	var charCodeAt$1 = functionUncurryThis(''.charCodeAt);
	var stringSlice$1 = functionUncurryThis(''.slice);

	var createMethod$2 = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = toString$3(requireObjectCoercible($this));
	    var position = toIntegerOrInfinity(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = charCodeAt$1(S, position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = charCodeAt$1(S, position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING
	          ? charAt$1(S, position)
	          : first
	        : CONVERT_TO_STRING
	          ? stringSlice$1(S, position, position + 2)
	          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$2(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$2(true)
	};

	var charAt$2 = stringMultibyte.charAt;




	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$2 = internalState.set;
	var getInternalState$2 = internalState.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
	defineIterator(String, 'String', function (iterated) {
	  setInternalState$2(this, {
	    type: STRING_ITERATOR,
	    string: toString$3(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$2(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt$2(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	var iterator = wellKnownSymbolWrapped.f('iterator');

	var iterator$1 = iterator;

	var iterator$2 = iterator$1;

	var iterator$3 = iterator$2;

	var iterator$4 = iterator$3;

	var iterator$5 = iterator$4;

	var _typeof_1 = createCommonjsModule(function (module) {
	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return (module.exports = _typeof = "function" == typeof symbol$5 && "symbol" == typeof iterator$5 ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof symbol$5 && obj.constructor === symbol$5 && obj !== symbol$5.prototype ? "symbol" : typeof obj;
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
	}

	module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var defineBuiltIns = function (target, src, options) {
	  for (var key in src) {
	    if (options && options.unsafe && target[key]) target[key] = src[key];
	    else defineBuiltIn(target, key, src[key], options);
	  } return target;
	};

	// FF26- bug: ArrayBuffers are non-extensible, but Object.isExtensible does not report it


	var arrayBufferNonExtensible = fails(function () {
	  if (typeof ArrayBuffer == 'function') {
	    var buffer = new ArrayBuffer(8);
	    // eslint-disable-next-line es-x/no-object-isextensible, es-x/no-object-defineproperty -- safe
	    if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', { value: 8 });
	  }
	});

	// eslint-disable-next-line es-x/no-object-isextensible -- safe
	var $isExtensible = Object.isExtensible;
	var FAILS_ON_PRIMITIVES$1 = fails(function () { $isExtensible(1); });

	// `Object.isExtensible` method
	// https://tc39.es/ecma262/#sec-object.isextensible
	var objectIsExtensible = (FAILS_ON_PRIMITIVES$1 || arrayBufferNonExtensible) ? function isExtensible(it) {
	  if (!isObject(it)) return false;
	  if (arrayBufferNonExtensible && classofRaw(it) == 'ArrayBuffer') return false;
	  return $isExtensible ? $isExtensible(it) : true;
	} : $isExtensible;

	var freezing = !fails(function () {
	  // eslint-disable-next-line es-x/no-object-isextensible, es-x/no-object-preventextensions -- required for testing
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	var internalMetadata = createCommonjsModule(function (module) {
	var defineProperty = objectDefineProperty.f;






	var REQUIRED = false;
	var METADATA = uid('meta');
	var id = 0;

	var setMetadata = function (it) {
	  defineProperty(it, METADATA, { value: {
	    objectID: 'O' + id++, // object ID
	    weakData: {}          // weak collections IDs
	  } });
	};

	var fastKey = function (it, create) {
	  // return a primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!hasOwnProperty_1(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!objectIsExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMetadata(it);
	  // return object ID
	  } return it[METADATA].objectID;
	};

	var getWeakData = function (it, create) {
	  if (!hasOwnProperty_1(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!objectIsExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMetadata(it);
	  // return the store of weak collections IDs
	  } return it[METADATA].weakData;
	};

	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (freezing && REQUIRED && objectIsExtensible(it) && !hasOwnProperty_1(it, METADATA)) setMetadata(it);
	  return it;
	};

	var enable = function () {
	  meta.enable = function () { /* empty */ };
	  REQUIRED = true;
	  var getOwnPropertyNames = objectGetOwnPropertyNames.f;
	  var splice = functionUncurryThis([].splice);
	  var test = {};
	  test[METADATA] = 1;

	  // prevent exposing of metadata key
	  if (getOwnPropertyNames(test).length) {
	    objectGetOwnPropertyNames.f = function (it) {
	      var result = getOwnPropertyNames(it);
	      for (var i = 0, length = result.length; i < length; i++) {
	        if (result[i] === METADATA) {
	          splice(result, i, 1);
	          break;
	        }
	      } return result;
	    };

	    _export({ target: 'Object', stat: true, forced: true }, {
	      getOwnPropertyNames: objectGetOwnPropertyNamesExternal.f
	    });
	  }
	};

	var meta = module.exports = {
	  enable: enable,
	  fastKey: fastKey,
	  getWeakData: getWeakData,
	  onFreeze: onFreeze
	};

	hiddenKeys[METADATA] = true;
	});

	var ITERATOR$2 = wellKnownSymbol('iterator');
	var ArrayPrototype = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod = function (it) {
	  return it !== undefined && (iterators.Array === it || ArrayPrototype[ITERATOR$2] === it);
	};

	var ITERATOR$3 = wellKnownSymbol('iterator');

	var getIteratorMethod = function (it) {
	  if (it != undefined) return getMethod(it, ITERATOR$3)
	    || getMethod(it, '@@iterator')
	    || iterators[classof(it)];
	};

	var TypeError$b = global$1.TypeError;

	var getIterator = function (argument, usingIterator) {
	  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
	  if (aCallable(iteratorMethod)) return anObject(functionCall(iteratorMethod, argument));
	  throw TypeError$b(tryToString(argument) + ' is not iterable');
	};

	var iteratorClose = function (iterator, kind, value) {
	  var innerResult, innerError;
	  anObject(iterator);
	  try {
	    innerResult = getMethod(iterator, 'return');
	    if (!innerResult) {
	      if (kind === 'throw') throw value;
	      return value;
	    }
	    innerResult = functionCall(innerResult, iterator);
	  } catch (error) {
	    innerError = true;
	    innerResult = error;
	  }
	  if (kind === 'throw') throw value;
	  if (innerError) throw innerResult;
	  anObject(innerResult);
	  return value;
	};

	var TypeError$c = global$1.TypeError;

	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var ResultPrototype = Result.prototype;

	var iterate = function (iterable, unboundFunction, options) {
	  var that = options && options.that;
	  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
	  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
	  var INTERRUPTED = !!(options && options.INTERRUPTED);
	  var fn = functionBindContext(unboundFunction, that);
	  var iterator, iterFn, index, length, result, next, step;

	  var stop = function (condition) {
	    if (iterator) iteratorClose(iterator, 'normal', condition);
	    return new Result(true, condition);
	  };

	  var callFn = function (value) {
	    if (AS_ENTRIES) {
	      anObject(value);
	      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
	    } return INTERRUPTED ? fn(value, stop) : fn(value);
	  };

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (!iterFn) throw TypeError$c(tryToString(iterable) + ' is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
	        result = callFn(iterable[index]);
	        if (result && objectIsPrototypeOf(ResultPrototype, result)) return result;
	      } return new Result(false);
	    }
	    iterator = getIterator(iterable, iterFn);
	  }

	  next = iterator.next;
	  while (!(step = functionCall(next, iterator)).done) {
	    try {
	      result = callFn(step.value);
	    } catch (error) {
	      iteratorClose(iterator, 'throw', error);
	    }
	    if (typeof result == 'object' && result && objectIsPrototypeOf(ResultPrototype, result)) return result;
	  } return new Result(false);
	};

	var TypeError$d = global$1.TypeError;

	var anInstance = function (it, Prototype) {
	  if (objectIsPrototypeOf(Prototype, it)) return it;
	  throw TypeError$d('Incorrect invocation');
	};

	var defineProperty$6 = objectDefineProperty.f;
	var forEach = arrayIteration.forEach;



	var setInternalState$3 = internalState.set;
	var internalStateGetterFor = internalState.getterFor;

	var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global$1[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var exported = {};
	  var Constructor;

	  if (!descriptors || !isCallable(NativeConstructor)
	    || !(IS_WEAK || NativePrototype.forEach && !fails(function () { new NativeConstructor().entries().next(); }))
	  ) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    internalMetadata.enable();
	  } else {
	    Constructor = wrapper(function (target, iterable) {
	      setInternalState$3(anInstance(target, Prototype), {
	        type: CONSTRUCTOR_NAME,
	        collection: new NativeConstructor()
	      });
	      if (iterable != undefined) iterate(iterable, target[ADDER], { that: target, AS_ENTRIES: IS_MAP });
	    });

	    var Prototype = Constructor.prototype;

	    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

	    forEach(['add', 'clear', 'delete', 'forEach', 'get', 'has', 'set', 'keys', 'values', 'entries'], function (KEY) {
	      var IS_ADDER = KEY == 'add' || KEY == 'set';
	      if (KEY in NativePrototype && !(IS_WEAK && KEY == 'clear')) {
	        createNonEnumerableProperty(Prototype, KEY, function (a, b) {
	          var collection = getInternalState(this).collection;
	          if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
	          var result = collection[KEY](a === 0 ? 0 : a, b);
	          return IS_ADDER ? this : result;
	        });
	      }
	    });

	    IS_WEAK || defineProperty$6(Prototype, 'size', {
	      configurable: true,
	      get: function () {
	        return getInternalState(this).collection.size;
	      }
	    });
	  }

	  setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  _export({ global: true, forced: true }, exported);

	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

	  return Constructor;
	};

	var getWeakData = internalMetadata.getWeakData;








	var setInternalState$4 = internalState.set;
	var internalStateGetterFor$1 = internalState.getterFor;
	var find = arrayIteration.find;
	var findIndex = arrayIteration.findIndex;
	var splice = functionUncurryThis([].splice);
	var id$1 = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function (store) {
	  return store.frozen || (store.frozen = new UncaughtFrozenStore());
	};

	var UncaughtFrozenStore = function () {
	  this.entries = [];
	};

	var findUncaughtFrozen = function (store, key) {
	  return find(store.entries, function (it) {
	    return it[0] === key;
	  });
	};

	UncaughtFrozenStore.prototype = {
	  get: function (key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function (key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function (key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;
	    else this.entries.push([key, value]);
	  },
	  'delete': function (key) {
	    var index = findIndex(this.entries, function (it) {
	      return it[0] === key;
	    });
	    if (~index) splice(this.entries, index, 1);
	    return !!~index;
	  }
	};

	var collectionWeak = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var Constructor = wrapper(function (that, iterable) {
	      anInstance(that, Prototype);
	      setInternalState$4(that, {
	        type: CONSTRUCTOR_NAME,
	        id: id$1++,
	        frozen: undefined
	      });
	      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
	    });

	    var Prototype = Constructor.prototype;

	    var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var data = getWeakData(anObject(key), true);
	      if (data === true) uncaughtFrozenStore(state).set(key, value);
	      else data[state.id] = value;
	      return that;
	    };

	    defineBuiltIns(Prototype, {
	      // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
	      // https://tc39.es/ecma262/#sec-weakset.prototype.delete
	      'delete': function (key) {
	        var state = getInternalState(this);
	        if (!isObject(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
	        return data && hasOwnProperty_1(data, state.id) && delete data[state.id];
	      },
	      // `{ WeakMap, WeakSet }.prototype.has(key)` methods
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.has
	      // https://tc39.es/ecma262/#sec-weakset.prototype.has
	      has: function has(key) {
	        var state = getInternalState(this);
	        if (!isObject(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state).has(key);
	        return data && hasOwnProperty_1(data, state.id);
	      }
	    });

	    defineBuiltIns(Prototype, IS_MAP ? {
	      // `WeakMap.prototype.get(key)` method
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.get
	      get: function get(key) {
	        var state = getInternalState(this);
	        if (isObject(key)) {
	          var data = getWeakData(key);
	          if (data === true) return uncaughtFrozenStore(state).get(key);
	          return data ? data[state.id] : undefined;
	        }
	      },
	      // `WeakMap.prototype.set(key, value)` method
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.set
	      set: function set(key, value) {
	        return define(this, key, value);
	      }
	    } : {
	      // `WeakSet.prototype.add(value)` method
	      // https://tc39.es/ecma262/#sec-weakset.prototype.add
	      add: function add(value) {
	        return define(this, value, true);
	      }
	    });

	    return Constructor;
	  }
	};

	var enforceInternalState = internalState.enforce;


	var IS_IE11 = !global$1.ActiveXObject && 'ActiveXObject' in global$1;
	var InternalWeakMap;

	var wrapper = function (init) {
	  return function WeakMap() {
	    return init(this, arguments.length ? arguments[0] : undefined);
	  };
	};

	// `WeakMap` constructor
	// https://tc39.es/ecma262/#sec-weakmap-constructor
	var $WeakMap = collection('WeakMap', wrapper, collectionWeak);

	// IE11 WeakMap frozen keys fix
	// We can't use feature detection because it crash some old IE builds
	// https://github.com/zloirock/core-js/issues/485
	if (nativeWeakMap && IS_IE11) {
	  InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
	  internalMetadata.enable();
	  var WeakMapPrototype = $WeakMap.prototype;
	  var nativeDelete = functionUncurryThis(WeakMapPrototype['delete']);
	  var nativeHas = functionUncurryThis(WeakMapPrototype.has);
	  var nativeGet = functionUncurryThis(WeakMapPrototype.get);
	  var nativeSet = functionUncurryThis(WeakMapPrototype.set);
	  defineBuiltIns(WeakMapPrototype, {
	    'delete': function (key) {
	      if (isObject(key) && !objectIsExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeDelete(this, key) || state.frozen['delete'](key);
	      } return nativeDelete(this, key);
	    },
	    has: function has(key) {
	      if (isObject(key) && !objectIsExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas(this, key) || state.frozen.has(key);
	      } return nativeHas(this, key);
	    },
	    get: function get(key) {
	      if (isObject(key) && !objectIsExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
	      } return nativeGet(this, key);
	    },
	    set: function set(key, value) {
	      if (isObject(key) && !objectIsExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
	      } else nativeSet(this, key, value);
	      return this;
	    }
	  });
	}

	var weakMap = path.WeakMap;

	var weakMap$1 = weakMap;

	var weakMap$2 = weakMap$1;

	var concat = functionUncurryThis([].concat);

	// all object keys, includes non-enumerable and symbols
	var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = objectGetOwnPropertyNames.f(anObject(it));
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
	};

	var copyConstructorProperties = function (target, source, exceptions) {
	  var keys = ownKeys(source);
	  var defineProperty = objectDefineProperty.f;
	  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!hasOwnProperty_1(target, key) && !(exceptions && hasOwnProperty_1(exceptions, key))) {
	      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	    }
	  }
	};

	var $Error = Error;
	var replace$1 = functionUncurryThis(''.replace);

	var TEST = (function (arg) { return String($Error(arg).stack); })('zxcasd');
	var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
	var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);

	var clearErrorStack = function (stack, dropEntries) {
	  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string' && !$Error.prepareStackTrace) {
	    while (dropEntries--) stack = replace$1(stack, V8_OR_CHAKRA_STACK_ENTRY, '');
	  } return stack;
	};

	// `InstallErrorCause` abstract operation
	// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause
	var installErrorCause = function (O, options) {
	  if (isObject(options) && 'cause' in options) {
	    createNonEnumerableProperty(O, 'cause', options.cause);
	  }
	};

	var normalizeStringArgument = function (argument, $default) {
	  return argument === undefined ? arguments.length < 2 ? '' : $default : toString$3(argument);
	};

	var errorStackInstallable = !fails(function () {
	  var error = Error('a');
	  if (!('stack' in error)) return true;
	  // eslint-disable-next-line es-x/no-object-defineproperty -- safe
	  Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));
	  return error.stack !== 7;
	});

	var TO_STRING_TAG$4 = wellKnownSymbol('toStringTag');
	var Error$1 = global$1.Error;
	var push$3 = [].push;

	var $AggregateError = function AggregateError(errors, message /* , options */) {
	  var options = arguments.length > 2 ? arguments[2] : undefined;
	  var isInstance = objectIsPrototypeOf(AggregateErrorPrototype, this);
	  var that;
	  if (objectSetPrototypeOf) {
	    that = objectSetPrototypeOf(new Error$1(), isInstance ? objectGetPrototypeOf(this) : AggregateErrorPrototype);
	  } else {
	    that = isInstance ? this : objectCreate(AggregateErrorPrototype);
	    createNonEnumerableProperty(that, TO_STRING_TAG$4, 'Error');
	  }
	  if (message !== undefined) createNonEnumerableProperty(that, 'message', normalizeStringArgument(message));
	  if (errorStackInstallable) createNonEnumerableProperty(that, 'stack', clearErrorStack(that.stack, 1));
	  installErrorCause(that, options);
	  var errorsArray = [];
	  iterate(errors, push$3, { that: errorsArray });
	  createNonEnumerableProperty(that, 'errors', errorsArray);
	  return that;
	};

	if (objectSetPrototypeOf) objectSetPrototypeOf($AggregateError, Error$1);
	else copyConstructorProperties($AggregateError, Error$1, { name: true });

	var AggregateErrorPrototype = $AggregateError.prototype = objectCreate(Error$1.prototype, {
	  constructor: createPropertyDescriptor(1, $AggregateError),
	  message: createPropertyDescriptor(1, ''),
	  name: createPropertyDescriptor(1, 'AggregateError')
	});

	// `AggregateError` constructor
	// https://tc39.es/ecma262/#sec-aggregate-error-constructor
	_export({ global: true }, {
	  AggregateError: $AggregateError
	});

	var engineIsNode = classofRaw(global$1.process) == 'process';

	var SPECIES$2 = wellKnownSymbol('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty.f;

	  if (descriptors && Constructor && !Constructor[SPECIES$2]) {
	    defineProperty(Constructor, SPECIES$2, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var TypeError$e = global$1.TypeError;

	// `Assert: IsConstructor(argument) is true`
	var aConstructor = function (argument) {
	  if (isConstructor(argument)) return argument;
	  throw TypeError$e(tryToString(argument) + ' is not a constructor');
	};

	var SPECIES$3 = wellKnownSymbol('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.es/ecma262/#sec-speciesconstructor
	var speciesConstructor = function (O, defaultConstructor) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES$3]) == undefined ? defaultConstructor : aConstructor(S);
	};

	var TypeError$f = global$1.TypeError;

	var validateArgumentsLength = function (passed, required) {
	  if (passed < required) throw TypeError$f('Not enough arguments');
	  return passed;
	};

	var engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(engineUserAgent);

	var set$1 = global$1.setImmediate;
	var clear = global$1.clearImmediate;
	var process$2 = global$1.process;
	var Dispatch = global$1.Dispatch;
	var Function$1 = global$1.Function;
	var MessageChannel = global$1.MessageChannel;
	var String$5 = global$1.String;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var location, defer, channel, port;

	try {
	  // Deno throws a ReferenceError on `location` access without `--location` flag
	  location = global$1.location;
	} catch (error) { /* empty */ }

	var run = function (id) {
	  if (hasOwnProperty_1(queue, id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global$1.postMessage(String$5(id), location.protocol + '//' + location.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set$1 || !clear) {
	  set$1 = function setImmediate(handler) {
	    validateArgumentsLength(arguments.length, 1);
	    var fn = isCallable(handler) ? handler : Function$1(handler);
	    var args = arraySlice(arguments, 1);
	    queue[++counter] = function () {
	      functionApply(fn, undefined, args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (engineIsNode) {
	    defer = function (id) {
	      process$2.nextTick(runner(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !engineIsIos) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = functionBindContext(port.postMessage, port);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (
	    global$1.addEventListener &&
	    isCallable(global$1.postMessage) &&
	    !global$1.importScripts &&
	    location && location.protocol !== 'file:' &&
	    !fails(post)
	  ) {
	    defer = post;
	    global$1.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
	    defer = function (id) {
	      html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task = {
	  set: set$1,
	  clear: clear
	};

	var engineIsIosPebble = /ipad|iphone|ipod/i.test(engineUserAgent) && global$1.Pebble !== undefined;

	var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(engineUserAgent);

	var getOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor.f;
	var macrotask = task.set;





	var MutationObserver = global$1.MutationObserver || global$1.WebKitMutationObserver;
	var document$2 = global$1.document;
	var process$3 = global$1.process;
	var Promise$1 = global$1.Promise;
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$4(global$1, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head, last, notify, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (engineIsNode && (parent = process$3.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head) notify();
	        else last = undefined;
	        throw error;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
	  if (!engineIsIos && !engineIsNode && !engineIsWebosWebkit && MutationObserver && document$2) {
	    toggle = true;
	    node = document$2.createTextNode('');
	    new MutationObserver(flush).observe(node, { characterData: true });
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (!engineIsIosPebble && Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined);
	    // workaround of WebKit ~ iOS Safari 10.1 bug
	    promise.constructor = Promise$1;
	    then = functionBindContext(promise.then, promise);
	    notify = function () {
	      then(flush);
	    };
	  // Node.js without promises
	  } else if (engineIsNode) {
	    notify = function () {
	      process$3.nextTick(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessage
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    // strange IE + webpack dev server bug - use .bind(global)
	    macrotask = functionBindContext(macrotask, global$1);
	    notify = function () {
	      macrotask(flush);
	    };
	  }
	}

	var microtask = queueMicrotask || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last) last.next = task;
	  if (!head) {
	    head = task;
	    notify();
	  } last = task;
	};

	var hostReportErrors = function (a, b) {
	  var console = global$1.console;
	  if (console && console.error) {
	    arguments.length == 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var Queue = function () {
	  this.head = null;
	  this.tail = null;
	};

	Queue.prototype = {
	  add: function (item) {
	    var entry = { item: item, next: null };
	    if (this.head) this.tail.next = entry;
	    else this.head = entry;
	    this.tail = entry;
	  },
	  get: function () {
	    var entry = this.head;
	    if (entry) {
	      this.head = entry.next;
	      if (this.tail === entry) this.tail = null;
	      return entry.item;
	    }
	  }
	};

	var queue$1 = Queue;

	var promiseNativeConstructor = global$1.Promise;

	var engineIsBrowser = typeof window == 'object' && typeof Deno != 'object';

	var NativePromisePrototype = promiseNativeConstructor && promiseNativeConstructor.prototype;
	var SPECIES$4 = wellKnownSymbol('species');
	var SUBCLASSING = false;
	var NATIVE_PROMISE_REJECTION_EVENT = isCallable(global$1.PromiseRejectionEvent);

	var FORCED_PROMISE_CONSTRUCTOR = isForced_1('Promise', function () {
	  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(promiseNativeConstructor);
	  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(promiseNativeConstructor);
	  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	  // We can't detect it synchronously, so just check versions
	  if (!GLOBAL_CORE_JS_PROMISE && engineV8Version === 66) return true;
	  // We need Promise#{ catch, finally } in the pure version for preventing prototype pollution
	  if (!(NativePromisePrototype['catch'] && NativePromisePrototype['finally'])) return true;
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (engineV8Version >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;
	  // Detect correctness of subclassing with @@species support
	  var promise = new promiseNativeConstructor(function (resolve) { resolve(1); });
	  var FakePromise = function (exec) {
	    exec(function () { /* empty */ }, function () { /* empty */ });
	  };
	  var constructor = promise.constructor = {};
	  constructor[SPECIES$4] = FakePromise;
	  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
	  if (!SUBCLASSING) return true;
	  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	  return !GLOBAL_CORE_JS_PROMISE && engineIsBrowser && !NATIVE_PROMISE_REJECTION_EVENT;
	});

	var promiseConstructorDetection = {
	  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,
	  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,
	  SUBCLASSING: SUBCLASSING
	};

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aCallable(resolve);
	  this.reject = aCallable(reject);
	};

	// `NewPromiseCapability` abstract operation
	// https://tc39.es/ecma262/#sec-newpromisecapability
	var f$8 = function (C) {
	  return new PromiseCapability(C);
	};

	var newPromiseCapability = {
		f: f$8
	};

	var task$1 = task.set;









	var PROMISE = 'Promise';
	var FORCED_PROMISE_CONSTRUCTOR$1 = promiseConstructorDetection.CONSTRUCTOR;
	var NATIVE_PROMISE_REJECTION_EVENT$1 = promiseConstructorDetection.REJECTION_EVENT;
	var getInternalPromiseState = internalState.getterFor(PROMISE);
	var setInternalState$5 = internalState.set;
	var NativePromisePrototype$1 = promiseNativeConstructor && promiseNativeConstructor.prototype;
	var PromiseConstructor = promiseNativeConstructor;
	var PromisePrototype = NativePromisePrototype$1;
	var TypeError$g = global$1.TypeError;
	var document$3 = global$1.document;
	var process$4 = global$1.process;
	var newPromiseCapability$1 = newPromiseCapability.f;
	var newGenericPromiseCapability = newPromiseCapability$1;

	var DISPATCH_EVENT = !!(document$3 && document$3.createEvent && global$1.dispatchEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;

	var Internal, OwnPromiseCapability, PromiseWrapper;

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && isCallable(then = it.then) ? then : false;
	};

	var callReaction = function (reaction, state) {
	  var value = state.value;
	  var ok = state.state == FULFILLED;
	  var handler = ok ? reaction.ok : reaction.fail;
	  var resolve = reaction.resolve;
	  var reject = reaction.reject;
	  var domain = reaction.domain;
	  var result, then, exited;
	  try {
	    if (handler) {
	      if (!ok) {
	        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
	        state.rejection = HANDLED;
	      }
	      if (handler === true) result = value;
	      else {
	        if (domain) domain.enter();
	        result = handler(value); // can throw
	        if (domain) {
	          domain.exit();
	          exited = true;
	        }
	      }
	      if (result === reaction.promise) {
	        reject(TypeError$g('Promise-chain cycle'));
	      } else if (then = isThenable(result)) {
	        functionCall(then, result, resolve, reject);
	      } else resolve(result);
	    } else reject(value);
	  } catch (error) {
	    if (domain && !exited) domain.exit();
	    reject(error);
	  }
	};

	var notify$1 = function (state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  microtask(function () {
	    var reactions = state.reactions;
	    var reaction;
	    while (reaction = reactions.get()) {
	      callReaction(reaction, state);
	    }
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$3.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global$1.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (!NATIVE_PROMISE_REJECTION_EVENT$1 && (handler = global$1['on' + name])) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (state) {
	  functionCall(task$1, global$1, function () {
	    var promise = state.facade;
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform(function () {
	        if (engineIsNode) {
	          process$4.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = engineIsNode || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (state) {
	  functionCall(task$1, global$1, function () {
	    var promise = state.facade;
	    if (engineIsNode) {
	      process$4.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind$2 = function (fn, state, unwrap) {
	  return function (value) {
	    fn(state, value, unwrap);
	  };
	};

	var internalReject = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify$1(state, true);
	};

	var internalResolve = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (state.facade === value) throw TypeError$g("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask(function () {
	        var wrapper = { done: false };
	        try {
	          functionCall(then, value,
	            bind$2(internalResolve, wrapper, state),
	            bind$2(internalReject, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify$1(state, false);
	    }
	  } catch (error) {
	    internalReject({ done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED_PROMISE_CONSTRUCTOR$1) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance(this, PromisePrototype);
	    aCallable(executor);
	    functionCall(Internal, this);
	    var state = getInternalPromiseState(this);
	    try {
	      executor(bind$2(internalResolve, state), bind$2(internalReject, state));
	    } catch (error) {
	      internalReject(state, error);
	    }
	  };

	  PromisePrototype = PromiseConstructor.prototype;

	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  Internal = function Promise(executor) {
	    setInternalState$5(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: new queue$1(),
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };

	  // `Promise.prototype.then` method
	  // https://tc39.es/ecma262/#sec-promise.prototype.then
	  Internal.prototype = defineBuiltIn(PromisePrototype, 'then', function then(onFulfilled, onRejected) {
	    var state = getInternalPromiseState(this);
	    var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
	    state.parent = true;
	    reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
	    reaction.fail = isCallable(onRejected) && onRejected;
	    reaction.domain = engineIsNode ? process$4.domain : undefined;
	    if (state.state == PENDING) state.reactions.add(reaction);
	    else microtask(function () {
	      callReaction(reaction, state);
	    });
	    return reaction.promise;
	  });

	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalPromiseState(promise);
	    this.promise = promise;
	    this.resolve = bind$2(internalResolve, state);
	    this.reject = bind$2(internalReject, state);
	  };

	  newPromiseCapability.f = newPromiseCapability$1 = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}

	_export({ global: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR$1 }, {
	  Promise: PromiseConstructor
	});

	setToStringTag(PromiseConstructor, PROMISE, false, true);
	setSpecies(PROMISE);

	var ITERATOR$4 = wellKnownSymbol('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$4] = function () {
	    return this;
	  };
	  // eslint-disable-next-line es-x/no-array-from, no-throw-literal -- required for testing
	  Array.from(iteratorWithReturn, function () { throw 2; });
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$4] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var FORCED_PROMISE_CONSTRUCTOR$2 = promiseConstructorDetection.CONSTRUCTOR;

	var promiseStaticsIncorrectIteration = FORCED_PROMISE_CONSTRUCTOR$2 || !checkCorrectnessOfIteration(function (iterable) {
	  promiseNativeConstructor.all(iterable).then(undefined, function () { /* empty */ });
	});

	// `Promise.all` method
	// https://tc39.es/ecma262/#sec-promise.all
	_export({ target: 'Promise', stat: true, forced: promiseStaticsIncorrectIteration }, {
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aCallable(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        remaining++;
	        functionCall($promiseResolve, C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var FORCED_PROMISE_CONSTRUCTOR$3 = promiseConstructorDetection.CONSTRUCTOR;





	promiseNativeConstructor && promiseNativeConstructor.prototype;

	// `Promise.prototype.catch` method
	// https://tc39.es/ecma262/#sec-promise.prototype.catch
	_export({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR$3, real: true }, {
	  'catch': function (onRejected) {
	    return this.then(undefined, onRejected);
	  }
	});

	// `Promise.race` method
	// https://tc39.es/ecma262/#sec-promise.race
	_export({ target: 'Promise', stat: true, forced: promiseStaticsIncorrectIteration }, {
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability.f(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aCallable(C.resolve);
	      iterate(iterable, function (promise) {
	        functionCall($promiseResolve, C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var FORCED_PROMISE_CONSTRUCTOR$4 = promiseConstructorDetection.CONSTRUCTOR;

	// `Promise.reject` method
	// https://tc39.es/ecma262/#sec-promise.reject
	_export({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR$4 }, {
	  reject: function reject(r) {
	    var capability = newPromiseCapability.f(this);
	    functionCall(capability.reject, undefined, r);
	    return capability.promise;
	  }
	});

	var promiseResolve = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var FORCED_PROMISE_CONSTRUCTOR$5 = promiseConstructorDetection.CONSTRUCTOR;


	var PromiseConstructorWrapper = getBuiltIn('Promise');
	var CHECK_WRAPPER = !FORCED_PROMISE_CONSTRUCTOR$5;

	// `Promise.resolve` method
	// https://tc39.es/ecma262/#sec-promise.resolve
	_export({ target: 'Promise', stat: true, forced: isPure  }, {
	  resolve: function resolve(x) {
	    return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? promiseNativeConstructor : this, x);
	  }
	});

	// `Promise.allSettled` method
	// https://tc39.es/ecma262/#sec-promise.allsettled
	_export({ target: 'Promise', stat: true }, {
	  allSettled: function allSettled(iterable) {
	    var C = this;
	    var capability = newPromiseCapability.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var promiseResolve = aCallable(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        remaining++;
	        functionCall(promiseResolve, C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'fulfilled', value: value };
	          --remaining || resolve(values);
	        }, function (error) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'rejected', reason: error };
	          --remaining || resolve(values);
	        });
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var PROMISE_ANY_ERROR = 'No one promise resolved';

	// `Promise.any` method
	// https://tc39.es/ecma262/#sec-promise.any
	_export({ target: 'Promise', stat: true }, {
	  any: function any(iterable) {
	    var C = this;
	    var AggregateError = getBuiltIn('AggregateError');
	    var capability = newPromiseCapability.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var promiseResolve = aCallable(C.resolve);
	      var errors = [];
	      var counter = 0;
	      var remaining = 1;
	      var alreadyResolved = false;
	      iterate(iterable, function (promise) {
	        var index = counter++;
	        var alreadyRejected = false;
	        remaining++;
	        functionCall(promiseResolve, C, promise).then(function (value) {
	          if (alreadyRejected || alreadyResolved) return;
	          alreadyResolved = true;
	          resolve(value);
	        }, function (error) {
	          if (alreadyRejected || alreadyResolved) return;
	          alreadyRejected = true;
	          errors[index] = error;
	          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
	        });
	      });
	      --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var NativePromisePrototype$2 = promiseNativeConstructor && promiseNativeConstructor.prototype;

	// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
	var NON_GENERIC = !!promiseNativeConstructor && fails(function () {
	  // eslint-disable-next-line unicorn/no-thenable -- required for testing
	  NativePromisePrototype$2['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
	});

	// `Promise.prototype.finally` method
	// https://tc39.es/ecma262/#sec-promise.prototype.finally
	_export({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
	  'finally': function (onFinally) {
	    var C = speciesConstructor(this, getBuiltIn('Promise'));
	    var isFunction = isCallable(onFinally);
	    return this.then(
	      isFunction ? function (x) {
	        return promiseResolve(C, onFinally()).then(function () { return x; });
	      } : onFinally,
	      isFunction ? function (e) {
	        return promiseResolve(C, onFinally()).then(function () { throw e; });
	      } : onFinally
	    );
	  }
	});

	var promise$1 = path.Promise;

	var promise$2 = promise$1;

	var promise$3 = promise$2;

	var arrayMethodIsStrict = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call -- required for testing
	    method.call(null, argument || function () { return 1; }, 1);
	  });
	};

	var $forEach$1 = arrayIteration.forEach;


	var STRICT_METHOD = arrayMethodIsStrict('forEach');

	// `Array.prototype.forEach` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.foreach
	var arrayForEach = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	// eslint-disable-next-line es-x/no-array-prototype-foreach -- safe
	} : [].forEach;

	// `Array.prototype.forEach` method
	// https://tc39.es/ecma262/#sec-array.prototype.foreach
	// eslint-disable-next-line es-x/no-array-prototype-foreach -- safe
	_export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
	  forEach: arrayForEach
	});

	var entryVirtual = function (CONSTRUCTOR) {
	  return path[CONSTRUCTOR + 'Prototype'];
	};

	var forEach$1 = entryVirtual('Array').forEach;

	var forEach$2 = forEach$1;

	var ArrayPrototype$1 = Array.prototype;

	var DOMIterables = {
	  DOMTokenList: true,
	  NodeList: true
	};

	var forEach$3 = function (it) {
	  var own = it.forEach;
	  return it === ArrayPrototype$1 || (objectIsPrototypeOf(ArrayPrototype$1, it) && own === ArrayPrototype$1.forEach)
	    || hasOwnProperty_1(DOMIterables, classof(it)) ? forEach$2 : own;
	};

	var forEach$4 = forEach$3;

	// `Array.isArray` method
	// https://tc39.es/ecma262/#sec-array.isarray
	_export({ target: 'Array', stat: true }, {
	  isArray: isArray
	});

	var isArray$1 = path.Array.isArray;

	var isArray$2 = isArray$1;

	var isArray$3 = isArray$2;

	var FAILS_ON_PRIMITIVES$2 = fails(function () { objectKeys(1); });

	// `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$2 }, {
	  keys: function keys(it) {
	    return objectKeys(toObject(it));
	  }
	});

	var keys$1 = path.Object.keys;

	var keys$2 = keys$1;

	var keys$3 = keys$2;

	var classCallCheck = createCommonjsModule(function (module) {
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var defineProperty$7 = defineProperty$2;

	var defineProperty$8 = defineProperty$7;

	var defineProperty$9 = defineProperty$8;

	var defineProperty$a = defineProperty$9;

	var createClass = createCommonjsModule(function (module) {
	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;

	    defineProperty$a(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);

	  defineProperty$a(Constructor, "prototype", {
	    writable: false
	  });

	  return Constructor;
	}

	module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var defineProperty$b = createCommonjsModule(function (module) {
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    defineProperty$a(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var Function$2 = global$1.Function;
	var concat$1 = functionUncurryThis([].concat);
	var join = functionUncurryThis([].join);
	var factories = {};

	var construct$1 = function (C, argsLength, args) {
	  if (!hasOwnProperty_1(factories, argsLength)) {
	    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
	    factories[argsLength] = Function$2('C,a', 'return new C(' + join(list, ',') + ')');
	  } return factories[argsLength](C, args);
	};

	// `Function.prototype.bind` method implementation
	// https://tc39.es/ecma262/#sec-function.prototype.bind
	var functionBind = functionBindNative ? Function$2.bind : function bind(that /* , ...args */) {
	  var F = aCallable(this);
	  var Prototype = F.prototype;
	  var partArgs = arraySlice(arguments, 1);
	  var boundFunction = function bound(/* args... */) {
	    var args = concat$1(partArgs, arraySlice(arguments));
	    return this instanceof boundFunction ? construct$1(F, args.length, args) : F.apply(that, args);
	  };
	  if (isObject(Prototype)) boundFunction.prototype = Prototype;
	  return boundFunction;
	};

	var nativeConstruct = getBuiltIn('Reflect', 'construct');
	var ObjectPrototype$2 = Object.prototype;
	var push$4 = [].push;

	// `Reflect.construct` method
	// https://tc39.es/ecma262/#sec-reflect.construct
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function () {
	  function F() { /* empty */ }
	  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
	});

	var ARGS_BUG = !fails(function () {
	  nativeConstruct(function () { /* empty */ });
	});

	var FORCED$3 = NEW_TARGET_BUG || ARGS_BUG;

	_export({ target: 'Reflect', stat: true, forced: FORCED$3, sham: FORCED$3 }, {
	  construct: function construct(Target, args /* , newTarget */) {
	    aConstructor(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      functionApply(push$4, $args, args);
	      return new (functionApply(functionBind, Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = objectCreate(isObject(proto) ? proto : ObjectPrototype$2);
	    var result = functionApply(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

	var construct$2 = path.Reflect.construct;

	var construct$3 = construct$2;

	var construct$4 = construct$3;

	var isDataDescriptor = function (descriptor) {
	  return descriptor !== undefined && (hasOwnProperty_1(descriptor, 'value') || hasOwnProperty_1(descriptor, 'writable'));
	};

	// `Reflect.get` method
	// https://tc39.es/ecma262/#sec-reflect.get
	function get$1(target, propertyKey /* , receiver */) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var descriptor, prototype;
	  if (anObject(target) === receiver) return target[propertyKey];
	  descriptor = objectGetOwnPropertyDescriptor.f(target, propertyKey);
	  if (descriptor) return isDataDescriptor(descriptor)
	    ? descriptor.value
	    : descriptor.get === undefined ? undefined : functionCall(descriptor.get, receiver);
	  if (isObject(prototype = objectGetPrototypeOf(target))) return get$1(prototype, propertyKey, receiver);
	}

	_export({ target: 'Reflect', stat: true }, {
	  get: get$1
	});

	var get$2 = path.Reflect.get;

	var get$3 = get$2;

	var get$4 = get$3;

	var get$5 = get$4;

	var get$6 = get$5;

	var get$7 = get$6;

	var getOwnPropertyDescriptor$5 = getOwnPropertyDescriptor$2;

	var getOwnPropertyDescriptor$6 = getOwnPropertyDescriptor$5;

	var getOwnPropertyDescriptor$7 = getOwnPropertyDescriptor$6;

	var getOwnPropertyDescriptor$8 = getOwnPropertyDescriptor$7;

	// `Object.setPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.setprototypeof
	_export({ target: 'Object', stat: true }, {
	  setPrototypeOf: objectSetPrototypeOf
	});

	var setPrototypeOf = path.Object.setPrototypeOf;

	var setPrototypeOf$1 = setPrototypeOf;

	var setPrototypeOf$2 = setPrototypeOf$1;

	var setPrototypeOf$3 = setPrototypeOf$2;

	var setPrototypeOf$4 = setPrototypeOf$3;

	var setPrototypeOf$5 = setPrototypeOf$4;

	var FAILS_ON_PRIMITIVES$3 = fails(function () { objectGetPrototypeOf(1); });

	// `Object.getPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.getprototypeof
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$3, sham: !correctPrototypeGetter }, {
	  getPrototypeOf: function getPrototypeOf(it) {
	    return objectGetPrototypeOf(toObject(it));
	  }
	});

	var getPrototypeOf = path.Object.getPrototypeOf;

	var getPrototypeOf$1 = getPrototypeOf;

	var getPrototypeOf$2 = getPrototypeOf$1;

	var getPrototypeOf$3 = getPrototypeOf$2;

	var getPrototypeOf$4 = getPrototypeOf$3;

	var getPrototypeOf$5 = getPrototypeOf$4;

	var getPrototypeOf$6 = createCommonjsModule(function (module) {
	function _getPrototypeOf(o) {
	  module.exports = _getPrototypeOf = setPrototypeOf$5 ? getPrototypeOf$5 : function _getPrototypeOf(o) {
	    return o.__proto__ || getPrototypeOf$5(o);
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	  return _getPrototypeOf(o);
	}

	module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var superPropBase = createCommonjsModule(function (module) {
	function _superPropBase(object, property) {
	  while (!Object.prototype.hasOwnProperty.call(object, property)) {
	    object = getPrototypeOf$6(object);
	    if (object === null) break;
	  }

	  return object;
	}

	module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var get$8 = createCommonjsModule(function (module) {
	function _get() {
	  if (typeof Reflect !== "undefined" && get$7) {
	    module.exports = _get = get$7, module.exports.__esModule = true, module.exports["default"] = module.exports;
	  } else {
	    module.exports = _get = function _get(target, property, receiver) {
	      var base = superPropBase(target, property);
	      if (!base) return;

	      var desc = getOwnPropertyDescriptor$8(base, property);

	      if (desc.get) {
	        return desc.get.call(arguments.length < 3 ? target : receiver);
	      }

	      return desc.value;
	    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	  }

	  return _get.apply(this, arguments);
	}

	module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	// TODO: Remove from `core-js@4`




	// `Object.create` method
	// https://tc39.es/ecma262/#sec-object.create
	_export({ target: 'Object', stat: true, sham: !descriptors }, {
	  create: objectCreate
	});

	var Object$6 = path.Object;

	var create = function create(P, D) {
	  return Object$6.create(P, D);
	};

	var create$1 = create;

	var create$2 = create$1;

	var create$3 = create$2;

	var create$4 = create$3;

	var create$5 = create$4;

	var setPrototypeOf$6 = createCommonjsModule(function (module) {
	function _setPrototypeOf(o, p) {
	  module.exports = _setPrototypeOf = setPrototypeOf$5 || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	  return _setPrototypeOf(o, p);
	}

	module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var inherits = createCommonjsModule(function (module) {
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = create$5(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });

	  defineProperty$a(subClass, "prototype", {
	    writable: false
	  });

	  if (superClass) setPrototypeOf$6(subClass, superClass);
	}

	module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var assertThisInitialized = createCommonjsModule(function (module) {
	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var possibleConstructorReturn = createCommonjsModule(function (module) {
	var _typeof = _typeof_1["default"];



	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
	    return call;
	  } else if (call !== void 0) {
	    throw new TypeError("Derived constructors may only return object or undefined");
	  }

	  return assertThisInitialized(self);
	}

	module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var defineProperty$c = objectDefineProperty.f;








	var fastKey = internalMetadata.fastKey;


	var setInternalState$6 = internalState.set;
	var internalStateGetterFor$2 = internalState.getterFor;

	var collectionStrong = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var Constructor = wrapper(function (that, iterable) {
	      anInstance(that, Prototype);
	      setInternalState$6(that, {
	        type: CONSTRUCTOR_NAME,
	        index: objectCreate(null),
	        first: undefined,
	        last: undefined,
	        size: 0
	      });
	      if (!descriptors) that.size = 0;
	      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
	    });

	    var Prototype = Constructor.prototype;

	    var getInternalState = internalStateGetterFor$2(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var entry = getEntry(that, key);
	      var previous, index;
	      // change existing entry
	      if (entry) {
	        entry.value = value;
	      // create new entry
	      } else {
	        state.last = entry = {
	          index: index = fastKey(key, true),
	          key: key,
	          value: value,
	          previous: previous = state.last,
	          next: undefined,
	          removed: false
	        };
	        if (!state.first) state.first = entry;
	        if (previous) previous.next = entry;
	        if (descriptors) state.size++;
	        else that.size++;
	        // add to index
	        if (index !== 'F') state.index[index] = entry;
	      } return that;
	    };

	    var getEntry = function (that, key) {
	      var state = getInternalState(that);
	      // fast case
	      var index = fastKey(key);
	      var entry;
	      if (index !== 'F') return state.index[index];
	      // frozen object case
	      for (entry = state.first; entry; entry = entry.next) {
	        if (entry.key == key) return entry;
	      }
	    };

	    defineBuiltIns(Prototype, {
	      // `{ Map, Set }.prototype.clear()` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.clear
	      // https://tc39.es/ecma262/#sec-set.prototype.clear
	      clear: function clear() {
	        var that = this;
	        var state = getInternalState(that);
	        var data = state.index;
	        var entry = state.first;
	        while (entry) {
	          entry.removed = true;
	          if (entry.previous) entry.previous = entry.previous.next = undefined;
	          delete data[entry.index];
	          entry = entry.next;
	        }
	        state.first = state.last = undefined;
	        if (descriptors) state.size = 0;
	        else that.size = 0;
	      },
	      // `{ Map, Set }.prototype.delete(key)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.delete
	      // https://tc39.es/ecma262/#sec-set.prototype.delete
	      'delete': function (key) {
	        var that = this;
	        var state = getInternalState(that);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.next;
	          var prev = entry.previous;
	          delete state.index[entry.index];
	          entry.removed = true;
	          if (prev) prev.next = next;
	          if (next) next.previous = prev;
	          if (state.first == entry) state.first = next;
	          if (state.last == entry) state.last = prev;
	          if (descriptors) state.size--;
	          else that.size--;
	        } return !!entry;
	      },
	      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.foreach
	      // https://tc39.es/ecma262/#sec-set.prototype.foreach
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        var state = getInternalState(this);
	        var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	        var entry;
	        while (entry = entry ? entry.next : state.first) {
	          boundFunction(entry.value, entry.key, this);
	          // revert to the last existing entry
	          while (entry && entry.removed) entry = entry.previous;
	        }
	      },
	      // `{ Map, Set}.prototype.has(key)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.has
	      // https://tc39.es/ecma262/#sec-set.prototype.has
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });

	    defineBuiltIns(Prototype, IS_MAP ? {
	      // `Map.prototype.get(key)` method
	      // https://tc39.es/ecma262/#sec-map.prototype.get
	      get: function get(key) {
	        var entry = getEntry(this, key);
	        return entry && entry.value;
	      },
	      // `Map.prototype.set(key, value)` method
	      // https://tc39.es/ecma262/#sec-map.prototype.set
	      set: function set(key, value) {
	        return define(this, key === 0 ? 0 : key, value);
	      }
	    } : {
	      // `Set.prototype.add(value)` method
	      // https://tc39.es/ecma262/#sec-set.prototype.add
	      add: function add(value) {
	        return define(this, value = value === 0 ? 0 : value, value);
	      }
	    });
	    if (descriptors) defineProperty$c(Prototype, 'size', {
	      get: function () {
	        return getInternalState(this).size;
	      }
	    });
	    return Constructor;
	  },
	  setStrong: function (Constructor, CONSTRUCTOR_NAME, IS_MAP) {
	    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
	    var getInternalCollectionState = internalStateGetterFor$2(CONSTRUCTOR_NAME);
	    var getInternalIteratorState = internalStateGetterFor$2(ITERATOR_NAME);
	    // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
	    // https://tc39.es/ecma262/#sec-map.prototype.entries
	    // https://tc39.es/ecma262/#sec-map.prototype.keys
	    // https://tc39.es/ecma262/#sec-map.prototype.values
	    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
	    // https://tc39.es/ecma262/#sec-set.prototype.entries
	    // https://tc39.es/ecma262/#sec-set.prototype.keys
	    // https://tc39.es/ecma262/#sec-set.prototype.values
	    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
	    defineIterator(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {
	      setInternalState$6(this, {
	        type: ITERATOR_NAME,
	        target: iterated,
	        state: getInternalCollectionState(iterated),
	        kind: kind,
	        last: undefined
	      });
	    }, function () {
	      var state = getInternalIteratorState(this);
	      var kind = state.kind;
	      var entry = state.last;
	      // revert to the last existing entry
	      while (entry && entry.removed) entry = entry.previous;
	      // get next entry
	      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
	        // or finish the iteration
	        state.target = undefined;
	        return { value: undefined, done: true };
	      }
	      // return step by kind
	      if (kind == 'keys') return { value: entry.key, done: false };
	      if (kind == 'values') return { value: entry.value, done: false };
	      return { value: [entry.key, entry.value], done: false };
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // `{ Map, Set }.prototype[@@species]` accessors
	    // https://tc39.es/ecma262/#sec-get-map-@@species
	    // https://tc39.es/ecma262/#sec-get-set-@@species
	    setSpecies(CONSTRUCTOR_NAME);
	  }
	};

	// `Map` constructor
	// https://tc39.es/ecma262/#sec-map-objects
	collection('Map', function (init) {
	  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	var map = path.Map;

	var map$1 = map;

	var map$2 = map$1;

	// https://tc39.github.io/proposal-setmap-offrom/






	var push$5 = [].push;

	var collectionFrom = function from(source /* , mapFn, thisArg */) {
	  var length = arguments.length;
	  var mapFn = length > 1 ? arguments[1] : undefined;
	  var mapping, array, n, boundFunction;
	  aConstructor(this);
	  mapping = mapFn !== undefined;
	  if (mapping) aCallable(mapFn);
	  if (source == undefined) return new this();
	  array = [];
	  if (mapping) {
	    n = 0;
	    boundFunction = functionBindContext(mapFn, length > 2 ? arguments[2] : undefined);
	    iterate(source, function (nextItem) {
	      functionCall(push$5, array, boundFunction(nextItem, n++));
	    });
	  } else {
	    iterate(source, push$5, { that: array });
	  }
	  return new this(array);
	};

	// `Map.from` method
	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
	_export({ target: 'Map', stat: true, forced: true }, {
	  from: collectionFrom
	});

	// https://tc39.github.io/proposal-setmap-offrom/
	var collectionOf = function of() {
	  return new this(arraySlice(arguments));
	};

	// `Map.of` method
	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
	_export({ target: 'Map', stat: true, forced: true }, {
	  of: collectionOf
	});

	// https://github.com/tc39/collection-methods
	var collectionDeleteAll = function deleteAll(/* ...elements */) {
	  var collection = anObject(this);
	  var remover = aCallable(collection['delete']);
	  var allDeleted = true;
	  var wasDeleted;
	  for (var k = 0, len = arguments.length; k < len; k++) {
	    wasDeleted = functionCall(remover, collection, arguments[k]);
	    allDeleted = allDeleted && wasDeleted;
	  }
	  return !!allDeleted;
	};

	// `Map.prototype.deleteAll` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  deleteAll: collectionDeleteAll
	});

	// `Map.prototype.emplace` method
	// https://github.com/thumbsupep/proposal-upsert
	var mapEmplace = function emplace(key, handler) {
	  var map = anObject(this);
	  var get = aCallable(map.get);
	  var has = aCallable(map.has);
	  var set = aCallable(map.set);
	  var value = (functionCall(has, map, key) && 'update' in handler)
	    ? handler.update(functionCall(get, map, key), key, map)
	    : handler.insert(key, map);
	  functionCall(set, map, key, value);
	  return value;
	};

	// `Map.prototype.emplace` method
	// https://github.com/thumbsupep/proposal-upsert
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  emplace: mapEmplace
	});

	var getMapIterator = getIterator;

	// `Map.prototype.every` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  every: function every(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    return !iterate(iterator, function (key, value, stop) {
	      if (!boundFunction(value, key, map)) return stop();
	    }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
	  }
	});

	// `Map.prototype.filter` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();
	    var setter = aCallable(newMap.set);
	    iterate(iterator, function (key, value) {
	      if (boundFunction(value, key, map)) functionCall(setter, newMap, key, value);
	    }, { AS_ENTRIES: true, IS_ITERATOR: true });
	    return newMap;
	  }
	});

	// `Map.prototype.find` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  find: function find(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    return iterate(iterator, function (key, value, stop) {
	      if (boundFunction(value, key, map)) return stop(value);
	    }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
	  }
	});

	// `Map.prototype.findKey` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  findKey: function findKey(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    return iterate(iterator, function (key, value, stop) {
	      if (boundFunction(value, key, map)) return stop(key);
	    }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
	  }
	});

	var push$6 = functionUncurryThis([].push);

	// `Map.groupBy` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', stat: true, forced: true }, {
	  groupBy: function groupBy(iterable, keyDerivative) {
	    aCallable(keyDerivative);
	    var iterator = getIterator(iterable);
	    var newMap = new this();
	    var has = aCallable(newMap.has);
	    var get = aCallable(newMap.get);
	    var set = aCallable(newMap.set);
	    iterate(iterator, function (element) {
	      var derivedKey = keyDerivative(element);
	      if (!functionCall(has, newMap, derivedKey)) functionCall(set, newMap, derivedKey, [element]);
	      else push$6(functionCall(get, newMap, derivedKey), element);
	    }, { IS_ITERATOR: true });
	    return newMap;
	  }
	});

	// `SameValueZero` abstract operation
	// https://tc39.es/ecma262/#sec-samevaluezero
	var sameValueZero = function (x, y) {
	  // eslint-disable-next-line no-self-compare -- NaN check
	  return x === y || x != x && y != y;
	};

	// `Map.prototype.includes` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  includes: function includes(searchElement) {
	    return iterate(getMapIterator(anObject(this)), function (key, value, stop) {
	      if (sameValueZero(value, searchElement)) return stop();
	    }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
	  }
	});

	// `Map.keyBy` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', stat: true, forced: true }, {
	  keyBy: function keyBy(iterable, keyDerivative) {
	    var newMap = new this();
	    aCallable(keyDerivative);
	    var setter = aCallable(newMap.set);
	    iterate(iterable, function (element) {
	      functionCall(setter, newMap, keyDerivative(element), element);
	    });
	    return newMap;
	  }
	});

	// `Map.prototype.keyOf` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  keyOf: function keyOf(searchElement) {
	    return iterate(getMapIterator(anObject(this)), function (key, value, stop) {
	      if (value === searchElement) return stop(key);
	    }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
	  }
	});

	// `Map.prototype.mapKeys` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  mapKeys: function mapKeys(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();
	    var setter = aCallable(newMap.set);
	    iterate(iterator, function (key, value) {
	      functionCall(setter, newMap, boundFunction(value, key, map), value);
	    }, { AS_ENTRIES: true, IS_ITERATOR: true });
	    return newMap;
	  }
	});

	// `Map.prototype.mapValues` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  mapValues: function mapValues(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();
	    var setter = aCallable(newMap.set);
	    iterate(iterator, function (key, value) {
	      functionCall(setter, newMap, key, boundFunction(value, key, map));
	    }, { AS_ENTRIES: true, IS_ITERATOR: true });
	    return newMap;
	  }
	});

	// `Map.prototype.merge` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, arity: 1, forced: true }, {
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  merge: function merge(iterable /* ...iterables */) {
	    var map = anObject(this);
	    var setter = aCallable(map.set);
	    var argumentsLength = arguments.length;
	    var i = 0;
	    while (i < argumentsLength) {
	      iterate(arguments[i++], setter, { that: map, AS_ENTRIES: true });
	    }
	    return map;
	  }
	});

	var TypeError$h = global$1.TypeError;

	// `Map.prototype.reduce` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var noInitial = arguments.length < 2;
	    var accumulator = noInitial ? undefined : arguments[1];
	    aCallable(callbackfn);
	    iterate(iterator, function (key, value) {
	      if (noInitial) {
	        noInitial = false;
	        accumulator = value;
	      } else {
	        accumulator = callbackfn(accumulator, value, key, map);
	      }
	    }, { AS_ENTRIES: true, IS_ITERATOR: true });
	    if (noInitial) throw TypeError$h('Reduce of empty map with no initial value');
	    return accumulator;
	  }
	});

	// `Set.prototype.some` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  some: function some(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    return iterate(iterator, function (key, value, stop) {
	      if (boundFunction(value, key, map)) return stop();
	    }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
	  }
	});

	var TypeError$i = global$1.TypeError;

	// `Set.prototype.update` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  update: function update(key, callback /* , thunk */) {
	    var map = anObject(this);
	    var get = aCallable(map.get);
	    var has = aCallable(map.has);
	    var set = aCallable(map.set);
	    var length = arguments.length;
	    aCallable(callback);
	    var isPresentInMap = functionCall(has, map, key);
	    if (!isPresentInMap && length < 3) {
	      throw TypeError$i('Updating absent value');
	    }
	    var value = isPresentInMap ? functionCall(get, map, key) : aCallable(length > 2 ? arguments[2] : undefined)(key, map);
	    functionCall(set, map, key, callback(value, key, map));
	    return map;
	  }
	});

	var TypeError$j = global$1.TypeError;

	// `Map.prototype.upsert` method
	// https://github.com/thumbsupep/proposal-upsert
	var mapUpsert = function upsert(key, updateFn /* , insertFn */) {
	  var map = anObject(this);
	  var get = aCallable(map.get);
	  var has = aCallable(map.has);
	  var set = aCallable(map.set);
	  var insertFn = arguments.length > 2 ? arguments[2] : undefined;
	  var value;
	  if (!isCallable(updateFn) && !isCallable(insertFn)) {
	    throw TypeError$j('At least one callback required');
	  }
	  if (functionCall(has, map, key)) {
	    value = functionCall(get, map, key);
	    if (isCallable(updateFn)) {
	      value = updateFn(value);
	      functionCall(set, map, key, value);
	    }
	  } else if (isCallable(insertFn)) {
	    value = insertFn();
	    functionCall(set, map, key, value);
	  } return value;
	};

	// TODO: remove from `core-js@4`



	// `Map.prototype.upsert` method (replaced by `Map.prototype.emplace`)
	// https://github.com/thumbsupep/proposal-upsert
	_export({ target: 'Map', proto: true, real: true, forced: true }, {
	  upsert: mapUpsert
	});

	// TODO: remove from `core-js@4`



	// `Map.prototype.updateOrInsert` method (replaced by `Map.prototype.emplace`)
	// https://github.com/thumbsupep/proposal-upsert
	_export({ target: 'Map', proto: true, real: true, name: 'upsert', forced: true }, {
	  updateOrInsert: mapUpsert
	});

	// TODO: remove from `core-js@4`

	// TODO: remove from `core-js@4`


	var map$3 = map$2;

	var map$4 = map$3;

	var map$5 = map$4;

	/* eslint-disable es-x/no-array-prototype-indexof -- required for testing */


	var $IndexOf = arrayIncludes.indexOf;


	var un$IndexOf = functionUncurryThis([].indexOf);

	var NEGATIVE_ZERO = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
	var STRICT_METHOD$1 = arrayMethodIsStrict('indexOf');

	// `Array.prototype.indexOf` method
	// https://tc39.es/ecma262/#sec-array.prototype.indexof
	_export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD$1 }, {
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    var fromIndex = arguments.length > 1 ? arguments[1] : undefined;
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? un$IndexOf(this, searchElement, fromIndex) || 0
	      : $IndexOf(this, searchElement, fromIndex);
	  }
	});

	var indexOf$1 = entryVirtual('Array').indexOf;

	var ArrayPrototype$2 = Array.prototype;

	var indexOf$2 = function (it) {
	  var own = it.indexOf;
	  return it === ArrayPrototype$2 || (objectIsPrototypeOf(ArrayPrototype$2, it) && own === ArrayPrototype$2.indexOf) ? indexOf$1 : own;
	};

	var indexOf$3 = indexOf$2;

	var indexOf$4 = indexOf$3;

	var indexOf$5 = indexOf$4;

	var indexOf$6 = indexOf$5;

	var indexOf$7 = indexOf$6;

	var isNativeFunction = createCommonjsModule(function (module) {
	function _isNativeFunction(fn) {
	  var _context;

	  return indexOf$7(_context = Function.toString.call(fn)).call(_context, "[native code]") !== -1;
	}

	module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var construct$5 = construct$3;

	var construct$6 = construct$5;

	var construct$7 = construct$6;

	var construct$8 = construct$7;

	// TODO: Remove from `core-js@4`



	// `Function.prototype.bind` method
	// https://tc39.es/ecma262/#sec-function.prototype.bind
	_export({ target: 'Function', proto: true, forced: Function.bind !== functionBind }, {
	  bind: functionBind
	});

	var bind$3 = entryVirtual('Function').bind;

	var FunctionPrototype$3 = Function.prototype;

	var bind$4 = function (it) {
	  var own = it.bind;
	  return it === FunctionPrototype$3 || (objectIsPrototypeOf(FunctionPrototype$3, it) && own === FunctionPrototype$3.bind) ? bind$3 : own;
	};

	var bind$5 = bind$4;

	var bind$6 = bind$5;

	var bind$7 = bind$6;

	var bind$8 = bind$7;

	var bind$9 = bind$8;

	var isNativeReflectConstruct = createCommonjsModule(function (module) {
	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !construct$8) return false;
	  if (construct$8.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(construct$8(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var construct$9 = createCommonjsModule(function (module) {
	function _construct(Parent, args, Class) {
	  if (isNativeReflectConstruct()) {
	    module.exports = _construct = construct$8, module.exports.__esModule = true, module.exports["default"] = module.exports;
	  } else {
	    module.exports = _construct = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);

	      var Constructor = bind$9(Function).apply(Parent, a);

	      var instance = new Constructor();
	      if (Class) setPrototypeOf$6(instance, Class.prototype);
	      return instance;
	    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	  }

	  return _construct.apply(null, arguments);
	}

	module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var wrapNativeSuper = createCommonjsModule(function (module) {
	function _wrapNativeSuper(Class) {
	  var _cache = typeof map$5 === "function" ? new map$5() : undefined;

	  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
	    if (Class === null || !isNativeFunction(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return construct$9(Class, arguments, getPrototypeOf$6(this).constructor);
	    }

	    Wrapper.prototype = create$5(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return setPrototypeOf$6(Wrapper, Class);
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	  return _wrapNativeSuper(Class);
	}

	module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var ParseError_1 = createCommonjsModule(function (module, exports) {







	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _defineProperty = interopRequireDefault(defineProperty$3);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _assertThisInitialized2 = interopRequireDefault(assertThisInitialized);

	var _inherits2 = interopRequireDefault(inherits);

	var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

	var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf$6);

	var _wrapNativeSuper2 = interopRequireDefault(wrapNativeSuper);

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();

	  return function () {
	    var Super = (0, _getPrototypeOf2.default)(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
	      result = construct$4(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return (0, _possibleConstructorReturn2.default)(this, result);
	  };
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !construct$4) return false;
	  if (construct$4.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(construct$4(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	/**
	 * Constructs a new Parse.Error object with the given code and message.
	 *
	 * @alias Parse.Error
	 */


	var ParseError = /*#__PURE__*/function (_Error) {
	  (0, _inherits2.default)(ParseError, _Error);

	  var _super = _createSuper(ParseError);
	  /**
	   * @param {number} code An error code constant from <code>Parse.Error</code>.
	   * @param {string} message A detailed description of the error.
	   */


	  function ParseError(code, message) {
	    var _this;

	    (0, _classCallCheck2.default)(this, ParseError);
	    _this = _super.call(this, message);
	    _this.code = code;
	    (0, _defineProperty.default)((0, _assertThisInitialized2.default)(_this), 'message', {
	      enumerable: true,
	      value: message
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(ParseError, [{
	    key: "toString",
	    value: function () {
	      return 'ParseError: ' + this.code + ' ' + this.message;
	    }
	  }]);
	  return ParseError;
	}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
	/**
	 * Error code indicating some error other than those enumerated here.
	 *
	 * @property {number} OTHER_CAUSE
	 * @static
	 */


	ParseError.OTHER_CAUSE = -1;
	/**
	 * Error code indicating that something has gone wrong with the server.
	 *
	 * @property {number} INTERNAL_SERVER_ERROR
	 * @static
	 */

	ParseError.INTERNAL_SERVER_ERROR = 1;
	/**
	 * Error code indicating the connection to the Parse servers failed.
	 *
	 * @property {number} CONNECTION_FAILED
	 * @static
	 */

	ParseError.CONNECTION_FAILED = 100;
	/**
	 * Error code indicating the specified object doesn't exist.
	 *
	 * @property {number} OBJECT_NOT_FOUND
	 * @static
	 */

	ParseError.OBJECT_NOT_FOUND = 101;
	/**
	 * Error code indicating you tried to query with a datatype that doesn't
	 * support it, like exact matching an array or object.
	 *
	 * @property {number} INVALID_QUERY
	 * @static
	 */

	ParseError.INVALID_QUERY = 102;
	/**
	 * Error code indicating a missing or invalid classname. Classnames are
	 * case-sensitive. They must start with a letter, and a-zA-Z0-9_ are the
	 * only valid characters.
	 *
	 * @property {number} INVALID_CLASS_NAME
	 * @static
	 */

	ParseError.INVALID_CLASS_NAME = 103;
	/**
	 * Error code indicating an unspecified object id.
	 *
	 * @property {number} MISSING_OBJECT_ID
	 * @static
	 */

	ParseError.MISSING_OBJECT_ID = 104;
	/**
	 * Error code indicating an invalid key name. Keys are case-sensitive. They
	 * must start with a letter, and a-zA-Z0-9_ are the only valid characters.
	 *
	 * @property {number} INVALID_KEY_NAME
	 * @static
	 */

	ParseError.INVALID_KEY_NAME = 105;
	/**
	 * Error code indicating a malformed pointer. You should not see this unless
	 * you have been mucking about changing internal Parse code.
	 *
	 * @property {number} INVALID_POINTER
	 * @static
	 */

	ParseError.INVALID_POINTER = 106;
	/**
	 * Error code indicating that badly formed JSON was received upstream. This
	 * either indicates you have done something unusual with modifying how
	 * things encode to JSON, or the network is failing badly.
	 *
	 * @property {number} INVALID_JSON
	 * @static
	 */

	ParseError.INVALID_JSON = 107;
	/**
	 * Error code indicating that the feature you tried to access is only
	 * available internally for testing purposes.
	 *
	 * @property {number} COMMAND_UNAVAILABLE
	 * @static
	 */

	ParseError.COMMAND_UNAVAILABLE = 108;
	/**
	 * You must call Parse.initialize before using the Parse library.
	 *
	 * @property {number} NOT_INITIALIZED
	 * @static
	 */

	ParseError.NOT_INITIALIZED = 109;
	/**
	 * Error code indicating that a field was set to an inconsistent type.
	 *
	 * @property {number} INCORRECT_TYPE
	 * @static
	 */

	ParseError.INCORRECT_TYPE = 111;
	/**
	 * Error code indicating an invalid channel name. A channel name is either
	 * an empty string (the broadcast channel) or contains only a-zA-Z0-9_
	 * characters and starts with a letter.
	 *
	 * @property {number} INVALID_CHANNEL_NAME
	 * @static
	 */

	ParseError.INVALID_CHANNEL_NAME = 112;
	/**
	 * Error code indicating that push is misconfigured.
	 *
	 * @property {number} PUSH_MISCONFIGURED
	 * @static
	 */

	ParseError.PUSH_MISCONFIGURED = 115;
	/**
	 * Error code indicating that the object is too large.
	 *
	 * @property {number} OBJECT_TOO_LARGE
	 * @static
	 */

	ParseError.OBJECT_TOO_LARGE = 116;
	/**
	 * Error code indicating that the operation isn't allowed for clients.
	 *
	 * @property {number} OPERATION_FORBIDDEN
	 * @static
	 */

	ParseError.OPERATION_FORBIDDEN = 119;
	/**
	 * Error code indicating the result was not found in the cache.
	 *
	 * @property {number} CACHE_MISS
	 * @static
	 */

	ParseError.CACHE_MISS = 120;
	/**
	 * Error code indicating that an invalid key was used in a nested
	 * JSONObject.
	 *
	 * @property {number} INVALID_NESTED_KEY
	 * @static
	 */

	ParseError.INVALID_NESTED_KEY = 121;
	/**
	 * Error code indicating that an invalid filename was used for ParseFile.
	 * A valid file name contains only a-zA-Z0-9_. characters and is between 1
	 * and 128 characters.
	 *
	 * @property {number} INVALID_FILE_NAME
	 * @static
	 */

	ParseError.INVALID_FILE_NAME = 122;
	/**
	 * Error code indicating an invalid ACL was provided.
	 *
	 * @property {number} INVALID_ACL
	 * @static
	 */

	ParseError.INVALID_ACL = 123;
	/**
	 * Error code indicating that the request timed out on the server. Typically
	 * this indicates that the request is too expensive to run.
	 *
	 * @property {number} TIMEOUT
	 * @static
	 */

	ParseError.TIMEOUT = 124;
	/**
	 * Error code indicating that the email address was invalid.
	 *
	 * @property {number} INVALID_EMAIL_ADDRESS
	 * @static
	 */

	ParseError.INVALID_EMAIL_ADDRESS = 125;
	/**
	 * Error code indicating a missing content type.
	 *
	 * @property {number} MISSING_CONTENT_TYPE
	 * @static
	 */

	ParseError.MISSING_CONTENT_TYPE = 126;
	/**
	 * Error code indicating a missing content length.
	 *
	 * @property {number} MISSING_CONTENT_LENGTH
	 * @static
	 */

	ParseError.MISSING_CONTENT_LENGTH = 127;
	/**
	 * Error code indicating an invalid content length.
	 *
	 * @property {number} INVALID_CONTENT_LENGTH
	 * @static
	 */

	ParseError.INVALID_CONTENT_LENGTH = 128;
	/**
	 * Error code indicating a file that was too large.
	 *
	 * @property {number} FILE_TOO_LARGE
	 * @static
	 */

	ParseError.FILE_TOO_LARGE = 129;
	/**
	 * Error code indicating an error saving a file.
	 *
	 * @property {number} FILE_SAVE_ERROR
	 * @static
	 */

	ParseError.FILE_SAVE_ERROR = 130;
	/**
	 * Error code indicating that a unique field was given a value that is
	 * already taken.
	 *
	 * @property {number} DUPLICATE_VALUE
	 * @static
	 */

	ParseError.DUPLICATE_VALUE = 137;
	/**
	 * Error code indicating that a role's name is invalid.
	 *
	 * @property {number} INVALID_ROLE_NAME
	 * @static
	 */

	ParseError.INVALID_ROLE_NAME = 139;
	/**
	 * Error code indicating that an application quota was exceeded.  Upgrade to
	 * resolve.
	 *
	 * @property {number} EXCEEDED_QUOTA
	 * @static
	 */

	ParseError.EXCEEDED_QUOTA = 140;
	/**
	 * Error code indicating that a Cloud Code script failed.
	 *
	 * @property {number} SCRIPT_FAILED
	 * @static
	 */

	ParseError.SCRIPT_FAILED = 141;
	/**
	 * Error code indicating that a Cloud Code validation failed.
	 *
	 * @property {number} VALIDATION_ERROR
	 * @static
	 */

	ParseError.VALIDATION_ERROR = 142;
	/**
	 * Error code indicating that invalid image data was provided.
	 *
	 * @property {number} INVALID_IMAGE_DATA
	 * @static
	 */

	ParseError.INVALID_IMAGE_DATA = 143;
	/**
	 * Error code indicating an unsaved file.
	 *
	 * @property {number} UNSAVED_FILE_ERROR
	 * @static
	 */

	ParseError.UNSAVED_FILE_ERROR = 151;
	/**
	 * Error code indicating an invalid push time.
	 *
	 * @property {number} INVALID_PUSH_TIME_ERROR
	 * @static
	 */

	ParseError.INVALID_PUSH_TIME_ERROR = 152;
	/**
	 * Error code indicating an error deleting a file.
	 *
	 * @property {number} FILE_DELETE_ERROR
	 * @static
	 */

	ParseError.FILE_DELETE_ERROR = 153;
	/**
	 * Error code indicating an error deleting an unnamed file.
	 *
	 * @property {number} FILE_DELETE_UNNAMED_ERROR
	 * @static
	 */

	ParseError.FILE_DELETE_UNNAMED_ERROR = 161;
	/**
	 * Error code indicating that the application has exceeded its request
	 * limit.
	 *
	 * @property {number} REQUEST_LIMIT_EXCEEDED
	 * @static
	 */

	ParseError.REQUEST_LIMIT_EXCEEDED = 155;
	/**
	 * Error code indicating that the request was a duplicate and has been discarded due to
	 * idempotency rules.
	 *
	 * @property {number} DUPLICATE_REQUEST
	 * @static
	 */

	ParseError.DUPLICATE_REQUEST = 159;
	/**
	 * Error code indicating an invalid event name.
	 *
	 * @property {number} INVALID_EVENT_NAME
	 * @static
	 */

	ParseError.INVALID_EVENT_NAME = 160;
	/**
	 * Error code indicating that a field had an invalid value.
	 *
	 * @property {number} INVALID_VALUE
	 * @static
	 */

	ParseError.INVALID_VALUE = 162;
	/**
	 * Error code indicating that the username is missing or empty.
	 *
	 * @property {number} USERNAME_MISSING
	 * @static
	 */

	ParseError.USERNAME_MISSING = 200;
	/**
	 * Error code indicating that the password is missing or empty.
	 *
	 * @property {number} PASSWORD_MISSING
	 * @static
	 */

	ParseError.PASSWORD_MISSING = 201;
	/**
	 * Error code indicating that the username has already been taken.
	 *
	 * @property {number} USERNAME_TAKEN
	 * @static
	 */

	ParseError.USERNAME_TAKEN = 202;
	/**
	 * Error code indicating that the email has already been taken.
	 *
	 * @property {number} EMAIL_TAKEN
	 * @static
	 */

	ParseError.EMAIL_TAKEN = 203;
	/**
	 * Error code indicating that the email is missing, but must be specified.
	 *
	 * @property {number} EMAIL_MISSING
	 * @static
	 */

	ParseError.EMAIL_MISSING = 204;
	/**
	 * Error code indicating that a user with the specified email was not found.
	 *
	 * @property {number} EMAIL_NOT_FOUND
	 * @static
	 */

	ParseError.EMAIL_NOT_FOUND = 205;
	/**
	 * Error code indicating that a user object without a valid session could
	 * not be altered.
	 *
	 * @property {number} SESSION_MISSING
	 * @static
	 */

	ParseError.SESSION_MISSING = 206;
	/**
	 * Error code indicating that a user can only be created through signup.
	 *
	 * @property {number} MUST_CREATE_USER_THROUGH_SIGNUP
	 * @static
	 */

	ParseError.MUST_CREATE_USER_THROUGH_SIGNUP = 207;
	/**
	 * Error code indicating that an an account being linked is already linked
	 * to another user.
	 *
	 * @property {number} ACCOUNT_ALREADY_LINKED
	 * @static
	 */

	ParseError.ACCOUNT_ALREADY_LINKED = 208;
	/**
	 * Error code indicating that the current session token is invalid.
	 *
	 * @property {number} INVALID_SESSION_TOKEN
	 * @static
	 */

	ParseError.INVALID_SESSION_TOKEN = 209;
	/**
	 * Error code indicating an error enabling or verifying MFA
	 *
	 * @property {number} MFA_ERROR
	 * @static
	 */

	ParseError.MFA_ERROR = 210;
	/**
	 * Error code indicating that a valid MFA token must be provided
	 *
	 * @property {number} MFA_TOKEN_REQUIRED
	 * @static
	 */

	ParseError.MFA_TOKEN_REQUIRED = 211;
	/**
	 * Error code indicating that a user cannot be linked to an account because
	 * that account's id could not be found.
	 *
	 * @property {number} LINKED_ID_MISSING
	 * @static
	 */

	ParseError.LINKED_ID_MISSING = 250;
	/**
	 * Error code indicating that a user with a linked (e.g. Facebook) account
	 * has an invalid session.
	 *
	 * @property {number} INVALID_LINKED_SESSION
	 * @static
	 */

	ParseError.INVALID_LINKED_SESSION = 251;
	/**
	 * Error code indicating that a service being linked (e.g. Facebook or
	 * Twitter) is unsupported.
	 *
	 * @property {number} UNSUPPORTED_SERVICE
	 * @static
	 */

	ParseError.UNSUPPORTED_SERVICE = 252;
	/**
	 * Error code indicating an invalid operation occured on schema
	 *
	 * @property {number} INVALID_SCHEMA_OPERATION
	 * @static
	 */

	ParseError.INVALID_SCHEMA_OPERATION = 255;
	/**
	 * Error code indicating that there were multiple errors. Aggregate errors
	 * have an "errors" property, which is an array of error objects with more
	 * detail about each error that occurred.
	 *
	 * @property {number} AGGREGATE_ERROR
	 * @static
	 */

	ParseError.AGGREGATE_ERROR = 600;
	/**
	 * Error code indicating the client was unable to read an input file.
	 *
	 * @property {number} FILE_READ_ERROR
	 * @static
	 */

	ParseError.FILE_READ_ERROR = 601;
	/**
	 * Error code indicating a real error code is unavailable because
	 * we had to use an XDomainRequest object to allow CORS requests in
	 * Internet Explorer, which strips the body from HTTP responses that have
	 * a non-2XX status code.
	 *
	 * @property {number} X_DOMAIN_REQUEST
	 * @static
	 */

	ParseError.X_DOMAIN_REQUEST = 602;
	var _default = ParseError;
	exports.default = _default;
	});

	var getIteratorMethod_1 = getIteratorMethod;

	var getIteratorMethod$1 = getIteratorMethod_1;

	var getIteratorMethod$2 = getIteratorMethod$1;

	var getIteratorMethod$3 = getIteratorMethod$2;

	var getIteratorMethod$4 = getIteratorMethod$3;

	var getIteratorMethod$5 = getIteratorMethod$4;

	var symbol$6 = symbol$1;

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
	  } catch (error) {
	    iteratorClose(iterator, 'throw', error);
	  }
	};

	var Array$3 = global$1.Array;

	// `Array.from` method implementation
	// https://tc39.es/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject(arrayLike);
	  var IS_CONSTRUCTOR = isConstructor(this);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
	  var iteratorMethod = getIteratorMethod(O);
	  var index = 0;
	  var length, result, step, iterator, next, value;
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod && !(this == Array$3 && isArrayIteratorMethod(iteratorMethod))) {
	    iterator = getIterator(O, iteratorMethod);
	    next = iterator.next;
	    result = IS_CONSTRUCTOR ? new this() : [];
	    for (;!(step = functionCall(next, iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty(result, index, value);
	    }
	  } else {
	    length = lengthOfArrayLike(O);
	    result = IS_CONSTRUCTOR ? new this(length) : Array$3(length);
	    for (;length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty(result, index, value);
	    }
	  }
	  result.length = index;
	  return result;
	};

	var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
	  // eslint-disable-next-line es-x/no-array-from -- required for testing
	  Array.from(iterable);
	});

	// `Array.from` method
	// https://tc39.es/ecma262/#sec-array.from
	_export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
	  from: arrayFrom
	});

	var from$1 = path.Array.from;

	var from$2 = from$1;

	var from$3 = from$2;

	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');

	var SPECIES$5 = wellKnownSymbol('species');
	var Array$4 = global$1.Array;
	var max$2 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.es/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject(this);
	    var length = lengthOfArrayLike(O);
	    var k = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
	    var Constructor, result, n;
	    if (isArray(O)) {
	      Constructor = O.constructor;
	      // cross-realm fallback
	      if (isConstructor(Constructor) && (Constructor === Array$4 || isArray(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject(Constructor)) {
	        Constructor = Constructor[SPECIES$5];
	        if (Constructor === null) Constructor = undefined;
	      }
	      if (Constructor === Array$4 || Constructor === undefined) {
	        return arraySlice(O, k, fin);
	      }
	    }
	    result = new (Constructor === undefined ? Array$4 : Constructor)(max$2(fin - k, 0));
	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
	    result.length = n;
	    return result;
	  }
	});

	var slice = entryVirtual('Array').slice;

	var ArrayPrototype$3 = Array.prototype;

	var slice$1 = function (it) {
	  var own = it.slice;
	  return it === ArrayPrototype$3 || (objectIsPrototypeOf(ArrayPrototype$3, it) && own === ArrayPrototype$3.slice) ? slice : own;
	};

	var slice$2 = slice$1;

	var slice$3 = slice$2;

	var defineProperties = objectDefineProperties.f;

	// `Object.defineProperties` method
	// https://tc39.es/ecma262/#sec-object.defineproperties
	// eslint-disable-next-line es-x/no-object-defineproperties -- safe
	_export({ target: 'Object', stat: true, forced: Object.defineProperties !== defineProperties, sham: !descriptors }, {
	  defineProperties: defineProperties
	});

	var defineProperties_1 = createCommonjsModule(function (module) {
	var Object = path.Object;

	var defineProperties = module.exports = function defineProperties(T, D) {
	  return Object.defineProperties(T, D);
	};

	if (Object.defineProperties.sham) defineProperties.sham = true;
	});

	var defineProperties$1 = defineProperties_1;

	var defineProperties$2 = defineProperties$1;

	// `Object.getOwnPropertyDescriptors` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
	_export({ target: 'Object', stat: true, sham: !descriptors }, {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIndexedObject(object);
	    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	    var keys = ownKeys(O);
	    var result = {};
	    var index = 0;
	    var key, descriptor;
	    while (keys.length > index) {
	      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
	      if (descriptor !== undefined) createProperty(result, key, descriptor);
	    }
	    return result;
	  }
	});

	var getOwnPropertyDescriptors = path.Object.getOwnPropertyDescriptors;

	var getOwnPropertyDescriptors$1 = getOwnPropertyDescriptors;

	var getOwnPropertyDescriptors$2 = getOwnPropertyDescriptors$1;

	var $filter = arrayIteration.filter;


	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('filter');

	// `Array.prototype.filter` method
	// https://tc39.es/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var filter = entryVirtual('Array').filter;

	var ArrayPrototype$4 = Array.prototype;

	var filter$1 = function (it) {
	  var own = it.filter;
	  return it === ArrayPrototype$4 || (objectIsPrototypeOf(ArrayPrototype$4, it) && own === ArrayPrototype$4.filter) ? filter : own;
	};

	var filter$2 = filter$1;

	var filter$3 = filter$2;

	var getOwnPropertySymbols = path.Object.getOwnPropertySymbols;

	var getOwnPropertySymbols$1 = getOwnPropertySymbols;

	var getOwnPropertySymbols$2 = getOwnPropertySymbols$1;

	var $map = arrayIteration.map;


	var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('map');

	// `Array.prototype.map` method
	// https://tc39.es/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var map$6 = entryVirtual('Array').map;

	var ArrayPrototype$5 = Array.prototype;

	var map$7 = function (it) {
	  var own = it.map;
	  return it === ArrayPrototype$5 || (objectIsPrototypeOf(ArrayPrototype$5, it) && own === ArrayPrototype$5.map) ? map$6 : own;
	};

	var map$8 = map$7;

	var map$9 = map$8;

	var $find = arrayIteration.find;


	var FIND = 'find';
	var SKIPS_HOLES = true;

	// Shouldn't skip holes
	if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

	// `Array.prototype.find` method
	// https://tc39.es/ecma262/#sec-array.prototype.find
	_export({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var find$1 = entryVirtual('Array').find;

	var ArrayPrototype$6 = Array.prototype;

	var find$2 = function (it) {
	  var own = it.find;
	  return it === ArrayPrototype$6 || (objectIsPrototypeOf(ArrayPrototype$6, it) && own === ArrayPrototype$6.find) ? find$1 : own;
	};

	var find$3 = find$2;

	var find$4 = find$3;

	var create$6 = create$1;

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime_1 = createCommonjsModule(function (module) {
	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  define(IteratorPrototype, iteratorSymbol, function () {
	    return this;
	  });

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = GeneratorFunctionPrototype;
	  define(Gp, "constructor", GeneratorFunctionPrototype);
	  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
	    return this;
	  });
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  define(Gp, iteratorSymbol, function() {
	    return this;
	  });

	  define(Gp, "toString", function() {
	    return "[object Generator]";
	  });

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	  module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, in modern engines
	  // we can explicitly access globalThis. In older engines we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  if (typeof globalThis === "object") {
	    globalThis.regeneratorRuntime = runtime;
	  } else {
	    Function("r", "regeneratorRuntime = r")(runtime);
	  }
	}
	});

	var regenerator = runtime_1;

	var promise$4 = promise$2;

	// TODO: Remove from `core-js@4`




	// `Promise.try` method
	// https://github.com/tc39/proposal-promise-try
	_export({ target: 'Promise', stat: true, forced: true }, {
	  'try': function (callbackfn) {
	    var promiseCapability = newPromiseCapability.f(this);
	    var result = perform(callbackfn);
	    (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
	    return promiseCapability.promise;
	  }
	});

	// TODO: Remove from `core-js@4`




	var promise$5 = promise$4;

	var promise$6 = promise$5;

	var promise$7 = promise$6;

	var asyncToGenerator = createCommonjsModule(function (module) {
	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    promise$7.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new promise$7(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var concat$2 = entryVirtual('Array').concat;

	var ArrayPrototype$7 = Array.prototype;

	var concat$3 = function (it) {
	  var own = it.concat;
	  return it === ArrayPrototype$7 || (objectIsPrototypeOf(ArrayPrototype$7, it) && own === ArrayPrototype$7.concat) ? concat$2 : own;
	};

	var concat$4 = concat$3;

	var concat$5 = concat$4;

	var getPrototypeOf$7 = getPrototypeOf$1;

	var $includes = arrayIncludes.includes;



	// FF99+ bug
	var BROKEN_ON_SPARSE = fails(function () {
	  return !Array(1).includes();
	});

	// `Array.prototype.includes` method
	// https://tc39.es/ecma262/#sec-array.prototype.includes
	_export({ target: 'Array', proto: true, forced: BROKEN_ON_SPARSE }, {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var includes = entryVirtual('Array').includes;

	var MATCH = wellKnownSymbol('match');

	// `IsRegExp` abstract operation
	// https://tc39.es/ecma262/#sec-isregexp
	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
	};

	var TypeError$k = global$1.TypeError;

	var notARegexp = function (it) {
	  if (isRegexp(it)) {
	    throw TypeError$k("The method doesn't accept regular expressions");
	  } return it;
	};

	var MATCH$1 = wellKnownSymbol('match');

	var correctIsRegexpLogic = function (METHOD_NAME) {
	  var regexp = /./;
	  try {
	    '/./'[METHOD_NAME](regexp);
	  } catch (error1) {
	    try {
	      regexp[MATCH$1] = false;
	      return '/./'[METHOD_NAME](regexp);
	    } catch (error2) { /* empty */ }
	  } return false;
	};

	var stringIndexOf = functionUncurryThis(''.indexOf);

	// `String.prototype.includes` method
	// https://tc39.es/ecma262/#sec-string.prototype.includes
	_export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~stringIndexOf(
	      toString$3(requireObjectCoercible(this)),
	      toString$3(notARegexp(searchString)),
	      arguments.length > 1 ? arguments[1] : undefined
	    );
	  }
	});

	var includes$1 = entryVirtual('String').includes;

	var ArrayPrototype$8 = Array.prototype;
	var StringPrototype = String.prototype;

	var includes$2 = function (it) {
	  var own = it.includes;
	  if (it === ArrayPrototype$8 || (objectIsPrototypeOf(ArrayPrototype$8, it) && own === ArrayPrototype$8.includes)) return includes;
	  if (typeof it == 'string' || it === StringPrototype || (objectIsPrototypeOf(StringPrototype, it) && own === StringPrototype.includes)) {
	    return includes$1;
	  } return own;
	};

	var includes$3 = includes$2;

	var includes$4 = includes$3;

	// eslint-disable-next-line es-x/no-json -- safe
	if (!path.JSON) path.JSON = { stringify: JSON.stringify };

	// eslint-disable-next-line no-unused-vars -- required for `.length`
	var stringify = function stringify(it, replacer, space) {
	  return functionApply(path.JSON.stringify, null, arguments);
	};

	var stringify$1 = stringify;

	var stringify$2 = stringify$1;

	var onFreeze = internalMetadata.onFreeze;

	// eslint-disable-next-line es-x/no-object-freeze -- safe
	var $freeze = Object.freeze;
	var FAILS_ON_PRIMITIVES$4 = fails(function () { $freeze(1); });

	// `Object.freeze` method
	// https://tc39.es/ecma262/#sec-object.freeze
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$4, sham: !freezing }, {
	  freeze: function freeze(it) {
	    return $freeze && isObject(it) ? $freeze(onFreeze(it)) : it;
	  }
	});

	var freeze = path.Object.freeze;

	var freeze$1 = freeze;

	var freeze$2 = freeze$1;

	var indexOf$8 = indexOf$3;

	var _concat = interopRequireDefault(concat$5);

	var _forEach = interopRequireDefault(forEach$4);
	/*
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */

	/*:: import type { AttributeMap, ObjectCache, OpsMap, State } from './ObjectStateMutations';*/

	/*:: import type ParseFile from './ParseFile';*/

	/*:: import type { FileSource } from './ParseFile';*/

	/*:: import type { Op } from './ParseOp';*/

	/*:: import type ParseObject from './ParseObject';*/

	/*:: import type { QueryJSON } from './ParseQuery';*/

	/*:: import type ParseUser from './ParseUser';*/

	/*:: import type { AuthData } from './ParseUser';*/

	/*:: import type { PushData } from './Push';*/

	/*:: import type { RequestOptions, FullOptions } from './RESTController';*/

	/*:: type AnalyticsController = {
	  track: (name: string, dimensions: { [key: string]: string }) => Promise,
	};*/

	/*:: type CloudController = {
	  run: (name: string, data: mixed, options: RequestOptions) => Promise,
	  getJobsData: (options: RequestOptions) => Promise,
	  startJob: (name: string, data: mixed, options: RequestOptions) => Promise,
	};*/

	/*:: type ConfigController = {
	  current: () => Promise,
	  get: () => Promise,
	  save: (attrs: { [key: string]: any }) => Promise,
	};*/

	/*:: type CryptoController = {
	  encrypt: (obj: any, secretKey: string) => string,
	  decrypt: (encryptedText: string, secretKey: any) => string,
	};*/

	/*:: type FileController = {
	  saveFile: (name: string, source: FileSource, options: FullOptions) => Promise,
	  saveBase64: (name: string, source: FileSource, options: FullOptions) => Promise,
	  download: (uri: string) => Promise,
	};*/

	/*:: type InstallationController = {
	  currentInstallationId: () => Promise,
	};*/

	/*:: type ObjectController = {
	  fetch: (
	    object: ParseObject | Array<ParseObject>,
	    forceFetch: boolean,
	    options: RequestOptions
	  ) => Promise,
	  save: (object: ParseObject | Array<ParseObject | ParseFile>, options: RequestOptions) => Promise,
	  destroy: (object: ParseObject | Array<ParseObject>, options: RequestOptions) => Promise,
	};*/

	/*:: type ObjectStateController = {
	  getState: (obj: any) => ?State,
	  initializeState: (obj: any, initial?: State) => State,
	  removeState: (obj: any) => ?State,
	  getServerData: (obj: any) => AttributeMap,
	  setServerData: (obj: any, attributes: AttributeMap) => void,
	  getPendingOps: (obj: any) => Array<OpsMap>,
	  setPendingOp: (obj: any, attr: string, op: ?Op) => void,
	  pushPendingState: (obj: any) => void,
	  popPendingState: (obj: any) => OpsMap,
	  mergeFirstPendingState: (obj: any) => void,
	  getObjectCache: (obj: any) => ObjectCache,
	  estimateAttribute: (obj: any, attr: string) => mixed,
	  estimateAttributes: (obj: any) => AttributeMap,
	  commitServerChanges: (obj: any, changes: AttributeMap) => void,
	  enqueueTask: (obj: any, task: () => Promise) => Promise,
	  clearAllState: () => void,
	  duplicateState: (source: any, dest: any) => void,
	};*/

	/*:: type PushController = {
	  send: (data: PushData) => Promise,
	};*/

	/*:: type QueryController = {
	  find: (className: string, params: QueryJSON, options: RequestOptions) => Promise,
	  aggregate: (className: string, params: any, options: RequestOptions) => Promise,
	};*/

	/*:: type RESTController = {
	  request: (method: string, path: string, data: mixed, options: RequestOptions) => Promise,
	  ajax: (method: string, url: string, data: any, headers?: any, options: FullOptions) => Promise,
	};*/

	/*:: type SchemaController = {
	  purge: (className: string) => Promise,
	  get: (className: string, options: RequestOptions) => Promise,
	  delete: (className: string, options: RequestOptions) => Promise,
	  create: (className: string, params: any, options: RequestOptions) => Promise,
	  update: (className: string, params: any, options: RequestOptions) => Promise,
	  send(className: string, method: string, params: any, options: RequestOptions): Promise,
	};*/

	/*:: type SessionController = {
	  getSession: (token: RequestOptions) => Promise,
	};*/

	/*:: type StorageController =
	  | {
	      async: 0,
	      getItem: (path: string) => ?string,
	      setItem: (path: string, value: string) => void,
	      removeItem: (path: string) => void,
	      getItemAsync?: (path: string) => Promise,
	      setItemAsync?: (path: string, value: string) => Promise,
	      removeItemAsync?: (path: string) => Promise,
	      clear: () => void,
	    }
	  | {
	      async: 1,
	      getItem?: (path: string) => ?string,
	      setItem?: (path: string, value: string) => void,
	      removeItem?: (path: string) => void,
	      getItemAsync: (path: string) => Promise,
	      setItemAsync: (path: string, value: string) => Promise,
	      removeItemAsync: (path: string) => Promise,
	      clear: () => void,
	    };*/

	/*:: type LocalDatastoreController = {
	  fromPinWithName: (name: string) => ?any,
	  pinWithName: (name: string, objects: any) => void,
	  unPinWithName: (name: string) => void,
	  getAllContents: () => ?any,
	  clear: () => void,
	};*/

	/*:: type UserController = {
	  setCurrentUser: (user: ParseUser) => Promise,
	  currentUser: () => ?ParseUser,
	  currentUserAsync: () => Promise,
	  signUp: (user: ParseUser, attrs: AttributeMap, options: RequestOptions) => Promise,
	  logIn: (user: ParseUser, options: RequestOptions) => Promise,
	  become: (options: RequestOptions) => Promise,
	  hydrate: (userJSON: AttributeMap) => Promise,
	  logOut: (options: RequestOptions) => Promise,
	  me: (options: RequestOptions) => Promise,
	  requestPasswordReset: (email: string, options: RequestOptions) => Promise,
	  updateUserOnDisk: (user: ParseUser) => Promise,
	  upgradeToRevocableSession: (user: ParseUser, options: RequestOptions) => Promise,
	  linkWith: (user: ParseUser, authData: AuthData) => Promise,
	  removeUserFromDisk: () => Promise,
	  verifyPassword: (username: string, password: string, options: RequestOptions) => Promise,
	  requestEmailVerification: (email: string, options: RequestOptions) => Promise,
	};*/

	/*:: type HooksController = {
	  get: (type: string, functionName?: string, triggerName?: string) => Promise,
	  create: (hook: mixed) => Promise,
	  delete: (hook: mixed) => Promise,
	  update: (hook: mixed) => Promise,
	  send: (method: string, path: string, body?: mixed) => Promise,
	};*/

	/*:: type WebSocketController = {
	  onopen: () => void,
	  onmessage: (message: any) => void,
	  onclose: () => void,
	  onerror: (error: any) => void,
	  send: (data: any) => void,
	  close: () => void,
	};*/

	/*:: type Config = {
	  AnalyticsController?: AnalyticsController,
	  CloudController?: CloudController,
	  ConfigController?: ConfigController,
	  FileController?: FileController,
	  InstallationController?: InstallationController,
	  ObjectController?: ObjectController,
	  ObjectStateController?: ObjectStateController,
	  PushController?: PushController,
	  QueryController?: QueryController,
	  RESTController?: RESTController,
	  SchemaController?: SchemaController,
	  SessionController?: SessionController,
	  StorageController?: StorageController,
	  LocalDatastoreController?: LocalDatastoreController,
	  UserController?: UserController,
	  HooksController?: HooksController,
	  WebSocketController?: WebSocketController,
	};*/


	var config
	/*: Config & { [key: string]: mixed }*/
	= {
	  // Defaults
	  IS_NODE: typeof process !== 'undefined' && !!process.versions && !!process.versions.node && !process.versions.electron,
	  REQUEST_ATTEMPT_LIMIT: 5,
	  REQUEST_BATCH_SIZE: 20,
	  REQUEST_HEADERS: {},
	  SERVER_URL: 'https://api.parse.com/1',
	  SERVER_AUTH_TYPE: null,
	  SERVER_AUTH_TOKEN: null,
	  LIVEQUERY_SERVER_URL: null,
	  ENCRYPTED_KEY: null,
	  VERSION: 'js' + "3.4.2",
	  APPLICATION_ID: null,
	  JAVASCRIPT_KEY: null,
	  MASTER_KEY: null,
	  USE_MASTER_KEY: false,
	  PERFORM_USER_REWRITE: true,
	  FORCE_REVOCABLE_SESSION: false,
	  ENCRYPTED_USER: false,
	  IDEMPOTENCY: false,
	  ALLOW_CUSTOM_OBJECT_ID: false
	};

	function requireMethods(name
	/*: string*/
	, methods
	/*: Array<string>*/
	, controller
	/*: any*/
	) {
	  (0, _forEach.default)(methods).call(methods, function (func) {
	    if (typeof controller[func] !== 'function') {
	      var _context;

	      throw new Error((0, _concat.default)(_context = "".concat(name, " must implement ")).call(_context, func, "()"));
	    }
	  });
	}

	var CoreManager = {
	  get: function (key
	  /*: string*/
	  )
	  /*: any*/
	  {
	    if (config.hasOwnProperty(key)) {
	      return config[key];
	    }

	    throw new Error('Configuration key not found: ' + key);
	  },
	  set: function (key
	  /*: string*/
	  , value
	  /*: any*/
	  )
	  /*: void*/
	  {
	    config[key] = value;
	  },

	  /* Specialized Controller Setters/Getters */
	  setAnalyticsController: function (controller
	  /*: AnalyticsController*/
	  ) {
	    requireMethods('AnalyticsController', ['track'], controller);
	    config['AnalyticsController'] = controller;
	  },
	  getAnalyticsController: function ()
	  /*: AnalyticsController*/
	  {
	    return config['AnalyticsController'];
	  },
	  setCloudController: function (controller
	  /*: CloudController*/
	  ) {
	    requireMethods('CloudController', ['run', 'getJobsData', 'startJob'], controller);
	    config['CloudController'] = controller;
	  },
	  getCloudController: function ()
	  /*: CloudController*/
	  {
	    return config['CloudController'];
	  },
	  setConfigController: function (controller
	  /*: ConfigController*/
	  ) {
	    requireMethods('ConfigController', ['current', 'get', 'save'], controller);
	    config['ConfigController'] = controller;
	  },
	  getConfigController: function ()
	  /*: ConfigController*/
	  {
	    return config['ConfigController'];
	  },
	  setCryptoController: function (controller
	  /*: CryptoController*/
	  ) {
	    requireMethods('CryptoController', ['encrypt', 'decrypt'], controller);
	    config['CryptoController'] = controller;
	  },
	  getCryptoController: function ()
	  /*: CryptoController*/
	  {
	    return config['CryptoController'];
	  },
	  setFileController: function (controller
	  /*: FileController*/
	  ) {
	    requireMethods('FileController', ['saveFile', 'saveBase64'], controller);
	    config['FileController'] = controller;
	  },
	  getFileController: function ()
	  /*: FileController*/
	  {
	    return config['FileController'];
	  },
	  setInstallationController: function (controller
	  /*: InstallationController*/
	  ) {
	    requireMethods('InstallationController', ['currentInstallationId'], controller);
	    config['InstallationController'] = controller;
	  },
	  getInstallationController: function ()
	  /*: InstallationController*/
	  {
	    return config['InstallationController'];
	  },
	  setObjectController: function (controller
	  /*: ObjectController*/
	  ) {
	    requireMethods('ObjectController', ['save', 'fetch', 'destroy'], controller);
	    config['ObjectController'] = controller;
	  },
	  getObjectController: function ()
	  /*: ObjectController*/
	  {
	    return config['ObjectController'];
	  },
	  setObjectStateController: function (controller
	  /*: ObjectStateController*/
	  ) {
	    requireMethods('ObjectStateController', ['getState', 'initializeState', 'removeState', 'getServerData', 'setServerData', 'getPendingOps', 'setPendingOp', 'pushPendingState', 'popPendingState', 'mergeFirstPendingState', 'getObjectCache', 'estimateAttribute', 'estimateAttributes', 'commitServerChanges', 'enqueueTask', 'clearAllState'], controller);
	    config['ObjectStateController'] = controller;
	  },
	  getObjectStateController: function ()
	  /*: ObjectStateController*/
	  {
	    return config['ObjectStateController'];
	  },
	  setPushController: function (controller
	  /*: PushController*/
	  ) {
	    requireMethods('PushController', ['send'], controller);
	    config['PushController'] = controller;
	  },
	  getPushController: function ()
	  /*: PushController*/
	  {
	    return config['PushController'];
	  },
	  setQueryController: function (controller
	  /*: QueryController*/
	  ) {
	    requireMethods('QueryController', ['find', 'aggregate'], controller);
	    config['QueryController'] = controller;
	  },
	  getQueryController: function ()
	  /*: QueryController*/
	  {
	    return config['QueryController'];
	  },
	  setRESTController: function (controller
	  /*: RESTController*/
	  ) {
	    requireMethods('RESTController', ['request', 'ajax'], controller);
	    config['RESTController'] = controller;
	  },
	  getRESTController: function ()
	  /*: RESTController*/
	  {
	    return config['RESTController'];
	  },
	  setSchemaController: function (controller
	  /*: SchemaController*/
	  ) {
	    requireMethods('SchemaController', ['get', 'create', 'update', 'delete', 'send', 'purge'], controller);
	    config['SchemaController'] = controller;
	  },
	  getSchemaController: function ()
	  /*: SchemaController*/
	  {
	    return config['SchemaController'];
	  },
	  setSessionController: function (controller
	  /*: SessionController*/
	  ) {
	    requireMethods('SessionController', ['getSession'], controller);
	    config['SessionController'] = controller;
	  },
	  getSessionController: function ()
	  /*: SessionController*/
	  {
	    return config['SessionController'];
	  },
	  setStorageController: function (controller
	  /*: StorageController*/
	  ) {
	    if (controller.async) {
	      requireMethods('An async StorageController', ['getItemAsync', 'setItemAsync', 'removeItemAsync', 'getAllKeysAsync'], controller);
	    } else {
	      requireMethods('A synchronous StorageController', ['getItem', 'setItem', 'removeItem', 'getAllKeys'], controller);
	    }

	    config['StorageController'] = controller;
	  },
	  setLocalDatastoreController: function (controller
	  /*: LocalDatastoreController*/
	  ) {
	    requireMethods('LocalDatastoreController', ['pinWithName', 'fromPinWithName', 'unPinWithName', 'getAllContents', 'clear'], controller);
	    config['LocalDatastoreController'] = controller;
	  },
	  getLocalDatastoreController: function ()
	  /*: LocalDatastoreController*/
	  {
	    return config['LocalDatastoreController'];
	  },
	  setLocalDatastore: function (store
	  /*: any*/
	  ) {
	    config['LocalDatastore'] = store;
	  },
	  getLocalDatastore: function () {
	    return config['LocalDatastore'];
	  },
	  getStorageController: function ()
	  /*: StorageController*/
	  {
	    return config['StorageController'];
	  },
	  setAsyncStorage: function (storage
	  /*: any*/
	  ) {
	    config['AsyncStorage'] = storage;
	  },
	  getAsyncStorage: function () {
	    return config['AsyncStorage'];
	  },
	  setWebSocketController: function (controller
	  /*: WebSocketController*/
	  ) {
	    config['WebSocketController'] = controller;
	  },
	  getWebSocketController: function ()
	  /*: WebSocketController*/
	  {
	    return config['WebSocketController'];
	  },
	  setUserController: function (controller
	  /*: UserController*/
	  ) {
	    requireMethods('UserController', ['setCurrentUser', 'currentUser', 'currentUserAsync', 'signUp', 'logIn', 'become', 'logOut', 'me', 'requestPasswordReset', 'upgradeToRevocableSession', 'requestEmailVerification', 'verifyPassword', 'linkWith'], controller);
	    config['UserController'] = controller;
	  },
	  getUserController: function ()
	  /*: UserController*/
	  {
	    return config['UserController'];
	  },
	  setLiveQueryController: function (controller
	  /*: any*/
	  ) {
	    requireMethods('LiveQueryController', ['setDefaultLiveQueryClient', 'getDefaultLiveQueryClient', '_clearCachedDefaultClient'], controller);
	    config['LiveQueryController'] = controller;
	  },
	  getLiveQueryController: function ()
	  /*: any*/
	  {
	    return config['LiveQueryController'];
	  },
	  setHooksController: function (controller
	  /*: HooksController*/
	  ) {
	    requireMethods('HooksController', ['create', 'get', 'update', 'remove'], controller);
	    config['HooksController'] = controller;
	  },
	  getHooksController: function ()
	  /*: HooksController*/
	  {
	    return config['HooksController'];
	  }
	};

	var isArray$4 = isArray$2;

	var isArray$5 = isArray$4;

	var isArray$6 = isArray$5;

	var isArray$7 = isArray$6;

	var arrayWithHoles = createCommonjsModule(function (module) {
	function _arrayWithHoles(arr) {
	  if (isArray$7(arr)) return arr;
	}

	module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var iterableToArrayLimit = createCommonjsModule(function (module) {
	function _iterableToArrayLimit(arr, i) {
	  var _i = arr == null ? null : typeof symbol$5 !== "undefined" && getIteratorMethod$5(arr) || arr["@@iterator"];

	  if (_i == null) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;

	  var _s, _e;

	  try {
	    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var slice$4 = slice$2;

	var slice$5 = slice$4;

	var slice$6 = slice$5;

	var slice$7 = slice$6;

	var from$4 = from$2;

	var from$5 = from$4;

	var from$6 = from$5;

	var from$7 = from$6;

	var arrayLikeToArray = createCommonjsModule(function (module) {
	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var unsupportedIterableToArray = createCommonjsModule(function (module) {
	function _unsupportedIterableToArray(o, minLen) {
	  var _context;

	  if (!o) return;
	  if (typeof o === "string") return arrayLikeToArray(o, minLen);

	  var n = slice$7(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);

	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return from$7(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
	}

	module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var nonIterableRest = createCommonjsModule(function (module) {
	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var slicedToArray = createCommonjsModule(function (module) {
	function _slicedToArray(arr, i) {
	  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
	}

	module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var ParseFile_1 = createCommonjsModule(function (module, exports) {



















	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _slicedToArray2 = interopRequireDefault(slicedToArray);

	var _promise = interopRequireDefault(promise$3);

	var _keys = interopRequireDefault(keys$3);

	var _forEach = interopRequireDefault(forEach$4);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _regenerator = interopRequireDefault(regenerator);

	var _asyncToGenerator2 = interopRequireDefault(asyncToGenerator);

	var _slice = interopRequireDefault(slice$3);

	var _indexOf = interopRequireDefault(indexOf$8);

	var _isArray = interopRequireDefault(isArray$3);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _defineProperty2 = interopRequireDefault(defineProperty$b);

	var _CoreManager = interopRequireDefault(CoreManager);

	function ownKeys(object, enumerableOnly) {
	  var keys = keys$3(object);

	  if (getOwnPropertySymbols$2) {
	    var symbols = getOwnPropertySymbols$2(object);

	    enumerableOnly && (symbols = filter$3(symbols).call(symbols, function (sym) {
	      return getOwnPropertyDescriptor$3(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var _context5, _context6;

	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? forEach$4(_context5 = ownKeys(Object(source), !0)).call(_context5, function (key) {
	      (0, _defineProperty2.default)(target, key, source[key]);
	    }) : getOwnPropertyDescriptors$2 ? defineProperties$2(target, getOwnPropertyDescriptors$2(source)) : forEach$4(_context6 = ownKeys(Object(source))).call(_context6, function (key) {
	      defineProperty$3(target, key, getOwnPropertyDescriptor$3(source, key));
	    });
	  }

	  return target;
	}

	var ParseError = ParseError_1.default;

	var XHR = null;

	if (typeof XMLHttpRequest !== 'undefined') {
	  XHR = XMLHttpRequest;
	}

	/*:: type Base64 = { base64: string };*/

	/*:: type Uri = { uri: string };*/

	/*:: type FileData = Array<number> | Base64 | Blob | Uri;*/

	/*:: export type FileSource =
	  | {
	      format: 'file',
	      file: Blob,
	      type: string,
	    }
	  | {
	      format: 'base64',
	      base64: string,
	      type: string,
	    }
	  | {
	      format: 'uri',
	      uri: string,
	      type: string,
	    };*/
	var dataUriRegexp = /^data:([a-zA-Z]+\/[-a-zA-Z0-9+.]+)(;charset=[a-zA-Z0-9\-\/]*)?;base64,/;

	function b64Digit(number
	/*: number*/
	)
	/*: string*/
	{
	  if (number < 26) {
	    return String.fromCharCode(65 + number);
	  }

	  if (number < 52) {
	    return String.fromCharCode(97 + (number - 26));
	  }

	  if (number < 62) {
	    return String.fromCharCode(48 + (number - 52));
	  }

	  if (number === 62) {
	    return '+';
	  }

	  if (number === 63) {
	    return '/';
	  }

	  throw new TypeError('Tried to encode large digit ' + number + ' in base64.');
	}
	/**
	 * A Parse.File is a local representation of a file that is saved to the Parse
	 * cloud.
	 *
	 * @alias Parse.File
	 */


	var ParseFile = /*#__PURE__*/function () {
	  /**
	   * @param name {String} The file's name. This will be prefixed by a unique
	   *     value once the file has finished saving. The file name must begin with
	   *     an alphanumeric character, and consist of alphanumeric characters,
	   *     periods, spaces, underscores, or dashes.
	   * @param data {Array} The data for the file, as either:
	   *     1. an Array of byte value Numbers, or
	   *     2. an Object like { base64: "..." } with a base64-encoded String.
	   *     3. an Object like { uri: "..." } with a uri String.
	   *     4. a File object selected with a file upload control. (3) only works
	   *        in Firefox 3.6+, Safari 6.0.2+, Chrome 7+, and IE 10+.
	   *        For example:
	   * <pre>
	   * var fileUploadControl = $("#profilePhotoFileUpload")[0];
	   * if (fileUploadControl.files.length > 0) {
	   *   var file = fileUploadControl.files[0];
	   *   var name = "photo.jpg";
	   *   var parseFile = new Parse.File(name, file);
	   *   parseFile.save().then(function() {
	   *     // The file has been saved to Parse.
	   *   }, function(error) {
	   *     // The file either could not be read, or could not be saved to Parse.
	   *   });
	   * }</pre>
	   * @param type {String} Optional Content-Type header to use for the file. If
	   *     this is omitted, the content type will be inferred from the name's
	   *     extension.
	   * @param metadata {Object} Optional key value pairs to be stored with file object
	   * @param tags {Object} Optional key value pairs to be stored with file object
	   */
	  function ParseFile(name
	  /*: string*/
	  , data
	  /*:: ?: FileData*/
	  , type
	  /*:: ?: string*/
	  , metadata
	  /*:: ?: Object*/
	  , tags
	  /*:: ?: Object*/
	  ) {
	    (0, _classCallCheck2.default)(this, ParseFile);
	    (0, _defineProperty2.default)(this, "_name", void 0);
	    (0, _defineProperty2.default)(this, "_url", void 0);
	    (0, _defineProperty2.default)(this, "_source", void 0);
	    (0, _defineProperty2.default)(this, "_previousSave", void 0);
	    (0, _defineProperty2.default)(this, "_data", void 0);
	    (0, _defineProperty2.default)(this, "_requestTask", void 0);
	    (0, _defineProperty2.default)(this, "_metadata", void 0);
	    (0, _defineProperty2.default)(this, "_tags", void 0);
	    var specifiedType = type || '';
	    this._name = name;
	    this._metadata = metadata || {};
	    this._tags = tags || {};

	    if (data !== undefined) {
	      if ((0, _isArray.default)(data)) {
	        this._data = ParseFile.encodeBase64(data);
	        this._source = {
	          format: 'base64',
	          base64: this._data,
	          type: specifiedType
	        };
	      } else if (typeof Blob !== 'undefined' && data instanceof Blob) {
	        this._source = {
	          format: 'file',
	          file: data,
	          type: specifiedType
	        };
	      } else if (data && typeof data.uri === 'string' && data.uri !== undefined) {
	        this._source = {
	          format: 'uri',
	          uri: data.uri,
	          type: specifiedType
	        };
	      } else if (data && typeof data.base64 === 'string') {
	        var base64 = data.base64;
	        var commaIndex = (0, _indexOf.default)(base64).call(base64, ',');

	        if (commaIndex !== -1) {
	          var matches = dataUriRegexp.exec((0, _slice.default)(base64).call(base64, 0, commaIndex + 1)); // if data URI with type and charset, there will be 4 matches.

	          this._data = (0, _slice.default)(base64).call(base64, commaIndex + 1);
	          this._source = {
	            format: 'base64',
	            base64: this._data,
	            type: matches[1]
	          };
	        } else {
	          this._data = base64;
	          this._source = {
	            format: 'base64',
	            base64: base64,
	            type: specifiedType
	          };
	        }
	      } else {
	        throw new TypeError('Cannot create a Parse.File with that data.');
	      }
	    }
	  }
	  /**
	   * Return the data for the file, downloading it if not already present.
	   * Data is present if initialized with Byte Array, Base64 or Saved with Uri.
	   * Data is cleared if saved with File object selected with a file upload control
	   *
	   * @returns {Promise} Promise that is resolve with base64 data
	   */


	  (0, _createClass2.default)(ParseFile, [{
	    key: "getData",
	    value: function () {
	      var _getData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
	        var _this = this;

	        var options, controller, result;
	        return _regenerator.default.wrap(function (_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!this._data) {
	                  _context.next = 2;
	                  break;
	                }

	                return _context.abrupt("return", this._data);

	              case 2:
	                if (this._url) {
	                  _context.next = 4;
	                  break;
	                }

	                throw new Error('Cannot retrieve data for unsaved ParseFile.');

	              case 4:
	                options = {
	                  requestTask: function (task) {
	                    return _this._requestTask = task;
	                  }
	                };
	                controller = _CoreManager.default.getFileController();
	                _context.next = 8;
	                return controller.download(this._url, options);

	              case 8:
	                result = _context.sent;
	                this._data = result.base64;
	                return _context.abrupt("return", this._data);

	              case 11:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      return function () {
	        return _getData.apply(this, arguments);
	      };
	    }()
	    /**
	     * Gets the name of the file. Before save is called, this is the filename
	     * given by the user. After save is called, that name gets prefixed with a
	     * unique identifier.
	     *
	     * @returns {string}
	     */

	  }, {
	    key: "name",
	    value: function ()
	    /*: string*/
	    {
	      return this._name;
	    }
	    /**
	     * Gets the url of the file. It is only available after you save the file or
	     * after you get the file from a Parse.Object.
	     *
	     * @param {object} options An object to specify url options
	     * @returns {string}
	     */

	  }, {
	    key: "url",
	    value: function (options
	    /*:: ?: { forceSecure?: boolean }*/
	    )
	    /*: ?string*/
	    {
	      options = options || {};

	      if (!this._url) {
	        return;
	      }

	      if (options.forceSecure) {
	        return this._url.replace(/^http:\/\//i, 'https://');
	      } else {
	        return this._url;
	      }
	    }
	    /**
	     * Gets the metadata of the file.
	     *
	     * @returns {object}
	     */

	  }, {
	    key: "metadata",
	    value: function ()
	    /*: Object*/
	    {
	      return this._metadata;
	    }
	    /**
	     * Gets the tags of the file.
	     *
	     * @returns {object}
	     */

	  }, {
	    key: "tags",
	    value: function ()
	    /*: Object*/
	    {
	      return this._tags;
	    }
	    /**
	     * Saves the file to the Parse cloud.
	     *
	     * @param {object} options
	     *  * Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *     behalf of a specific user.
	     *   <li>progress: In Browser only, callback for upload progress. For example:
	     * <pre>
	     * let parseFile = new Parse.File(name, file);
	     * parseFile.save({
	     *   progress: (progressValue, loaded, total, { type }) => {
	     *     if (type === "upload" && progressValue !== null) {
	     *       // Update the UI using progressValue
	     *     }
	     *   }
	     * });
	     * </pre>
	     * </ul>
	     * @returns {Promise} Promise that is resolved when the save finishes.
	     */

	  }, {
	    key: "save",
	    value: function (options
	    /*:: ?: FullOptions*/
	    ) {
	      var _this2 = this;

	      options = options || {};

	      options.requestTask = function (task) {
	        return _this2._requestTask = task;
	      };

	      options.metadata = this._metadata;
	      options.tags = this._tags;

	      var controller = _CoreManager.default.getFileController();

	      if (!this._previousSave) {
	        if (this._source.format === 'file') {
	          this._previousSave = controller.saveFile(this._name, this._source, options).then(function (res) {
	            _this2._name = res.name;
	            _this2._url = res.url;
	            _this2._data = null;
	            _this2._requestTask = null;
	            return _this2;
	          });
	        } else if (this._source.format === 'uri') {
	          this._previousSave = controller.download(this._source.uri, options).then(function (result) {
	            if (!(result && result.base64)) {
	              return {};
	            }

	            var newSource = {
	              format: 'base64',
	              base64: result.base64,
	              type: result.contentType
	            };
	            _this2._data = result.base64;
	            _this2._requestTask = null;
	            return controller.saveBase64(_this2._name, newSource, options);
	          }).then(function (res) {
	            _this2._name = res.name;
	            _this2._url = res.url;
	            _this2._requestTask = null;
	            return _this2;
	          });
	        } else {
	          this._previousSave = controller.saveBase64(this._name, this._source, options).then(function (res) {
	            _this2._name = res.name;
	            _this2._url = res.url;
	            _this2._requestTask = null;
	            return _this2;
	          });
	        }
	      }

	      if (this._previousSave) {
	        return this._previousSave;
	      }
	    }
	    /**
	     * Aborts the request if it has already been sent.
	     */

	  }, {
	    key: "cancel",
	    value: function () {
	      if (this._requestTask && typeof this._requestTask.abort === 'function') {
	        this._requestTask.abort();
	      }

	      this._requestTask = null;
	    }
	    /**
	     * Deletes the file from the Parse cloud.
	     * In Cloud Code and Node only with Master Key.
	     *
	     * @param {object} options
	     *  * Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     * <pre>
	     * @returns {Promise} Promise that is resolved when the delete finishes.
	     */

	  }, {
	    key: "destroy",
	    value: function () {
	      var _this3 = this;

	      var options
	      /*:: ?: FullOptions*/
	      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      if (!this._name) {
	        throw new ParseError(ParseError.FILE_DELETE_UNNAMED_ERROR, 'Cannot delete an unnamed file.');
	      }

	      var destroyOptions = {
	        useMasterKey: true
	      };

	      if (options.hasOwnProperty('useMasterKey')) {
	        destroyOptions.useMasterKey = options.useMasterKey;
	      }

	      var controller = _CoreManager.default.getFileController();

	      return controller.deleteFile(this._name, destroyOptions).then(function () {
	        _this3._data = null;
	        _this3._requestTask = null;
	        return _this3;
	      });
	    }
	  }, {
	    key: "toJSON",
	    value: function ()
	    /*: { name: ?string, url: ?string }*/
	    {
	      return {
	        __type: 'File',
	        name: this._name,
	        url: this._url
	      };
	    }
	  }, {
	    key: "equals",
	    value: function (other
	    /*: mixed*/
	    )
	    /*: boolean*/
	    {
	      if (this === other) {
	        return true;
	      } // Unsaved Files are never equal, since they will be saved to different URLs


	      return other instanceof ParseFile && this.name() === other.name() && this.url() === other.url() && typeof this.url() !== 'undefined';
	    }
	    /**
	     * Sets metadata to be saved with file object. Overwrites existing metadata
	     *
	     * @param {object} metadata Key value pairs to be stored with file object
	     */

	  }, {
	    key: "setMetadata",
	    value: function (metadata
	    /*: any*/
	    ) {
	      var _this4 = this;

	      if (metadata && (0, _typeof2.default)(metadata) === 'object') {
	        var _context2;

	        (0, _forEach.default)(_context2 = (0, _keys.default)(metadata)).call(_context2, function (key) {
	          _this4.addMetadata(key, metadata[key]);
	        });
	      }
	    }
	    /**
	     * Sets metadata to be saved with file object. Adds to existing metadata.
	     *
	     * @param {string} key key to store the metadata
	     * @param {*} value metadata
	     */

	  }, {
	    key: "addMetadata",
	    value: function (key
	    /*: string*/
	    , value
	    /*: any*/
	    ) {
	      if (typeof key === 'string') {
	        this._metadata[key] = value;
	      }
	    }
	    /**
	     * Sets tags to be saved with file object. Overwrites existing tags
	     *
	     * @param {object} tags Key value pairs to be stored with file object
	     */

	  }, {
	    key: "setTags",
	    value: function (tags
	    /*: any*/
	    ) {
	      var _this5 = this;

	      if (tags && (0, _typeof2.default)(tags) === 'object') {
	        var _context3;

	        (0, _forEach.default)(_context3 = (0, _keys.default)(tags)).call(_context3, function (key) {
	          _this5.addTag(key, tags[key]);
	        });
	      }
	    }
	    /**
	     * Sets tags to be saved with file object. Adds to existing tags.
	     *
	     * @param {string} key key to store tags
	     * @param {*} value tag
	     */

	  }, {
	    key: "addTag",
	    value: function (key
	    /*: string*/
	    , value
	    /*: string*/
	    ) {
	      if (typeof key === 'string') {
	        this._tags[key] = value;
	      }
	    }
	  }], [{
	    key: "fromJSON",
	    value: function (obj)
	    /*: ParseFile*/
	    {
	      if (obj.__type !== 'File') {
	        throw new TypeError('JSON object does not represent a ParseFile');
	      }

	      var file = new ParseFile(obj.name);
	      file._url = obj.url;
	      return file;
	    }
	  }, {
	    key: "encodeBase64",
	    value: function (bytes
	    /*: Array<number>*/
	    )
	    /*: string*/
	    {
	      var chunks = [];
	      chunks.length = Math.ceil(bytes.length / 3);

	      for (var i = 0; i < chunks.length; i++) {
	        var b1 = bytes[i * 3];
	        var b2 = bytes[i * 3 + 1] || 0;
	        var b3 = bytes[i * 3 + 2] || 0;
	        var has2 = i * 3 + 1 < bytes.length;
	        var has3 = i * 3 + 2 < bytes.length;
	        chunks[i] = [b64Digit(b1 >> 2 & 0x3f), b64Digit(b1 << 4 & 0x30 | b2 >> 4 & 0x0f), has2 ? b64Digit(b2 << 2 & 0x3c | b3 >> 6 & 0x03) : '=', has3 ? b64Digit(b3 & 0x3f) : '='].join('');
	      }

	      return chunks.join('');
	    }
	  }]);
	  return ParseFile;
	}();

	var DefaultController = {
	  saveFile: function () {
	    var _saveFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(name
	    /*: string*/
	    , source
	    /*: FileSource*/
	    , options
	    /*:: ?: FullOptions*/
	    ) {
	      var base64Data, _base64Data$split, _base64Data$split2, first, second, data, newSource;

	      return _regenerator.default.wrap(function (_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              if (!(source.format !== 'file')) {
	                _context4.next = 2;
	                break;
	              }

	              throw new Error('saveFile can only be used with File-type sources.');

	            case 2:
	              _context4.next = 4;
	              return new _promise.default(function (res, rej) {
	                // eslint-disable-next-line no-undef
	                var reader = new FileReader();

	                reader.onload = function () {
	                  return res(reader.result);
	                };

	                reader.onerror = function (error) {
	                  return rej(error);
	                };

	                reader.readAsDataURL(source.file);
	              });

	            case 4:
	              base64Data = _context4.sent; // we only want the data after the comma
	              // For example: "data:application/pdf;base64,JVBERi0xLjQKJ..." we would only want "JVBERi0xLjQKJ..."

	              _base64Data$split = base64Data.split(','), _base64Data$split2 = (0, _slicedToArray2.default)(_base64Data$split, 2), first = _base64Data$split2[0], second = _base64Data$split2[1]; // in the event there is no 'data:application/pdf;base64,' at the beginning of the base64 string
	              // use the entire string instead

	              data = second ? second : first;
	              newSource = {
	                format: 'base64',
	                base64: data,
	                type: source.type || (source.file ? source.file.type : null)
	              };
	              _context4.next = 10;
	              return DefaultController.saveBase64(name, newSource, options);

	            case 10:
	              return _context4.abrupt("return", _context4.sent);

	            case 11:
	            case "end":
	              return _context4.stop();
	          }
	        }
	      }, _callee2);
	    }));

	    return function () {
	      return _saveFile.apply(this, arguments);
	    };
	  }(),
	  saveBase64: function (name
	  /*: string*/
	  , source
	  /*: FileSource*/
	  , options
	  /*:: ?: FullOptions*/
	  ) {
	    if (source.format !== 'base64') {
	      throw new Error('saveBase64 can only be used with Base64-type sources.');
	    }

	    var data
	    /*: { base64: any, _ContentType?: any, fileData: Object }*/
	    = {
	      base64: source.base64,
	      fileData: {
	        metadata: _objectSpread({}, options.metadata),
	        tags: _objectSpread({}, options.tags)
	      }
	    };
	    delete options.metadata;
	    delete options.tags;

	    if (source.type) {
	      data._ContentType = source.type;
	    }

	    return _CoreManager.default.getRESTController().request('POST', 'files/' + name, data, options);
	  },
	  download: function (uri, options) {
	    if (XHR) {
	      return this.downloadAjax(uri, options);
	    } else {
	      return _promise.default.reject('Cannot make a request: No definition of XMLHttpRequest was found.');
	    }
	  },
	  downloadAjax: function (uri, options) {
	    return new _promise.default(function (resolve, reject) {
	      var xhr = new XHR();
	      xhr.open('GET', uri, true);
	      xhr.responseType = 'arraybuffer';

	      xhr.onerror = function (e) {
	        reject(e);
	      };

	      xhr.onreadystatechange = function () {
	        if (xhr.readyState !== xhr.DONE) {
	          return;
	        }

	        if (!this.response) {
	          return resolve({});
	        }

	        var bytes = new Uint8Array(this.response);
	        resolve({
	          base64: ParseFile.encodeBase64(bytes),
	          contentType: xhr.getResponseHeader('content-type')
	        });
	      };

	      options.requestTask(xhr);
	      xhr.send();
	    });
	  },
	  deleteFile: function (name
	  /*: string*/
	  , options
	  /*:: ?: FullOptions*/
	  ) {
	    var headers = {
	      'X-Parse-Application-ID': _CoreManager.default.get('APPLICATION_ID')
	    };

	    if (options.useMasterKey) {
	      headers['X-Parse-Master-Key'] = _CoreManager.default.get('MASTER_KEY');
	    }

	    var url = _CoreManager.default.get('SERVER_URL');

	    if (url[url.length - 1] !== '/') {
	      url += '/';
	    }

	    url += 'files/' + name;
	    return _CoreManager.default.getRESTController().ajax('DELETE', url, '', headers).catch(function (response) {
	      // TODO: return JSON object in server
	      if (!response || response === 'SyntaxError: Unexpected end of JSON input') {
	        return _promise.default.resolve();
	      } else {
	        return _CoreManager.default.getRESTController().handleError(response);
	      }
	    });
	  },
	  _setXHR: function (xhr
	  /*: any*/
	  ) {
	    XHR = xhr;
	  },
	  _getXHR: function () {
	    return XHR;
	  }
	};

	_CoreManager.default.setFileController(DefaultController);

	var _default = ParseFile;
	exports.default = _default;
	exports.b64Digit = b64Digit;
	});

	var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport('splice');

	var TypeError$l = global$1.TypeError;
	var max$3 = Math.max;
	var min$2 = Math.min;
	var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

	// `Array.prototype.splice` method
	// https://tc39.es/ecma262/#sec-array.prototype.splice
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$3 }, {
	  splice: function splice(start, deleteCount /* , ...items */) {
	    var O = toObject(this);
	    var len = lengthOfArrayLike(O);
	    var actualStart = toAbsoluteIndex(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;
	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min$2(max$3(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
	    }
	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {
	      throw TypeError$l(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
	    }
	    A = arraySpeciesCreate(O, actualDeleteCount);
	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty(A, k, O[from]);
	    }
	    A.length = actualDeleteCount;
	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	    }
	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }
	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	var splice$1 = entryVirtual('Array').splice;

	var ArrayPrototype$9 = Array.prototype;

	var splice$2 = function (it) {
	  var own = it.splice;
	  return it === ArrayPrototype$9 || (objectIsPrototypeOf(ArrayPrototype$9, it) && own === ArrayPrototype$9.splice) ? splice$1 : own;
	};

	var splice$3 = splice$2;

	var splice$4 = splice$3;

	var arrayContainsObject_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = arrayContainsObject;

	var _indexOf = interopRequireDefault(indexOf$8);

	var _ParseObject = interopRequireDefault(ParseObject_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */


	function arrayContainsObject(array
	/*: Array<any>*/
	, object
	/*: ParseObject*/
	)
	/*: boolean*/
	{
	  if ((0, _indexOf.default)(array).call(array, object) > -1) {
	    return true;
	  }

	  for (var i = 0; i < array.length; i++) {
	    if (array[i] instanceof _ParseObject.default && array[i].className === object.className && array[i]._getId() === object._getId()) {
	      return true;
	    }
	  }

	  return false;
	}
	});

	// eslint-disable-next-line es-x/no-string-prototype-startswith -- safe
	var un$StartsWith = functionUncurryThis(''.startsWith);
	var stringSlice$2 = functionUncurryThis(''.slice);
	var min$3 = Math.min;

	var CORRECT_IS_REGEXP_LOGIC = correctIsRegexpLogic('startsWith');

	// `String.prototype.startsWith` method
	// https://tc39.es/ecma262/#sec-string.prototype.startswith
	_export({ target: 'String', proto: true, forced: !CORRECT_IS_REGEXP_LOGIC }, {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = toString$3(requireObjectCoercible(this));
	    notARegexp(searchString);
	    var index = toLength(min$3(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = toString$3(searchString);
	    return un$StartsWith
	      ? un$StartsWith(that, search, index)
	      : stringSlice$2(that, index, index + search.length) === search;
	  }
	});

	var startsWith = entryVirtual('String').startsWith;

	var StringPrototype$1 = String.prototype;

	var startsWith$1 = function (it) {
	  var own = it.startsWith;
	  return typeof it == 'string' || it === StringPrototype$1
	    || (objectIsPrototypeOf(StringPrototype$1, it) && own === StringPrototype$1.startsWith) ? startsWith : own;
	};

	var startsWith$2 = startsWith$1;

	var startsWith$3 = startsWith$2;

	var ParseGeoPoint_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _isArray = interopRequireDefault(isArray$3);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _defineProperty2 = interopRequireDefault(defineProperty$b);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */

	/**
	 * Creates a new GeoPoint with any of the following forms:<br>
	 *   <pre>
	 *   new GeoPoint(otherGeoPoint)
	 *   new GeoPoint(30, 30)
	 *   new GeoPoint([30, 30])
	 *   new GeoPoint({latitude: 30, longitude: 30})
	 *   new GeoPoint()  // defaults to (0, 0)
	 *   </pre>
	 * <p>Represents a latitude / longitude point that may be associated
	 * with a key in a ParseObject or used as a reference point for geo queries.
	 * This allows proximity-based queries on the key.</p>
	 *
	 * <p>Only one key in a class may contain a GeoPoint.</p>
	 *
	 * <p>Example:<pre>
	 *   var point = new Parse.GeoPoint(30.0, -20.0);
	 *   var object = new Parse.Object("PlaceObject");
	 *   object.set("location", point);
	 *   object.save();</pre></p>
	 *
	 * @alias Parse.GeoPoint
	 */

	/* global navigator */


	var ParseGeoPoint = /*#__PURE__*/function () {
	  /**
	   * @param {(number[] | object | number)} arg1 Either a list of coordinate pairs, an object with `latitude`, `longitude`, or the latitude or the point.
	   * @param {number} arg2 The longitude of the GeoPoint
	   */
	  function ParseGeoPoint(arg1
	  /*: Array<number> | { latitude: number, longitude: number } | number*/
	  , arg2
	  /*:: ?: number*/
	  ) {
	    (0, _classCallCheck2.default)(this, ParseGeoPoint);
	    (0, _defineProperty2.default)(this, "_latitude", void 0);
	    (0, _defineProperty2.default)(this, "_longitude", void 0);

	    if ((0, _isArray.default)(arg1)) {
	      ParseGeoPoint._validate(arg1[0], arg1[1]);

	      this._latitude = arg1[0];
	      this._longitude = arg1[1];
	    } else if ((0, _typeof2.default)(arg1) === 'object') {
	      ParseGeoPoint._validate(arg1.latitude, arg1.longitude);

	      this._latitude = arg1.latitude;
	      this._longitude = arg1.longitude;
	    } else if (arg1 !== undefined && arg2 !== undefined) {
	      ParseGeoPoint._validate(arg1, arg2);

	      this._latitude = arg1;
	      this._longitude = arg2;
	    } else {
	      this._latitude = 0;
	      this._longitude = 0;
	    }
	  }
	  /**
	   * North-south portion of the coordinate, in range [-90, 90].
	   * Throws an exception if set out of range in a modern browser.
	   *
	   * @property {number} latitude
	   * @returns {number}
	   */


	  (0, _createClass2.default)(ParseGeoPoint, [{
	    key: "latitude",
	    get: function ()
	    /*: number*/
	    {
	      return this._latitude;
	    },
	    set: function (val
	    /*: number*/
	    ) {
	      ParseGeoPoint._validate(val, this.longitude);

	      this._latitude = val;
	    }
	    /**
	     * East-west portion of the coordinate, in range [-180, 180].
	     * Throws if set out of range in a modern browser.
	     *
	     * @property {number} longitude
	     * @returns {number}
	     */

	  }, {
	    key: "longitude",
	    get: function ()
	    /*: number*/
	    {
	      return this._longitude;
	    },
	    set: function (val
	    /*: number*/
	    ) {
	      ParseGeoPoint._validate(this.latitude, val);

	      this._longitude = val;
	    }
	    /**
	     * Returns a JSON representation of the GeoPoint, suitable for Parse.
	     *
	     * @returns {object}
	     */

	  }, {
	    key: "toJSON",
	    value: function ()
	    /*: { __type: string, latitude: number, longitude: number }*/
	    {
	      ParseGeoPoint._validate(this._latitude, this._longitude);

	      return {
	        __type: 'GeoPoint',
	        latitude: this._latitude,
	        longitude: this._longitude
	      };
	    }
	  }, {
	    key: "equals",
	    value: function (other
	    /*: mixed*/
	    )
	    /*: boolean*/
	    {
	      return other instanceof ParseGeoPoint && this.latitude === other.latitude && this.longitude === other.longitude;
	    }
	    /**
	     * Returns the distance from this GeoPoint to another in radians.
	     *
	     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.
	     * @returns {number}
	     */

	  }, {
	    key: "radiansTo",
	    value: function (point
	    /*: ParseGeoPoint*/
	    )
	    /*: number*/
	    {
	      var d2r = Math.PI / 180.0;
	      var lat1rad = this.latitude * d2r;
	      var long1rad = this.longitude * d2r;
	      var lat2rad = point.latitude * d2r;
	      var long2rad = point.longitude * d2r;
	      var sinDeltaLatDiv2 = Math.sin((lat1rad - lat2rad) / 2);
	      var sinDeltaLongDiv2 = Math.sin((long1rad - long2rad) / 2); // Square of half the straight line chord distance between both points.

	      var a = sinDeltaLatDiv2 * sinDeltaLatDiv2 + Math.cos(lat1rad) * Math.cos(lat2rad) * sinDeltaLongDiv2 * sinDeltaLongDiv2;
	      a = Math.min(1.0, a);
	      return 2 * Math.asin(Math.sqrt(a));
	    }
	    /**
	     * Returns the distance from this GeoPoint to another in kilometers.
	     *
	     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.
	     * @returns {number}
	     */

	  }, {
	    key: "kilometersTo",
	    value: function (point
	    /*: ParseGeoPoint*/
	    )
	    /*: number*/
	    {
	      return this.radiansTo(point) * 6371.0;
	    }
	    /**
	     * Returns the distance from this GeoPoint to another in miles.
	     *
	     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.
	     * @returns {number}
	     */

	  }, {
	    key: "milesTo",
	    value: function (point
	    /*: ParseGeoPoint*/
	    )
	    /*: number*/
	    {
	      return this.radiansTo(point) * 3958.8;
	    }
	    /*
	     * Throws an exception if the given lat-long is out of bounds.
	     */

	  }], [{
	    key: "_validate",
	    value: function (latitude
	    /*: number*/
	    , longitude
	    /*: number*/
	    ) {
	      if (isNaN(latitude) || isNaN(longitude) || typeof latitude !== 'number' || typeof longitude !== 'number') {
	        throw new TypeError('GeoPoint latitude and longitude must be valid numbers');
	      }

	      if (latitude < -90.0) {
	        throw new TypeError('GeoPoint latitude out of bounds: ' + latitude + ' < -90.0.');
	      }

	      if (latitude > 90.0) {
	        throw new TypeError('GeoPoint latitude out of bounds: ' + latitude + ' > 90.0.');
	      }

	      if (longitude < -180.0) {
	        throw new TypeError('GeoPoint longitude out of bounds: ' + longitude + ' < -180.0.');
	      }

	      if (longitude > 180.0) {
	        throw new TypeError('GeoPoint longitude out of bounds: ' + longitude + ' > 180.0.');
	      }
	    }
	    /**
	     * Creates a GeoPoint with the user's current location, if available.
	     *
	     * @static
	     * @returns {Parse.GeoPoint} User's current location
	     */

	  }, {
	    key: "current",
	    value: function () {
	      return navigator.geolocation.getCurrentPosition(function (location) {
	        return new ParseGeoPoint(location.coords.latitude, location.coords.longitude);
	      });
	    }
	  }]);
	  return ParseGeoPoint;
	}();

	var _default = ParseGeoPoint;
	exports.default = _default;
	});

	var ParsePolygon_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _isArray = interopRequireDefault(isArray$3);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _defineProperty2 = interopRequireDefault(defineProperty$b);

	var _ParseGeoPoint = interopRequireDefault(ParseGeoPoint_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */

	/**
	 * Creates a new Polygon with any of the following forms:<br>
	 *   <pre>
	 *   new Polygon([[0,0],[0,1],[1,1],[1,0]])
	 *   new Polygon([GeoPoint, GeoPoint, GeoPoint])
	 *   </pre>
	 *
	 * <p>Represents a coordinates that may be associated
	 * with a key in a ParseObject or used as a reference point for geo queries.
	 * This allows proximity-based queries on the key.</p>
	 *
	 * <p>Example:<pre>
	 *   var polygon = new Parse.Polygon([[0,0],[0,1],[1,1],[1,0]]);
	 *   var object = new Parse.Object("PlaceObject");
	 *   object.set("area", polygon);
	 *   object.save();</pre></p>
	 *
	 * @alias Parse.Polygon
	 */


	var ParsePolygon = /*#__PURE__*/function () {
	  /**
	   * @param {(number[][] | Parse.GeoPoint[])} coordinates An Array of coordinate pairs
	   */
	  function ParsePolygon(coordinates
	  /*: Array<Array<number>> | Array<ParseGeoPoint>*/
	  ) {
	    (0, _classCallCheck2.default)(this, ParsePolygon);
	    (0, _defineProperty2.default)(this, "_coordinates", void 0);
	    this._coordinates = ParsePolygon._validate(coordinates);
	  }
	  /**
	   * Coordinates value for this Polygon.
	   * Throws an exception if not valid type.
	   *
	   * @property {(number[][] | Parse.GeoPoint[])} coordinates list of coordinates
	   * @returns {number[][]}
	   */


	  (0, _createClass2.default)(ParsePolygon, [{
	    key: "coordinates",
	    get: function ()
	    /*: Array<Array<number>>*/
	    {
	      return this._coordinates;
	    },
	    set: function (coords
	    /*: Array<Array<number>> | Array<ParseGeoPoint>*/
	    ) {
	      this._coordinates = ParsePolygon._validate(coords);
	    }
	    /**
	     * Returns a JSON representation of the Polygon, suitable for Parse.
	     *
	     * @returns {object}
	     */

	  }, {
	    key: "toJSON",
	    value: function ()
	    /*: { __type: string, coordinates: Array<Array<number>> }*/
	    {
	      ParsePolygon._validate(this._coordinates);

	      return {
	        __type: 'Polygon',
	        coordinates: this._coordinates
	      };
	    }
	    /**
	     * Checks if two polygons are equal
	     *
	     * @param {(Parse.Polygon | object)} other
	     * @returns {boolean}
	     */

	  }, {
	    key: "equals",
	    value: function (other
	    /*: mixed*/
	    )
	    /*: boolean*/
	    {
	      if (!(other instanceof ParsePolygon) || this.coordinates.length !== other.coordinates.length) {
	        return false;
	      }

	      var isEqual = true;

	      for (var i = 1; i < this._coordinates.length; i += 1) {
	        if (this._coordinates[i][0] != other.coordinates[i][0] || this._coordinates[i][1] != other.coordinates[i][1]) {
	          isEqual = false;
	          break;
	        }
	      }

	      return isEqual;
	    }
	    /**
	     *
	     * @param {Parse.GeoPoint} point
	     * @returns {boolean} Returns if the point is contained in the polygon
	     */

	  }, {
	    key: "containsPoint",
	    value: function (point
	    /*: ParseGeoPoint*/
	    )
	    /*: boolean*/
	    {
	      var minX = this._coordinates[0][0];
	      var maxX = this._coordinates[0][0];
	      var minY = this._coordinates[0][1];
	      var maxY = this._coordinates[0][1];

	      for (var i = 1; i < this._coordinates.length; i += 1) {
	        var p = this._coordinates[i];
	        minX = Math.min(p[0], minX);
	        maxX = Math.max(p[0], maxX);
	        minY = Math.min(p[1], minY);
	        maxY = Math.max(p[1], maxY);
	      }

	      var outside = point.latitude < minX || point.latitude > maxX || point.longitude < minY || point.longitude > maxY;

	      if (outside) {
	        return false;
	      }

	      var inside = false;

	      for (var _i = 0, j = this._coordinates.length - 1; _i < this._coordinates.length; j = _i++) {
	        var startX = this._coordinates[_i][0];
	        var startY = this._coordinates[_i][1];
	        var endX = this._coordinates[j][0];
	        var endY = this._coordinates[j][1];
	        var intersect = startY > point.longitude != endY > point.longitude && point.latitude < (endX - startX) * (point.longitude - startY) / (endY - startY) + startX;

	        if (intersect) {
	          inside = !inside;
	        }
	      }

	      return inside;
	    }
	    /**
	     * Validates that the list of coordinates can form a valid polygon
	     *
	     * @param {Array} coords the list of coordinates to validate as a polygon
	     * @throws {TypeError}
	     * @returns {number[][]} Array of coordinates if validated.
	     */

	  }], [{
	    key: "_validate",
	    value: function (coords
	    /*: Array<Array<number>> | Array<ParseGeoPoint>*/
	    )
	    /*: Array<Array<number>>*/
	    {
	      if (!(0, _isArray.default)(coords)) {
	        throw new TypeError('Coordinates must be an Array');
	      }

	      if (coords.length < 3) {
	        throw new TypeError('Polygon must have at least 3 GeoPoints or Points');
	      }

	      var points = [];

	      for (var i = 0; i < coords.length; i += 1) {
	        var coord = coords[i];
	        var geoPoint = void 0;

	        if (coord instanceof _ParseGeoPoint.default) {
	          geoPoint = coord;
	        } else if ((0, _isArray.default)(coord) && coord.length === 2) {
	          geoPoint = new _ParseGeoPoint.default(coord[0], coord[1]);
	        } else {
	          throw new TypeError('Coordinates must be an Array of GeoPoints or Points');
	        }

	        points.push([geoPoint.latitude, geoPoint.longitude]);
	      }

	      return points;
	    }
	  }]);
	  return ParsePolygon;
	}();

	var _default = ParsePolygon;
	exports.default = _default;
	});

	var encode_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = _default;

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _map = interopRequireDefault(map$9);

	var _isArray = interopRequireDefault(isArray$3);

	var _concat = interopRequireDefault(concat$5);

	var _startsWith = interopRequireDefault(startsWith$3);

	var _keys = interopRequireDefault(keys$3);

	var _indexOf = interopRequireDefault(indexOf$8);

	var _ParseACL = interopRequireDefault(ParseACL_1);

	var _ParseFile = interopRequireDefault(ParseFile_1);

	var _ParseGeoPoint = interopRequireDefault(ParseGeoPoint_1);

	var _ParsePolygon = interopRequireDefault(ParsePolygon_1);

	var _ParseObject = interopRequireDefault(ParseObject_1);



	var _ParseRelation = interopRequireDefault(ParseRelation_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */


	function encode(value
	/*: mixed*/
	, disallowObjects
	/*: boolean*/
	, forcePointers
	/*: boolean*/
	, seen
	/*: Array<mixed>*/
	, offline
	/*: boolean*/
	)
	/*: any*/
	{
	  if (value instanceof _ParseObject.default) {
	    if (disallowObjects) {
	      throw new Error('Parse Objects not allowed here');
	    }

	    var seenEntry = value.id ? value.className + ':' + value.id : value;

	    if (forcePointers || !seen || (0, _indexOf.default)(seen).call(seen, seenEntry) > -1 || value.dirty() || (0, _keys.default)(value._getServerData()).length < 1) {
	      var _context;

	      if (offline && (0, _startsWith.default)(_context = value._getId()).call(_context, 'local')) {
	        return value.toOfflinePointer();
	      }

	      return value.toPointer();
	    }

	    seen = (0, _concat.default)(seen).call(seen, seenEntry);
	    return value._toFullJSON(seen, offline);
	  }

	  if (value instanceof ParseOp.Op || value instanceof _ParseACL.default || value instanceof _ParseGeoPoint.default || value instanceof _ParsePolygon.default || value instanceof _ParseRelation.default) {
	    return value.toJSON();
	  }

	  if (value instanceof _ParseFile.default) {
	    if (!value.url()) {
	      throw new Error('Tried to encode an unsaved file.');
	    }

	    return value.toJSON();
	  }

	  if (Object.prototype.toString.call(value) === '[object Date]') {
	    if (isNaN(value)) {
	      throw new Error('Tried to encode an invalid date.');
	    }

	    return {
	      __type: 'Date',
	      iso: value
	      /*: any*/
	      .toJSON()
	    };
	  }

	  if (Object.prototype.toString.call(value) === '[object RegExp]' && typeof value.source === 'string') {
	    return value.source;
	  }

	  if ((0, _isArray.default)(value)) {
	    return (0, _map.default)(value).call(value, function (v) {
	      return encode(v, disallowObjects, forcePointers, seen, offline);
	    });
	  }

	  if (value && (0, _typeof2.default)(value) === 'object') {
	    var output = {};

	    for (var k in value) {
	      output[k] = encode(value[k], disallowObjects, forcePointers, seen, offline);
	    }

	    return output;
	  }

	  return value;
	}

	function _default(value
	/*: mixed*/
	, disallowObjects
	/*:: ?: boolean*/
	, forcePointers
	/*:: ?: boolean*/
	, seen
	/*:: ?: Array<mixed>*/
	, offline
	/*:: ?: boolean*/
	)
	/*: any*/
	{
	  return encode(value, !!disallowObjects, !!forcePointers, seen || [], offline);
	}
	});

	var unique_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = unique;

	var _indexOf = interopRequireDefault(indexOf$8);

	var _forEach = interopRequireDefault(forEach$4);

	var _arrayContainsObject = interopRequireDefault(arrayContainsObject_1);

	var _ParseObject = interopRequireDefault(ParseObject_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */


	function unique
	/*:: <T>*/
	(arr
	/*: Array<T>*/
	)
	/*: Array<T>*/
	{
	  var uniques = [];
	  (0, _forEach.default)(arr).call(arr, function (value) {
	    if (value instanceof _ParseObject.default) {
	      if (!(0, _arrayContainsObject.default)(uniques, value)) {
	        uniques.push(value);
	      }
	    } else {
	      if ((0, _indexOf.default)(uniques).call(uniques, value) < 0) {
	        uniques.push(value);
	      }
	    }
	  });
	  return uniques;
	}
	});

	var ParseOp = createCommonjsModule(function (module, exports) {







	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.UnsetOp = exports.SetOp = exports.RemoveOp = exports.RelationOp = exports.Op = exports.IncrementOp = exports.AddUniqueOp = exports.AddOp = void 0;
	exports.opFromJSON = opFromJSON;

	var _map = interopRequireDefault(map$9);

	var _splice = interopRequireDefault(splice$4);

	var _indexOf = interopRequireDefault(indexOf$8);

	var _forEach = interopRequireDefault(forEach$4);

	var _assertThisInitialized2 = interopRequireDefault(assertThisInitialized);

	var _inherits2 = interopRequireDefault(inherits);

	var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

	var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf$6);

	var _defineProperty2 = interopRequireDefault(defineProperty$b);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _concat = interopRequireDefault(concat$5);

	var _isArray = interopRequireDefault(isArray$3);

	var _arrayContainsObject = interopRequireDefault(arrayContainsObject_1);

	var _decode = interopRequireDefault(decode_1);

	var _encode = interopRequireDefault(encode_1);

	var _ParseObject = interopRequireDefault(ParseObject_1);

	var _ParseRelation = interopRequireDefault(ParseRelation_1);

	var _unique = interopRequireDefault(unique_1);

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();

	  return function () {
	    var Super = (0, _getPrototypeOf2.default)(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
	      result = construct$4(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return (0, _possibleConstructorReturn2.default)(this, result);
	  };
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !construct$4) return false;
	  if (construct$4.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(construct$4(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function opFromJSON(json
	/*: { [key: string]: any }*/
	)
	/*: ?Op*/
	{
	  if (!json || !json.__op) {
	    return null;
	  }

	  switch (json.__op) {
	    case 'Delete':
	      return new UnsetOp();

	    case 'Increment':
	      return new IncrementOp(json.amount);

	    case 'Add':
	      return new AddOp((0, _decode.default)(json.objects));

	    case 'AddUnique':
	      return new AddUniqueOp((0, _decode.default)(json.objects));

	    case 'Remove':
	      return new RemoveOp((0, _decode.default)(json.objects));

	    case 'AddRelation':
	      {
	        var toAdd = (0, _decode.default)(json.objects);

	        if (!(0, _isArray.default)(toAdd)) {
	          return new RelationOp([], []);
	        }

	        return new RelationOp(toAdd, []);
	      }

	    case 'RemoveRelation':
	      {
	        var toRemove = (0, _decode.default)(json.objects);

	        if (!(0, _isArray.default)(toRemove)) {
	          return new RelationOp([], []);
	        }

	        return new RelationOp([], toRemove);
	      }

	    case 'Batch':
	      {
	        var _toAdd = [];
	        var _toRemove = [];

	        for (var i = 0; i < json.ops.length; i++) {
	          if (json.ops[i].__op === 'AddRelation') {
	            _toAdd = (0, _concat.default)(_toAdd).call(_toAdd, (0, _decode.default)(json.ops[i].objects));
	          } else if (json.ops[i].__op === 'RemoveRelation') {
	            _toRemove = (0, _concat.default)(_toRemove).call(_toRemove, (0, _decode.default)(json.ops[i].objects));
	          }
	        }

	        return new RelationOp(_toAdd, _toRemove);
	      }
	  }

	  return null;
	}

	var Op = /*#__PURE__*/function () {
	  function Op() {
	    (0, _classCallCheck2.default)(this, Op);
	  }

	  (0, _createClass2.default)(Op, [{
	    key: "applyTo",
	    value: // Empty parent class
	    function ()
	    /*: mixed*/
	    {}
	    /* eslint-disable-line no-unused-vars */

	  }, {
	    key: "mergeWith",
	    value: function ()
	    /*: ?Op*/
	    {}
	    /* eslint-disable-line no-unused-vars */

	  }, {
	    key: "toJSON",
	    value: function ()
	    /*: mixed*/
	    {}
	  }]);
	  return Op;
	}();

	exports.Op = Op;

	var SetOp = /*#__PURE__*/function (_Op) {
	  (0, _inherits2.default)(SetOp, _Op);

	  var _super = _createSuper(SetOp);

	  function SetOp(value
	  /*: mixed*/
	  ) {
	    var _this;

	    (0, _classCallCheck2.default)(this, SetOp);
	    _this = _super.call(this);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_value", void 0);
	    _this._value = value;
	    return _this;
	  }

	  (0, _createClass2.default)(SetOp, [{
	    key: "applyTo",
	    value: function ()
	    /*: mixed*/
	    {
	      return this._value;
	    }
	  }, {
	    key: "mergeWith",
	    value: function ()
	    /*: SetOp*/
	    {
	      return new SetOp(this._value);
	    }
	  }, {
	    key: "toJSON",
	    value: function (offline
	    /*:: ?: boolean*/
	    ) {
	      return (0, _encode.default)(this._value, false, true, undefined, offline);
	    }
	  }]);
	  return SetOp;
	}(Op);

	exports.SetOp = SetOp;

	var UnsetOp = /*#__PURE__*/function (_Op2) {
	  (0, _inherits2.default)(UnsetOp, _Op2);

	  var _super2 = _createSuper(UnsetOp);

	  function UnsetOp() {
	    (0, _classCallCheck2.default)(this, UnsetOp);
	    return _super2.apply(this, arguments);
	  }

	  (0, _createClass2.default)(UnsetOp, [{
	    key: "applyTo",
	    value: function () {
	      return undefined;
	    }
	  }, {
	    key: "mergeWith",
	    value: function ()
	    /*: UnsetOp*/
	    {
	      return new UnsetOp();
	    }
	  }, {
	    key: "toJSON",
	    value: function ()
	    /*: { __op: string }*/
	    {
	      return {
	        __op: 'Delete'
	      };
	    }
	  }]);
	  return UnsetOp;
	}(Op);

	exports.UnsetOp = UnsetOp;

	var IncrementOp = /*#__PURE__*/function (_Op3) {
	  (0, _inherits2.default)(IncrementOp, _Op3);

	  var _super3 = _createSuper(IncrementOp);

	  function IncrementOp(amount
	  /*: number*/
	  ) {
	    var _this2;

	    (0, _classCallCheck2.default)(this, IncrementOp);
	    _this2 = _super3.call(this);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "_amount", void 0);

	    if (typeof amount !== 'number') {
	      throw new TypeError('Increment Op must be initialized with a numeric amount.');
	    }

	    _this2._amount = amount;
	    return _this2;
	  }

	  (0, _createClass2.default)(IncrementOp, [{
	    key: "applyTo",
	    value: function (value
	    /*: ?mixed*/
	    )
	    /*: number*/
	    {
	      if (typeof value === 'undefined') {
	        return this._amount;
	      }

	      if (typeof value !== 'number') {
	        throw new TypeError('Cannot increment a non-numeric value.');
	      }

	      return this._amount + value;
	    }
	  }, {
	    key: "mergeWith",
	    value: function (previous
	    /*: Op*/
	    )
	    /*: Op*/
	    {
	      if (!previous) {
	        return this;
	      }

	      if (previous instanceof SetOp) {
	        return new SetOp(this.applyTo(previous._value));
	      }

	      if (previous instanceof UnsetOp) {
	        return new SetOp(this._amount);
	      }

	      if (previous instanceof IncrementOp) {
	        return new IncrementOp(this.applyTo(previous._amount));
	      }

	      throw new Error('Cannot merge Increment Op with the previous Op');
	    }
	  }, {
	    key: "toJSON",
	    value: function ()
	    /*: { __op: string, amount: number }*/
	    {
	      return {
	        __op: 'Increment',
	        amount: this._amount
	      };
	    }
	  }]);
	  return IncrementOp;
	}(Op);

	exports.IncrementOp = IncrementOp;

	var AddOp = /*#__PURE__*/function (_Op4) {
	  (0, _inherits2.default)(AddOp, _Op4);

	  var _super4 = _createSuper(AddOp);

	  function AddOp(value
	  /*: mixed | Array<mixed>*/
	  ) {
	    var _this3;

	    (0, _classCallCheck2.default)(this, AddOp);
	    _this3 = _super4.call(this);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), "_value", void 0);
	    _this3._value = (0, _isArray.default)(value) ? value : [value];
	    return _this3;
	  }

	  (0, _createClass2.default)(AddOp, [{
	    key: "applyTo",
	    value: function (value
	    /*: mixed*/
	    )
	    /*: Array<mixed>*/
	    {
	      if (value == null) {
	        return this._value;
	      }

	      if ((0, _isArray.default)(value)) {
	        return (0, _concat.default)(value).call(value, this._value);
	      }

	      throw new Error('Cannot add elements to a non-array value');
	    }
	  }, {
	    key: "mergeWith",
	    value: function (previous
	    /*: Op*/
	    )
	    /*: Op*/
	    {
	      if (!previous) {
	        return this;
	      }

	      if (previous instanceof SetOp) {
	        return new SetOp(this.applyTo(previous._value));
	      }

	      if (previous instanceof UnsetOp) {
	        return new SetOp(this._value);
	      }

	      if (previous instanceof AddOp) {
	        return new AddOp(this.applyTo(previous._value));
	      }

	      throw new Error('Cannot merge Add Op with the previous Op');
	    }
	  }, {
	    key: "toJSON",
	    value: function ()
	    /*: { __op: string, objects: mixed }*/
	    {
	      return {
	        __op: 'Add',
	        objects: (0, _encode.default)(this._value, false, true)
	      };
	    }
	  }]);
	  return AddOp;
	}(Op);

	exports.AddOp = AddOp;

	var AddUniqueOp = /*#__PURE__*/function (_Op5) {
	  (0, _inherits2.default)(AddUniqueOp, _Op5);

	  var _super5 = _createSuper(AddUniqueOp);

	  function AddUniqueOp(value
	  /*: mixed | Array<mixed>*/
	  ) {
	    var _this4;

	    (0, _classCallCheck2.default)(this, AddUniqueOp);
	    _this4 = _super5.call(this);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this4), "_value", void 0);
	    _this4._value = (0, _unique.default)((0, _isArray.default)(value) ? value : [value]);
	    return _this4;
	  }

	  (0, _createClass2.default)(AddUniqueOp, [{
	    key: "applyTo",
	    value: function (value
	    /*: mixed | Array<mixed>*/
	    )
	    /*: Array<mixed>*/
	    {
	      if (value == null) {
	        return this._value || [];
	      }

	      if ((0, _isArray.default)(value)) {
	        var _context;

	        var toAdd = [];
	        (0, _forEach.default)(_context = this._value).call(_context, function (v) {
	          if (v instanceof _ParseObject.default) {
	            if (!(0, _arrayContainsObject.default)(value, v)) {
	              toAdd.push(v);
	            }
	          } else {
	            if ((0, _indexOf.default)(value).call(value, v) < 0) {
	              toAdd.push(v);
	            }
	          }
	        });
	        return (0, _concat.default)(value).call(value, toAdd);
	      }

	      throw new Error('Cannot add elements to a non-array value');
	    }
	  }, {
	    key: "mergeWith",
	    value: function (previous
	    /*: Op*/
	    )
	    /*: Op*/
	    {
	      if (!previous) {
	        return this;
	      }

	      if (previous instanceof SetOp) {
	        return new SetOp(this.applyTo(previous._value));
	      }

	      if (previous instanceof UnsetOp) {
	        return new SetOp(this._value);
	      }

	      if (previous instanceof AddUniqueOp) {
	        return new AddUniqueOp(this.applyTo(previous._value));
	      }

	      throw new Error('Cannot merge AddUnique Op with the previous Op');
	    }
	  }, {
	    key: "toJSON",
	    value: function ()
	    /*: { __op: string, objects: mixed }*/
	    {
	      return {
	        __op: 'AddUnique',
	        objects: (0, _encode.default)(this._value, false, true)
	      };
	    }
	  }]);
	  return AddUniqueOp;
	}(Op);

	exports.AddUniqueOp = AddUniqueOp;

	var RemoveOp = /*#__PURE__*/function (_Op6) {
	  (0, _inherits2.default)(RemoveOp, _Op6);

	  var _super6 = _createSuper(RemoveOp);

	  function RemoveOp(value
	  /*: mixed | Array<mixed>*/
	  ) {
	    var _this5;

	    (0, _classCallCheck2.default)(this, RemoveOp);
	    _this5 = _super6.call(this);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this5), "_value", void 0);
	    _this5._value = (0, _unique.default)((0, _isArray.default)(value) ? value : [value]);
	    return _this5;
	  }

	  (0, _createClass2.default)(RemoveOp, [{
	    key: "applyTo",
	    value: function (value
	    /*: mixed | Array<mixed>*/
	    )
	    /*: Array<mixed>*/
	    {
	      if (value == null) {
	        return [];
	      }

	      if ((0, _isArray.default)(value)) {
	        // var i = value.indexOf(this._value);
	        var removed = (0, _concat.default)(value).call(value, []);

	        for (var i = 0; i < this._value.length; i++) {
	          var index = (0, _indexOf.default)(removed).call(removed, this._value[i]);

	          while (index > -1) {
	            (0, _splice.default)(removed).call(removed, index, 1);
	            index = (0, _indexOf.default)(removed).call(removed, this._value[i]);
	          }

	          if (this._value[i] instanceof _ParseObject.default && this._value[i].id) {
	            for (var j = 0; j < removed.length; j++) {
	              if (removed[j] instanceof _ParseObject.default && this._value[i].id === removed[j].id) {
	                (0, _splice.default)(removed).call(removed, j, 1);
	                j--;
	              }
	            }
	          }
	        }

	        return removed;
	      }

	      throw new Error('Cannot remove elements from a non-array value');
	    }
	  }, {
	    key: "mergeWith",
	    value: function (previous
	    /*: Op*/
	    )
	    /*: Op*/
	    {
	      if (!previous) {
	        return this;
	      }

	      if (previous instanceof SetOp) {
	        return new SetOp(this.applyTo(previous._value));
	      }

	      if (previous instanceof UnsetOp) {
	        return new UnsetOp();
	      }

	      if (previous instanceof RemoveOp) {
	        var _context2;

	        var uniques = (0, _concat.default)(_context2 = previous._value).call(_context2, []);

	        for (var i = 0; i < this._value.length; i++) {
	          if (this._value[i] instanceof _ParseObject.default) {
	            if (!(0, _arrayContainsObject.default)(uniques, this._value[i])) {
	              uniques.push(this._value[i]);
	            }
	          } else {
	            if ((0, _indexOf.default)(uniques).call(uniques, this._value[i]) < 0) {
	              uniques.push(this._value[i]);
	            }
	          }
	        }

	        return new RemoveOp(uniques);
	      }

	      throw new Error('Cannot merge Remove Op with the previous Op');
	    }
	  }, {
	    key: "toJSON",
	    value: function ()
	    /*: { __op: string, objects: mixed }*/
	    {
	      return {
	        __op: 'Remove',
	        objects: (0, _encode.default)(this._value, false, true)
	      };
	    }
	  }]);
	  return RemoveOp;
	}(Op);

	exports.RemoveOp = RemoveOp;

	var RelationOp = /*#__PURE__*/function (_Op7) {
	  (0, _inherits2.default)(RelationOp, _Op7);

	  var _super7 = _createSuper(RelationOp);

	  function RelationOp(adds
	  /*: Array<ParseObject | string>*/
	  , removes
	  /*: Array<ParseObject | string>*/
	  ) {
	    var _this6;

	    (0, _classCallCheck2.default)(this, RelationOp);
	    _this6 = _super7.call(this);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), "_targetClassName", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), "relationsToAdd", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), "relationsToRemove", void 0);
	    _this6._targetClassName = null;

	    if ((0, _isArray.default)(adds)) {
	      _this6.relationsToAdd = (0, _unique.default)((0, _map.default)(adds).call(adds, _this6._extractId, (0, _assertThisInitialized2.default)(_this6)));
	    }

	    if ((0, _isArray.default)(removes)) {
	      _this6.relationsToRemove = (0, _unique.default)((0, _map.default)(removes).call(removes, _this6._extractId, (0, _assertThisInitialized2.default)(_this6)));
	    }

	    return _this6;
	  }

	  (0, _createClass2.default)(RelationOp, [{
	    key: "_extractId",
	    value: function (obj
	    /*: string | ParseObject*/
	    )
	    /*: string*/
	    {
	      if (typeof obj === 'string') {
	        return obj;
	      }

	      if (!obj.id) {
	        throw new Error('You cannot add or remove an unsaved Parse Object from a relation');
	      }

	      if (!this._targetClassName) {
	        this._targetClassName = obj.className;
	      }

	      if (this._targetClassName !== obj.className) {
	        throw new Error('Tried to create a Relation with 2 different object types: ' + this._targetClassName + ' and ' + obj.className + '.');
	      }

	      return obj.id;
	    }
	  }, {
	    key: "applyTo",
	    value: function (value
	    /*: mixed*/
	    , object
	    /*:: ?: { className: string, id: ?string }*/
	    , key
	    /*:: ?: string*/
	    )
	    /*: ?ParseRelation*/
	    {
	      if (!value) {
	        var _context3;

	        if (!object || !key) {
	          throw new Error('Cannot apply a RelationOp without either a previous value, or an object and a key');
	        }

	        var parent = new _ParseObject.default(object.className);

	        if (object.id && (0, _indexOf.default)(_context3 = object.id).call(_context3, 'local') === 0) {
	          parent._localId = object.id;
	        } else if (object.id) {
	          parent.id = object.id;
	        }

	        var relation = new _ParseRelation.default(parent, key);
	        relation.targetClassName = this._targetClassName;
	        return relation;
	      }

	      if (value instanceof _ParseRelation.default) {
	        if (this._targetClassName) {
	          if (value.targetClassName) {
	            if (this._targetClassName !== value.targetClassName) {
	              throw new Error('Related object must be a ' + value.targetClassName + ', but a ' + this._targetClassName + ' was passed in.');
	            }
	          } else {
	            value.targetClassName = this._targetClassName;
	          }
	        }

	        return value;
	      } else {
	        throw new Error('Relation cannot be applied to a non-relation field');
	      }
	    }
	  }, {
	    key: "mergeWith",
	    value: function (previous
	    /*: Op*/
	    )
	    /*: Op*/
	    {
	      if (!previous) {
	        return this;
	      } else if (previous instanceof UnsetOp) {
	        throw new Error('You cannot modify a relation after deleting it.');
	      } else if (previous instanceof SetOp && previous._value instanceof _ParseRelation.default) {
	        return this;
	      } else if (previous instanceof RelationOp) {
	        var _context4, _context5, _context6, _context7, _context8, _context9;

	        if (previous._targetClassName && previous._targetClassName !== this._targetClassName) {
	          throw new Error('Related object must be of class ' + previous._targetClassName + ', but ' + (this._targetClassName || 'null') + ' was passed in.');
	        }

	        var newAdd = (0, _concat.default)(_context4 = previous.relationsToAdd).call(_context4, []);
	        (0, _forEach.default)(_context5 = this.relationsToRemove).call(_context5, function (r) {
	          var index = (0, _indexOf.default)(newAdd).call(newAdd, r);

	          if (index > -1) {
	            (0, _splice.default)(newAdd).call(newAdd, index, 1);
	          }
	        });
	        (0, _forEach.default)(_context6 = this.relationsToAdd).call(_context6, function (r) {
	          var index = (0, _indexOf.default)(newAdd).call(newAdd, r);

	          if (index < 0) {
	            newAdd.push(r);
	          }
	        });
	        var newRemove = (0, _concat.default)(_context7 = previous.relationsToRemove).call(_context7, []);
	        (0, _forEach.default)(_context8 = this.relationsToAdd).call(_context8, function (r) {
	          var index = (0, _indexOf.default)(newRemove).call(newRemove, r);

	          if (index > -1) {
	            (0, _splice.default)(newRemove).call(newRemove, index, 1);
	          }
	        });
	        (0, _forEach.default)(_context9 = this.relationsToRemove).call(_context9, function (r) {
	          var index = (0, _indexOf.default)(newRemove).call(newRemove, r);

	          if (index < 0) {
	            newRemove.push(r);
	          }
	        });
	        var newRelation = new RelationOp(newAdd, newRemove);
	        newRelation._targetClassName = this._targetClassName;
	        return newRelation;
	      }

	      throw new Error('Cannot merge Relation Op with the previous Op');
	    }
	  }, {
	    key: "toJSON",
	    value: function ()
	    /*: { __op?: string, objects?: mixed, ops?: mixed }*/
	    {
	      var _this7 = this;

	      var idToPointer = function (id) {
	        return {
	          __type: 'Pointer',
	          className: _this7._targetClassName,
	          objectId: id
	        };
	      };

	      var adds = null;
	      var removes = null;
	      var pointers = null;

	      if (this.relationsToAdd.length > 0) {
	        var _context10;

	        pointers = (0, _map.default)(_context10 = this.relationsToAdd).call(_context10, idToPointer);
	        adds = {
	          __op: 'AddRelation',
	          objects: pointers
	        };
	      }

	      if (this.relationsToRemove.length > 0) {
	        var _context11;

	        pointers = (0, _map.default)(_context11 = this.relationsToRemove).call(_context11, idToPointer);
	        removes = {
	          __op: 'RemoveRelation',
	          objects: pointers
	        };
	      }

	      if (adds && removes) {
	        return {
	          __op: 'Batch',
	          ops: [adds, removes]
	        };
	      }

	      return adds || removes || {};
	    }
	  }]);
	  return RelationOp;
	}(Op);

	exports.RelationOp = RelationOp;
	});

	var $propertyIsEnumerable$2 = objectPropertyIsEnumerable.f;

	var propertyIsEnumerable = functionUncurryThis($propertyIsEnumerable$2);
	var push$7 = functionUncurryThis([].push);

	// `Object.{ entries, values }` methods implementation
	var createMethod$3 = function (TO_ENTRIES) {
	  return function (it) {
	    var O = toIndexedObject(it);
	    var keys = objectKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) {
	      key = keys[i++];
	      if (!descriptors || propertyIsEnumerable(O, key)) {
	        push$7(result, TO_ENTRIES ? [key, O[key]] : O[key]);
	      }
	    }
	    return result;
	  };
	};

	var objectToArray = {
	  // `Object.entries` method
	  // https://tc39.es/ecma262/#sec-object.entries
	  entries: createMethod$3(true),
	  // `Object.values` method
	  // https://tc39.es/ecma262/#sec-object.values
	  values: createMethod$3(false)
	};

	var $entries = objectToArray.entries;

	// `Object.entries` method
	// https://tc39.es/ecma262/#sec-object.entries
	_export({ target: 'Object', stat: true }, {
	  entries: function entries(O) {
	    return $entries(O);
	  }
	});

	var entries = path.Object.entries;

	var entries$1 = entries;

	var entries$2 = entries$1;

	var arrayWithoutHoles = createCommonjsModule(function (module) {
	function _arrayWithoutHoles(arr) {
	  if (isArray$7(arr)) return arrayLikeToArray(arr);
	}

	module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var iterableToArray = createCommonjsModule(function (module) {
	function _iterableToArray(iter) {
	  if (typeof symbol$5 !== "undefined" && getIteratorMethod$5(iter) != null || iter["@@iterator"] != null) return from$7(iter);
	}

	module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var nonIterableSpread = createCommonjsModule(function (module) {
	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var toConsumableArray = createCommonjsModule(function (module) {
	function _toConsumableArray(arr) {
	  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
	}

	module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var floor$1 = Math.floor;

	var mergeSort = function (array, comparefn) {
	  var length = array.length;
	  var middle = floor$1(length / 2);
	  return length < 8 ? insertionSort(array, comparefn) : merge(
	    array,
	    mergeSort(arraySliceSimple(array, 0, middle), comparefn),
	    mergeSort(arraySliceSimple(array, middle), comparefn),
	    comparefn
	  );
	};

	var insertionSort = function (array, comparefn) {
	  var length = array.length;
	  var i = 1;
	  var element, j;

	  while (i < length) {
	    j = i;
	    element = array[i];
	    while (j && comparefn(array[j - 1], element) > 0) {
	      array[j] = array[--j];
	    }
	    if (j !== i++) array[j] = element;
	  } return array;
	};

	var merge = function (array, left, right, comparefn) {
	  var llength = left.length;
	  var rlength = right.length;
	  var lindex = 0;
	  var rindex = 0;

	  while (lindex < llength || rindex < rlength) {
	    array[lindex + rindex] = (lindex < llength && rindex < rlength)
	      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]
	      : lindex < llength ? left[lindex++] : right[rindex++];
	  } return array;
	};

	var arraySort = mergeSort;

	var firefox = engineUserAgent.match(/firefox\/(\d+)/i);

	var engineFfVersion = !!firefox && +firefox[1];

	var engineIsIeOrEdge = /MSIE|Trident/.test(engineUserAgent);

	var webkit = engineUserAgent.match(/AppleWebKit\/(\d+)\./);

	var engineWebkitVersion = !!webkit && +webkit[1];

	var test$1 = [];
	var un$Sort = functionUncurryThis(test$1.sort);
	var push$8 = functionUncurryThis(test$1.push);

	// IE8-
	var FAILS_ON_UNDEFINED = fails(function () {
	  test$1.sort(undefined);
	});
	// V8 bug
	var FAILS_ON_NULL = fails(function () {
	  test$1.sort(null);
	});
	// Old WebKit
	var STRICT_METHOD$2 = arrayMethodIsStrict('sort');

	var STABLE_SORT = !fails(function () {
	  // feature detection can be too slow, so check engines versions
	  if (engineV8Version) return engineV8Version < 70;
	  if (engineFfVersion && engineFfVersion > 3) return;
	  if (engineIsIeOrEdge) return true;
	  if (engineWebkitVersion) return engineWebkitVersion < 603;

	  var result = '';
	  var code, chr, value, index;

	  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
	  for (code = 65; code < 76; code++) {
	    chr = String.fromCharCode(code);

	    switch (code) {
	      case 66: case 69: case 70: case 72: value = 3; break;
	      case 68: case 71: value = 4; break;
	      default: value = 2;
	    }

	    for (index = 0; index < 47; index++) {
	      test$1.push({ k: chr + index, v: value });
	    }
	  }

	  test$1.sort(function (a, b) { return b.v - a.v; });

	  for (index = 0; index < test$1.length; index++) {
	    chr = test$1[index].k.charAt(0);
	    if (result.charAt(result.length - 1) !== chr) result += chr;
	  }

	  return result !== 'DGBEFHACIJK';
	});

	var FORCED$4 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$2 || !STABLE_SORT;

	var getSortCompare = function (comparefn) {
	  return function (x, y) {
	    if (y === undefined) return -1;
	    if (x === undefined) return 1;
	    if (comparefn !== undefined) return +comparefn(x, y) || 0;
	    return toString$3(x) > toString$3(y) ? 1 : -1;
	  };
	};

	// `Array.prototype.sort` method
	// https://tc39.es/ecma262/#sec-array.prototype.sort
	_export({ target: 'Array', proto: true, forced: FORCED$4 }, {
	  sort: function sort(comparefn) {
	    if (comparefn !== undefined) aCallable(comparefn);

	    var array = toObject(this);

	    if (STABLE_SORT) return comparefn === undefined ? un$Sort(array) : un$Sort(array, comparefn);

	    var items = [];
	    var arrayLength = lengthOfArrayLike(array);
	    var itemsLength, index;

	    for (index = 0; index < arrayLength; index++) {
	      if (index in array) push$8(items, array[index]);
	    }

	    arraySort(items, getSortCompare(comparefn));

	    itemsLength = items.length;
	    index = 0;

	    while (index < itemsLength) array[index] = items[index++];
	    while (index < arrayLength) delete array[index++];

	    return array;
	  }
	});

	var sort = entryVirtual('Array').sort;

	var ArrayPrototype$a = Array.prototype;

	var sort$1 = function (it) {
	  var own = it.sort;
	  return it === ArrayPrototype$a || (objectIsPrototypeOf(ArrayPrototype$a, it) && own === ArrayPrototype$a.sort) ? sort : own;
	};

	var sort$2 = sort$1;

	var sort$3 = sort$2;

	var keys$4 = entryVirtual('Array').keys;

	var keys$5 = keys$4;

	var ArrayPrototype$b = Array.prototype;

	var DOMIterables$1 = {
	  DOMTokenList: true,
	  NodeList: true
	};

	var keys$6 = function (it) {
	  var own = it.keys;
	  return it === ArrayPrototype$b || (objectIsPrototypeOf(ArrayPrototype$b, it) && own === ArrayPrototype$b.keys)
	    || hasOwnProperty_1(DOMIterables$1, classof(it)) ? keys$5 : own;
	};

	var keys$7 = keys$6;

	var promiseUtils = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.continueWhile = continueWhile;
	exports.resolvingPromise = resolvingPromise;
	exports.when = when;

	var _isArray = interopRequireDefault(isArray$3);

	var _promise = interopRequireDefault(promise$3); // Create Deferred Promise


	function resolvingPromise() {
	  var res;
	  var rej;
	  var promise = new _promise.default(function (resolve, reject) {
	    res = resolve;
	    rej = reject;
	  });
	  promise.resolve = res;
	  promise.reject = rej;
	  return promise;
	}

	function when(promises) {
	  var objects;
	  var arrayArgument = (0, _isArray.default)(promises);

	  if (arrayArgument) {
	    objects = promises;
	  } else {
	    objects = arguments;
	  }

	  var total = objects.length;
	  var hadError = false;
	  var results = [];
	  var returnValue = arrayArgument ? [results] : results;
	  var errors = [];
	  results.length = objects.length;
	  errors.length = objects.length;

	  if (total === 0) {
	    return _promise.default.resolve(returnValue);
	  }

	  var promise = new resolvingPromise();

	  var resolveOne = function () {
	    total--;

	    if (total <= 0) {
	      if (hadError) {
	        promise.reject(errors);
	      } else {
	        promise.resolve(returnValue);
	      }
	    }
	  };

	  var chain = function (object, index) {
	    if (object && typeof object.then === 'function') {
	      object.then(function (result) {
	        results[index] = result;
	        resolveOne();
	      }, function (error) {
	        errors[index] = error;
	        hadError = true;
	        resolveOne();
	      });
	    } else {
	      results[index] = object;
	      resolveOne();
	    }
	  };

	  for (var i = 0; i < objects.length; i++) {
	    chain(objects[i], i);
	  }

	  return promise;
	}

	function continueWhile(test, emitter) {
	  if (test()) {
	    return emitter().then(function () {
	      return continueWhile(test, emitter);
	    });
	  }

	  return _promise.default.resolve();
	}
	});

	var floor$2 = Math.floor;

	// `IsIntegralNumber` abstract operation
	// https://tc39.es/ecma262/#sec-isintegralnumber
	// eslint-disable-next-line es-x/no-number-isinteger -- safe
	var isIntegralNumber = Number.isInteger || function isInteger(it) {
	  return !isObject(it) && isFinite(it) && floor$2(it) === it;
	};

	// `Number.isInteger` method
	// https://tc39.es/ecma262/#sec-number.isinteger
	_export({ target: 'Number', stat: true }, {
	  isInteger: isIntegralNumber
	});

	var isInteger = path.Number.isInteger;

	var isInteger$1 = isInteger;

	var isInteger$2 = isInteger$1;

	var equals_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = equals;

	var _keys = interopRequireDefault(keys$3);

	var _isArray = interopRequireDefault(isArray$3);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _ParseACL = interopRequireDefault(ParseACL_1);

	var _ParseFile = interopRequireDefault(ParseFile_1);

	var _ParseGeoPoint = interopRequireDefault(ParseGeoPoint_1);

	var _ParseObject = interopRequireDefault(ParseObject_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */


	function equals(a, b) {
	  var toString = Object.prototype.toString;

	  if (toString.call(a) === '[object Date]' || toString.call(b) === '[object Date]') {
	    var dateA = new Date(a);
	    var dateB = new Date(b);
	    return +dateA === +dateB;
	  }

	  if ((0, _typeof2.default)(a) !== (0, _typeof2.default)(b)) {
	    return false;
	  }

	  if (!a || (0, _typeof2.default)(a) !== 'object') {
	    // a is a primitive
	    return a === b;
	  }

	  if ((0, _isArray.default)(a) || (0, _isArray.default)(b)) {
	    if (!(0, _isArray.default)(a) || !(0, _isArray.default)(b)) {
	      return false;
	    }

	    if (a.length !== b.length) {
	      return false;
	    }

	    for (var i = a.length; i--;) {
	      if (!equals(a[i], b[i])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  if (a instanceof _ParseACL.default || a instanceof _ParseFile.default || a instanceof _ParseGeoPoint.default || a instanceof _ParseObject.default) {
	    return a.equals(b);
	  }

	  if (b instanceof _ParseObject.default) {
	    if (a.__type === 'Object' || a.__type === 'Pointer') {
	      return a.objectId === b.id && a.className === b.className;
	    }
	  }

	  if ((0, _keys.default)(a).length !== (0, _keys.default)(b).length) {
	    return false;
	  }

	  for (var k in a) {
	    if (!equals(a[k], b[k])) {
	      return false;
	    }
	  }

	  return true;
	}
	});

	var _keys = interopRequireDefault(keys$3);

	var _forEach$1 = interopRequireDefault(forEach$4);

	var _map = interopRequireDefault(map$9);

	var _concat$1 = interopRequireDefault(concat$5);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _isInteger = interopRequireDefault(isInteger$2);

	var _slicedToArray2 = interopRequireDefault(slicedToArray);

	var _slice = interopRequireDefault(slice$3);

	var _filter = interopRequireDefault(filter$3);

	var _isArray = interopRequireDefault(isArray$3);

	var _indexOf = interopRequireDefault(indexOf$8);

	function _createForOfIteratorHelper(o, allowArrayLike) {
	  var it = typeof symbol$6 !== "undefined" && getIteratorMethod$5(o) || o["@@iterator"];

	  if (!it) {
	    if (isArray$3(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function () {};

	      return {
	        s: F,
	        n: function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function (_e) {
	          throw _e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function () {
	      it = it.call(o);
	    },
	    n: function () {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function (_e2) {
	      didErr = true;
	      err = _e2;
	    },
	    f: function () {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	function _unsupportedIterableToArray(o, minLen) {
	  var _context6;

	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);

	  var n = slice$3(_context6 = Object.prototype.toString.call(o)).call(_context6, 8, -1);

	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return from$3(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	var equalObjects = equals_1.default;

	var decode = decode_1.default;

	var ParseError = ParseError_1.default;

	var ParsePolygon = ParsePolygon_1.default;

	var ParseGeoPoint = ParseGeoPoint_1.default;
	/**
	 * contains -- Determines if an object is contained in a list with special handling for Parse pointers.
	 *
	 * @param haystack
	 * @param needle
	 * @private
	 * @returns {boolean}
	 */


	function contains(haystack, needle) {
	  if (needle && needle.__type && (needle.__type === 'Pointer' || needle.__type === 'Object')) {
	    for (var i in haystack) {
	      var ptr = haystack[i];

	      if (typeof ptr === 'string' && ptr === needle.objectId) {
	        return true;
	      }

	      if (ptr.className === needle.className && ptr.objectId === needle.objectId) {
	        return true;
	      }
	    }

	    return false;
	  }

	  return (0, _indexOf.default)(haystack).call(haystack, needle) > -1;
	}

	function transformObject(object) {
	  if (object._toFullJSON) {
	    return object._toFullJSON();
	  }

	  return object;
	}
	/**
	 * matchesQuery -- Determines if an object would be returned by a Parse Query
	 * It's a lightweight, where-clause only implementation of a full query engine.
	 * Since we find queries that match objects, rather than objects that match
	 * queries, we can avoid building a full-blown query tool.
	 *
	 * @param className
	 * @param object
	 * @param objects
	 * @param query
	 * @private
	 * @returns {boolean}
	 */


	function matchesQuery(className, object, objects, query) {
	  if (object.className !== className) {
	    return false;
	  }

	  var obj = object;
	  var q = query;

	  if (object.toJSON) {
	    obj = object.toJSON();
	  }

	  if (query.toJSON) {
	    q = query.toJSON().where;
	  }

	  obj.className = className;

	  for (var field in q) {
	    if (!matchesKeyConstraints(className, obj, objects, field, q[field])) {
	      return false;
	    }
	  }

	  return true;
	}

	function equalObjectsGeneric(obj, compareTo, eqlFn) {
	  if ((0, _isArray.default)(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      if (eqlFn(obj[i], compareTo)) {
	        return true;
	      }
	    }

	    return false;
	  }

	  return eqlFn(obj, compareTo);
	}
	/**
	 * @typedef RelativeTimeToDateResult
	 * @property {string} status The conversion status, `error` if conversion failed or
	 * `success` if conversion succeeded.
	 * @property {string} info The error message if conversion failed, or the relative
	 * time indication (`past`, `present`, `future`) if conversion succeeded.
	 * @property {Date|undefined} result The converted date, or `undefined` if conversion
	 * failed.
	 */

	/**
	 * Converts human readable relative date string, for example, 'in 10 days' to a date
	 * relative to now.
	 *
	 * @param {string} text The text to convert.
	 * @param {Date} [now=new Date()] The date from which add or subtract. Default is now.
	 * @returns {RelativeTimeToDateResult}
	 */


	function relativeTimeToDate(text) {
	  var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();
	  text = text.toLowerCase();
	  var parts = text.split(' '); // Filter out whitespace

	  parts = (0, _filter.default)(parts).call(parts, function (part) {
	    return part !== '';
	  });
	  var future = parts[0] === 'in';
	  var past = parts[parts.length - 1] === 'ago';

	  if (!future && !past && text !== 'now') {
	    return {
	      status: 'error',
	      info: "Time should either start with 'in' or end with 'ago'"
	    };
	  }

	  if (future && past) {
	    return {
	      status: 'error',
	      info: "Time cannot have both 'in' and 'ago'"
	    };
	  } // strip the 'ago' or 'in'


	  if (future) {
	    parts = (0, _slice.default)(parts).call(parts, 1);
	  } else {
	    // past
	    parts = (0, _slice.default)(parts).call(parts, 0, parts.length - 1);
	  }

	  if (parts.length % 2 !== 0 && text !== 'now') {
	    return {
	      status: 'error',
	      info: 'Invalid time string. Dangling unit or number.'
	    };
	  }

	  var pairs = [];

	  while (parts.length) {
	    pairs.push([parts.shift(), parts.shift()]);
	  }

	  var seconds = 0;

	  for (var _i = 0, _pairs = pairs; _i < _pairs.length; _i++) {
	    var _pairs$_i = (0, _slicedToArray2.default)(_pairs[_i], 2),
	        num = _pairs$_i[0],
	        interval = _pairs$_i[1];

	    var val = Number(num);

	    if (!(0, _isInteger.default)(val)) {
	      return {
	        status: 'error',
	        info: "'".concat(num, "' is not an integer.")
	      };
	    }

	    switch (interval) {
	      case 'yr':
	      case 'yrs':
	      case 'year':
	      case 'years':
	        seconds += val * 31536000; // 365 * 24 * 60 * 60

	        break;

	      case 'wk':
	      case 'wks':
	      case 'week':
	      case 'weeks':
	        seconds += val * 604800; // 7 * 24 * 60 * 60

	        break;

	      case 'd':
	      case 'day':
	      case 'days':
	        seconds += val * 86400; // 24 * 60 * 60

	        break;

	      case 'hr':
	      case 'hrs':
	      case 'hour':
	      case 'hours':
	        seconds += val * 3600; // 60 * 60

	        break;

	      case 'min':
	      case 'mins':
	      case 'minute':
	      case 'minutes':
	        seconds += val * 60;
	        break;

	      case 'sec':
	      case 'secs':
	      case 'second':
	      case 'seconds':
	        seconds += val;
	        break;

	      default:
	        return {
	          status: 'error',
	          info: "Invalid interval: '".concat(interval, "'")
	        };
	    }
	  }

	  var milliseconds = seconds * 1000;

	  if (future) {
	    return {
	      status: 'success',
	      info: 'future',
	      result: new Date(now.valueOf() + milliseconds)
	    };
	  } else if (past) {
	    return {
	      status: 'success',
	      info: 'past',
	      result: new Date(now.valueOf() - milliseconds)
	    };
	  } else {
	    return {
	      status: 'success',
	      info: 'present',
	      result: new Date(now.valueOf())
	    };
	  }
	}
	/**
	 * Determines whether an object matches a single key's constraints
	 *
	 * @param className
	 * @param object
	 * @param objects
	 * @param key
	 * @param constraints
	 * @private
	 * @returns {boolean}
	 */


	function matchesKeyConstraints(className, object, objects, key, constraints) {
	  if (constraints === null) {
	    return false;
	  }

	  if ((0, _indexOf.default)(key).call(key, '.') >= 0) {
	    // Key references a subobject
	    var keyComponents = key.split('.');
	    var subObjectKey = keyComponents[0];
	    var keyRemainder = (0, _slice.default)(keyComponents).call(keyComponents, 1).join('.');
	    return matchesKeyConstraints(className, object[subObjectKey] || {}, objects, keyRemainder, constraints);
	  }

	  var i;

	  if (key === '$or') {
	    for (i = 0; i < constraints.length; i++) {
	      if (matchesQuery(className, object, objects, constraints[i])) {
	        return true;
	      }
	    }

	    return false;
	  }

	  if (key === '$and') {
	    for (i = 0; i < constraints.length; i++) {
	      if (!matchesQuery(className, object, objects, constraints[i])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  if (key === '$nor') {
	    for (i = 0; i < constraints.length; i++) {
	      if (matchesQuery(className, object, objects, constraints[i])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  if (key === '$relatedTo') {
	    // Bail! We can't handle relational queries locally
	    return false;
	  }

	  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(key)) {
	    throw new ParseError(ParseError.INVALID_KEY_NAME, "Invalid Key: ".concat(key));
	  } // Equality (or Array contains) cases


	  if ((0, _typeof2.default)(constraints) !== 'object') {
	    if ((0, _isArray.default)(object[key])) {
	      var _context;

	      return (0, _indexOf.default)(_context = object[key]).call(_context, constraints) > -1;
	    }

	    return object[key] === constraints;
	  }

	  var compareTo;

	  if (constraints.__type) {
	    if (constraints.__type === 'Pointer') {
	      return equalObjectsGeneric(object[key], constraints, function (obj, ptr) {
	        return typeof obj !== 'undefined' && ptr.className === obj.className && ptr.objectId === obj.objectId;
	      });
	    }

	    return equalObjectsGeneric(decode(object[key]), decode(constraints), equalObjects);
	  } // More complex cases


	  for (var condition in constraints) {
	    compareTo = constraints[condition];

	    if (compareTo.__type) {
	      compareTo = decode(compareTo);
	    } // is it a $relativeTime? convert to date


	    if (compareTo['$relativeTime']) {
	      var parserResult = relativeTimeToDate(compareTo['$relativeTime']);

	      if (parserResult.status !== 'success') {
	        var _context2;

	        throw new ParseError(ParseError.INVALID_JSON, (0, _concat$1.default)(_context2 = "bad $relativeTime (".concat(key, ") value. ")).call(_context2, parserResult.info));
	      }

	      compareTo = parserResult.result;
	    } // Compare Date Object or Date String


	    if (toString.call(compareTo) === '[object Date]' || typeof compareTo === 'string' && new Date(compareTo) !== 'Invalid Date' && !isNaN(new Date(compareTo))) {
	      object[key] = new Date(object[key].iso ? object[key].iso : object[key]);
	    }

	    switch (condition) {
	      case '$lt':
	        if (object[key] >= compareTo) {
	          return false;
	        }

	        break;

	      case '$lte':
	        if (object[key] > compareTo) {
	          return false;
	        }

	        break;

	      case '$gt':
	        if (object[key] <= compareTo) {
	          return false;
	        }

	        break;

	      case '$gte':
	        if (object[key] < compareTo) {
	          return false;
	        }

	        break;

	      case '$ne':
	        if (equalObjects(object[key], compareTo)) {
	          return false;
	        }

	        break;

	      case '$in':
	        if (!contains(compareTo, object[key])) {
	          return false;
	        }

	        break;

	      case '$nin':
	        if (contains(compareTo, object[key])) {
	          return false;
	        }

	        break;

	      case '$all':
	        for (i = 0; i < compareTo.length; i++) {
	          var _context3;

	          if ((0, _indexOf.default)(_context3 = object[key]).call(_context3, compareTo[i]) < 0) {
	            return false;
	          }
	        }

	        break;

	      case '$exists':
	        {
	          var propertyExists = typeof object[key] !== 'undefined';
	          var existenceIsRequired = constraints['$exists'];

	          if (typeof constraints['$exists'] !== 'boolean') {
	            // The SDK will never submit a non-boolean for $exists, but if someone
	            // tries to submit a non-boolean for $exits outside the SDKs, just ignore it.
	            break;
	          }

	          if (!propertyExists && existenceIsRequired || propertyExists && !existenceIsRequired) {
	            return false;
	          }

	          break;
	        }

	      case '$regex':
	        {
	          if ((0, _typeof2.default)(compareTo) === 'object') {
	            return compareTo.test(object[key]);
	          } // JS doesn't support perl-style escaping


	          var expString = '';
	          var escapeEnd = -2;
	          var escapeStart = (0, _indexOf.default)(compareTo).call(compareTo, '\\Q');

	          while (escapeStart > -1) {
	            // Add the unescaped portion
	            expString += compareTo.substring(escapeEnd + 2, escapeStart);
	            escapeEnd = (0, _indexOf.default)(compareTo).call(compareTo, '\\E', escapeStart);

	            if (escapeEnd > -1) {
	              expString += compareTo.substring(escapeStart + 2, escapeEnd).replace(/\\\\\\\\E/g, '\\E').replace(/\W/g, '\\$&');
	            }

	            escapeStart = (0, _indexOf.default)(compareTo).call(compareTo, '\\Q', escapeEnd);
	          }

	          expString += compareTo.substring(Math.max(escapeStart, escapeEnd + 2));
	          var modifiers = constraints.$options || '';
	          modifiers = modifiers.replace('x', '').replace('s', ''); // Parse Server / Mongo support x and s modifiers but JS RegExp doesn't

	          var exp = new RegExp(expString, modifiers);

	          if (!exp.test(object[key])) {
	            return false;
	          }

	          break;
	        }

	      case '$nearSphere':
	        {
	          if (!compareTo || !object[key]) {
	            return false;
	          }

	          var distance = compareTo.radiansTo(object[key]);
	          var max = constraints.$maxDistance || Infinity;
	          return distance <= max;
	        }

	      case '$within':
	        {
	          if (!compareTo || !object[key]) {
	            return false;
	          }

	          var southWest = compareTo.$box[0];
	          var northEast = compareTo.$box[1];

	          if (southWest.latitude > northEast.latitude || southWest.longitude > northEast.longitude) {
	            // Invalid box, crosses the date line
	            return false;
	          }

	          return object[key].latitude > southWest.latitude && object[key].latitude < northEast.latitude && object[key].longitude > southWest.longitude && object[key].longitude < northEast.longitude;
	        }

	      case '$options':
	        // Not a query type, but a way to add options to $regex. Ignore and
	        // avoid the default
	        break;

	      case '$maxDistance':
	        // Not a query type, but a way to add a cap to $nearSphere. Ignore and
	        // avoid the default
	        break;

	      case '$select':
	        {
	          var subQueryObjects = (0, _filter.default)(objects).call(objects, function (obj, index, arr) {
	            return matchesQuery(compareTo.query.className, obj, arr, compareTo.query.where);
	          });

	          for (var _i2 = 0; _i2 < subQueryObjects.length; _i2 += 1) {
	            var subObject = transformObject(subQueryObjects[_i2]);
	            return equalObjects(object[key], subObject[compareTo.key]);
	          }

	          return false;
	        }

	      case '$dontSelect':
	        {
	          var _subQueryObjects = (0, _filter.default)(objects).call(objects, function (obj, index, arr) {
	            return matchesQuery(compareTo.query.className, obj, arr, compareTo.query.where);
	          });

	          for (var _i3 = 0; _i3 < _subQueryObjects.length; _i3 += 1) {
	            var _subObject = transformObject(_subQueryObjects[_i3]);

	            return !equalObjects(object[key], _subObject[compareTo.key]);
	          }

	          return false;
	        }

	      case '$inQuery':
	        {
	          var _subQueryObjects2 = (0, _filter.default)(objects).call(objects, function (obj, index, arr) {
	            return matchesQuery(compareTo.className, obj, arr, compareTo.where);
	          });

	          for (var _i4 = 0; _i4 < _subQueryObjects2.length; _i4 += 1) {
	            var _subObject2 = transformObject(_subQueryObjects2[_i4]);

	            if (object[key].className === _subObject2.className && object[key].objectId === _subObject2.objectId) {
	              return true;
	            }
	          }

	          return false;
	        }

	      case '$notInQuery':
	        {
	          var _subQueryObjects3 = (0, _filter.default)(objects).call(objects, function (obj, index, arr) {
	            return matchesQuery(compareTo.className, obj, arr, compareTo.where);
	          });

	          for (var _i5 = 0; _i5 < _subQueryObjects3.length; _i5 += 1) {
	            var _subObject3 = transformObject(_subQueryObjects3[_i5]);

	            if (object[key].className === _subObject3.className && object[key].objectId === _subObject3.objectId) {
	              return false;
	            }
	          }

	          return true;
	        }

	      case '$containedBy':
	        {
	          var _iterator = _createForOfIteratorHelper(object[key]),
	              _step;

	          try {
	            for (_iterator.s(); !(_step = _iterator.n()).done;) {
	              var value = _step.value;

	              if (!contains(compareTo, value)) {
	                return false;
	              }
	            }
	          } catch (err) {
	            _iterator.e(err);
	          } finally {
	            _iterator.f();
	          }

	          return true;
	        }

	      case '$geoWithin':
	        {
	          var _context4;

	          var points = (0, _map.default)(_context4 = compareTo.$polygon).call(_context4, function (geoPoint) {
	            return [geoPoint.latitude, geoPoint.longitude];
	          });
	          var polygon = new ParsePolygon(points);
	          return polygon.containsPoint(object[key]);
	        }

	      case '$geoIntersects':
	        {
	          var _polygon = new ParsePolygon(object[key].coordinates);

	          var point = new ParseGeoPoint(compareTo.$point);
	          return _polygon.containsPoint(point);
	        }

	      default:
	        return false;
	    }
	  }

	  return true;
	}

	function validateQuery(query
	/*: any*/
	) {
	  var _context5;

	  var q = query;

	  if (query.toJSON) {
	    q = query.toJSON().where;
	  }

	  var specialQuerykeys = ['$and', '$or', '$nor', '_rperm', '_wperm', '_perishable_token', '_email_verify_token', '_email_verify_token_expires_at', '_account_lockout_expires_at', '_failed_login_count'];
	  (0, _forEach$1.default)(_context5 = (0, _keys.default)(q)).call(_context5, function (key) {
	    if (q && q[key] && q[key].$regex) {
	      if (typeof q[key].$options === 'string') {
	        if (!q[key].$options.match(/^[imxs]+$/)) {
	          throw new ParseError(ParseError.INVALID_QUERY, "Bad $options value for query: ".concat(q[key].$options));
	        }
	      }
	    }

	    if ((0, _indexOf.default)(specialQuerykeys).call(specialQuerykeys, key) < 0 && !key.match(/^[a-zA-Z][a-zA-Z0-9_\.]*$/)) {
	      throw new ParseError(ParseError.INVALID_KEY_NAME, "Invalid key name: ".concat(key));
	    }
	  });
	}

	var OfflineQuery = {
	  matchesQuery: matchesQuery,
	  validateQuery: validateQuery
	};
	var OfflineQuery_1 = OfflineQuery;

	var LocalDatastoreUtils = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.PIN_PREFIX = exports.OBJECT_PREFIX = exports.DEFAULT_PIN = void 0;
	exports.isLocalDatastoreKey = isLocalDatastoreKey;

	var _startsWith = interopRequireDefault(startsWith$3);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 * @private
	 */


	var DEFAULT_PIN = '_default';
	exports.DEFAULT_PIN = DEFAULT_PIN;
	var PIN_PREFIX = 'parsePin_';
	exports.PIN_PREFIX = PIN_PREFIX;
	var OBJECT_PREFIX = 'Parse_LDS_';
	exports.OBJECT_PREFIX = OBJECT_PREFIX;

	function isLocalDatastoreKey(key
	/*: string*/
	)
	/*: boolean*/
	{
	  return !!(key && (key === DEFAULT_PIN || (0, _startsWith.default)(key).call(key, PIN_PREFIX) || (0, _startsWith.default)(key).call(key, OBJECT_PREFIX)));
	}
	});

	var ParseQuery_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _entries = interopRequireDefault(entries$2);

	var _slicedToArray2 = interopRequireDefault(slicedToArray);

	var _isArray = interopRequireDefault(isArray$3);

	var _toConsumableArray2 = interopRequireDefault(toConsumableArray);

	var _find = interopRequireDefault(find$4);

	var _promise = interopRequireDefault(promise$3);

	var _regenerator = interopRequireDefault(regenerator);

	var _splice = interopRequireDefault(splice$4);

	var _sort = interopRequireDefault(sort$3);

	var _includes = interopRequireDefault(includes$4);

	var _concat = interopRequireDefault(concat$5);

	var _keys = interopRequireDefault(keys$7);

	var _filter2 = interopRequireDefault(filter$3);

	var _asyncToGenerator2 = interopRequireDefault(asyncToGenerator);

	var _map2 = interopRequireDefault(map$9);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _defineProperty2 = interopRequireDefault(defineProperty$b);

	var _slice = interopRequireDefault(slice$3);

	var _keys2 = interopRequireDefault(keys$3);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _indexOf = interopRequireDefault(indexOf$8);

	var _forEach = interopRequireDefault(forEach$4);

	var _CoreManager = interopRequireDefault(CoreManager);

	var _encode = interopRequireDefault(encode_1);



	var _ParseError = interopRequireDefault(ParseError_1);

	var _ParseGeoPoint = interopRequireDefault(ParseGeoPoint_1);

	var _ParseObject = interopRequireDefault(ParseObject_1);

	var _OfflineQuery = interopRequireDefault(OfflineQuery_1);


	/*
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */

	/**
	 * Converts a string into a regex that matches it.
	 * Surrounding with \Q .. \E does this, we just need to escape any \E's in
	 * the text separately.
	 *
	 * @param s
	 * @private
	 * @returns {string}
	 */


	function quote(s
	/*: string*/
	)
	/*: string*/
	{
	  return '\\Q' + s.replace('\\E', '\\E\\\\E\\Q') + '\\E';
	}
	/**
	 * Extracts the class name from queries. If not all queries have the same
	 * class name an error will be thrown.
	 *
	 * @param queries
	 * @private
	 * @returns {string}
	 */


	function _getClassNameFromQueries(queries
	/*: Array<ParseQuery>*/
	)
	/*: ?string*/
	{
	  var className = null;
	  (0, _forEach.default)(queries).call(queries, function (q) {
	    if (!className) {
	      className = q.className;
	    }

	    if (className !== q.className) {
	      throw new Error('All queries must be for the same class.');
	    }
	  });
	  return className;
	}
	/*
	 * Handles pre-populating the result data of a query with select fields,
	 * making sure that the data object contains keys for all objects that have
	 * been requested with a select, so that our cached state updates correctly.
	 */


	function handleSelectResult(data
	/*: any*/
	, select
	/*: Array<string>*/
	) {
	  var serverDataMask = {};
	  (0, _forEach.default)(select).call(select, function (field) {
	    var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, '.') !== -1;

	    if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {
	      // this field was selected, but is missing from the retrieved data
	      data[field] = undefined;
	    } else if (hasSubObjectSelect) {
	      // this field references a sub-object,
	      // so we need to walk down the path components
	      var pathComponents = field.split('.');
	      var _obj = data;
	      var serverMask = serverDataMask;
	      (0, _forEach.default)(pathComponents).call(pathComponents, function (component, index, arr) {
	        // add keys if the expected data is missing
	        if (_obj && !_obj.hasOwnProperty(component)) {
	          _obj[component] = undefined;
	        }

	        if (_obj && (0, _typeof2.default)(_obj) === 'object') {
	          _obj = _obj[component];
	        } //add this path component to the server mask so we can fill it in later if needed


	        if (index < arr.length - 1) {
	          if (!serverMask[component]) {
	            serverMask[component] = {};
	          }

	          serverMask = serverMask[component];
	        }
	      });
	    }
	  });

	  if ((0, _keys2.default)(serverDataMask).length > 0) {
	    // When selecting from sub-objects, we don't want to blow away the missing
	    // information that we may have retrieved before. We've already added any
	    // missing selected keys to sub-objects, but we still need to add in the
	    // data for any previously retrieved sub-objects that were not selected.
	    var serverData = _CoreManager.default.getObjectStateController().getServerData({
	      id: data.objectId,
	      className: data.className
	    });

	    copyMissingDataWithMask(serverData, data, serverDataMask, false);
	  }
	}

	function copyMissingDataWithMask(src, dest, mask, copyThisLevel) {
	  //copy missing elements at this level
	  if (copyThisLevel) {
	    for (var _key in src) {
	      if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {
	        dest[_key] = src[_key];
	      }
	    }
	  }

	  for (var _key2 in mask) {
	    if (dest[_key2] !== undefined && dest[_key2] !== null && src !== undefined && src !== null) {
	      //traverse into objects as needed
	      copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);
	    }
	  }
	}

	function handleOfflineSort(a, b, sorts) {
	  var order = sorts[0];
	  var operator = (0, _slice.default)(order).call(order, 0, 1);
	  var isDescending = operator === '-';

	  if (isDescending) {
	    order = order.substring(1);
	  }

	  if (order === '_created_at') {
	    order = 'createdAt';
	  }

	  if (order === '_updated_at') {
	    order = 'updatedAt';
	  }

	  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === 'password') {
	    throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, "Invalid Key: ".concat(order));
	  }

	  var field1 = a.get(order);
	  var field2 = b.get(order);

	  if (field1 < field2) {
	    return isDescending ? 1 : -1;
	  }

	  if (field1 > field2) {
	    return isDescending ? -1 : 1;
	  }

	  if (sorts.length > 1) {
	    var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);
	    return handleOfflineSort(a, b, remainingSorts);
	  }

	  return 0;
	}
	/**
	 * Creates a new parse Parse.Query for the given Parse.Object subclass.
	 *
	 * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The
	 * most common use case is finding all objects that match a query through the
	 * <code>find</code> method. for example, this sample code fetches all objects
	 * of class <code>myclass</code>. it calls a different function depending on
	 * whether the fetch succeeded or not.
	 *
	 * <pre>
	 * var query = new Parse.Query(myclass);
	 * query.find().then((results) => {
	 *   // results is an array of parse.object.
	 * }).catch((error) =>  {
	 *  // error is an instance of parse.error.
	 * });</pre></p>
	 *
	 * <p>a Parse.Query can also be used to retrieve a single object whose id is
	 * known, through the get method. for example, this sample code fetches an
	 * object of class <code>myclass</code> and id <code>myid</code>. it calls a
	 * different function depending on whether the fetch succeeded or not.
	 *
	 * <pre>
	 * var query = new Parse.Query(myclass);
	 * query.get(myid).then((object) => {
	 *     // object is an instance of parse.object.
	 * }).catch((error) =>  {
	 *  // error is an instance of parse.error.
	 * });</pre></p>
	 *
	 * <p>a Parse.Query can also be used to count the number of objects that match
	 * the query without retrieving all of those objects. for example, this
	 * sample code counts the number of objects of the class <code>myclass</code>
	 * <pre>
	 * var query = new Parse.Query(myclass);
	 * query.count().then((number) => {
	 *     // there are number instances of myclass.
	 * }).catch((error) => {
	 *     // error is an instance of Parse.Error.
	 * });</pre></p>
	 *
	 * @alias Parse.Query
	 */


	var ParseQuery = /*#__PURE__*/function () {
	  /**
	   * @property {string} className
	   */

	  /**
	   * @param {(string | Parse.Object)} objectClass An instance of a subclass of Parse.Object, or a Parse className string.
	   */
	  function ParseQuery(objectClass
	  /*: string | ParseObject*/
	  ) {
	    (0, _classCallCheck2.default)(this, ParseQuery);
	    (0, _defineProperty2.default)(this, "className", void 0);
	    (0, _defineProperty2.default)(this, "_where", void 0);
	    (0, _defineProperty2.default)(this, "_include", void 0);
	    (0, _defineProperty2.default)(this, "_exclude", void 0);
	    (0, _defineProperty2.default)(this, "_select", void 0);
	    (0, _defineProperty2.default)(this, "_limit", void 0);
	    (0, _defineProperty2.default)(this, "_skip", void 0);
	    (0, _defineProperty2.default)(this, "_count", void 0);
	    (0, _defineProperty2.default)(this, "_order", void 0);
	    (0, _defineProperty2.default)(this, "_readPreference", void 0);
	    (0, _defineProperty2.default)(this, "_includeReadPreference", void 0);
	    (0, _defineProperty2.default)(this, "_subqueryReadPreference", void 0);
	    (0, _defineProperty2.default)(this, "_queriesLocalDatastore", void 0);
	    (0, _defineProperty2.default)(this, "_localDatastorePinName", void 0);
	    (0, _defineProperty2.default)(this, "_extraOptions", void 0);
	    (0, _defineProperty2.default)(this, "_hint", void 0);
	    (0, _defineProperty2.default)(this, "_explain", void 0);
	    (0, _defineProperty2.default)(this, "_xhrRequest", void 0);

	    if (typeof objectClass === 'string') {
	      if (objectClass === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {
	        this.className = '_User';
	      } else {
	        this.className = objectClass;
	      }
	    } else if (objectClass instanceof _ParseObject.default) {
	      this.className = objectClass.className;
	    } else if (typeof objectClass === 'function') {
	      if (typeof objectClass.className === 'string') {
	        this.className = objectClass.className;
	      } else {
	        var _obj2 = new objectClass();

	        this.className = _obj2.className;
	      }
	    } else {
	      throw new TypeError('A ParseQuery must be constructed with a ParseObject or class name.');
	    }

	    this._where = {};
	    this._include = [];
	    this._exclude = [];
	    this._count = false;
	    this._limit = -1; // negative limit is not sent in the server request

	    this._skip = 0;
	    this._readPreference = null;
	    this._includeReadPreference = null;
	    this._subqueryReadPreference = null;
	    this._queriesLocalDatastore = false;
	    this._localDatastorePinName = null;
	    this._extraOptions = {};
	    this._xhrRequest = {
	      task: null,
	      onchange: function () {}
	    };
	  }
	  /**
	   * Adds constraint that at least one of the passed in queries matches.
	   *
	   * @param {Array} queries
	   * @returns {Parse.Query} Returns the query, so you can chain this call.
	   */


	  (0, _createClass2.default)(ParseQuery, [{
	    key: "_orQuery",
	    value: function (queries
	    /*: Array<ParseQuery>*/
	    )
	    /*: ParseQuery*/
	    {
	      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {
	        return q.toJSON().where;
	      });
	      this._where.$or = queryJSON;
	      return this;
	    }
	    /**
	     * Adds constraint that all of the passed in queries match.
	     *
	     * @param {Array} queries
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "_andQuery",
	    value: function (queries
	    /*: Array<ParseQuery>*/
	    )
	    /*: ParseQuery*/
	    {
	      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {
	        return q.toJSON().where;
	      });
	      this._where.$and = queryJSON;
	      return this;
	    }
	    /**
	     * Adds constraint that none of the passed in queries match.
	     *
	     * @param {Array} queries
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "_norQuery",
	    value: function (queries
	    /*: Array<ParseQuery>*/
	    )
	    /*: ParseQuery*/
	    {
	      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {
	        return q.toJSON().where;
	      });
	      this._where.$nor = queryJSON;
	      return this;
	    }
	    /**
	     * Helper for condition queries
	     *
	     * @param key
	     * @param condition
	     * @param value
	     * @returns {Parse.Query}
	     */

	  }, {
	    key: "_addCondition",
	    value: function (key
	    /*: string*/
	    , condition
	    /*: string*/
	    , value
	    /*: mixed*/
	    )
	    /*: ParseQuery*/
	    {
	      if (!this._where[key] || typeof this._where[key] === 'string') {
	        this._where[key] = {};
	      }

	      this._where[key][condition] = (0, _encode.default)(value, false, true);
	      return this;
	    }
	    /**
	     * Converts string for regular expression at the beginning
	     *
	     * @param string
	     * @returns {string}
	     */

	  }, {
	    key: "_regexStartWith",
	    value: function (string
	    /*: string*/
	    )
	    /*: string*/
	    {
	      return '^' + quote(string);
	    }
	  }, {
	    key: "_handleOfflineQuery",
	    value: function () {
	      var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(params
	      /*: any*/
	      ) {
	        var _context,
	            _this2 = this;

	        var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;
	        return _regenerator.default.wrap(function (_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                _OfflineQuery.default.validateQuery(this);

	                localDatastore = _CoreManager.default.getLocalDatastore();
	                _context3.next = 4;
	                return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);

	              case 4:
	                objects = _context3.sent;
	                results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function (json, index, arr) {
	                  var object = _ParseObject.default.fromJSON(json, false);

	                  if (json._localId && !json.objectId) {
	                    object._localId = json._localId;
	                  }

	                  if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {
	                    return null;
	                  }

	                  return object;
	                })).call(_context, function (object) {
	                  return object !== null;
	                });

	                if ((0, _keys.default)(params)) {
	                  keys = (0, _keys.default)(params).split(',');
	                  alwaysSelectedKeys = ['className', 'objectId', 'createdAt', 'updatedAt', 'ACL'];
	                  keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);
	                  results = (0, _map2.default)(results).call(results, function (object) {
	                    var _context2;

	                    var json = object._toFullJSON();

	                    (0, _forEach.default)(_context2 = (0, _keys2.default)(json)).call(_context2, function (key) {
	                      if (!(0, _includes.default)(keys).call(keys, key)) {
	                        delete json[key];
	                      }
	                    });
	                    return _ParseObject.default.fromJSON(json, false);
	                  });
	                }

	                if (params.order) {
	                  sorts = params.order.split(',');
	                  (0, _sort.default)(results).call(results, function (a, b) {
	                    return handleOfflineSort(a, b, sorts);
	                  });
	                } // count total before applying limit/skip


	                if (params.count) {
	                  count = results.length; // total count from response
	                }

	                if (params.skip) {
	                  if (params.skip >= results.length) {
	                    results = [];
	                  } else {
	                    results = (0, _splice.default)(results).call(results, params.skip, results.length);
	                  }
	                }

	                limit = results.length;

	                if (params.limit !== 0 && params.limit < results.length) {
	                  limit = params.limit;
	                }

	                results = (0, _splice.default)(results).call(results, 0, limit);

	                if (!(typeof count === 'number')) {
	                  _context3.next = 15;
	                  break;
	                }

	                return _context3.abrupt("return", {
	                  results: results,
	                  count: count
	                });

	              case 15:
	                return _context3.abrupt("return", results);

	              case 16:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      return function () {
	        return _handleOfflineQuery2.apply(this, arguments);
	      };
	    }()
	    /**
	     * Returns a JSON representation of this query.
	     *
	     * @returns {object} The JSON representation of the query.
	     */

	  }, {
	    key: "toJSON",
	    value: function ()
	    /*: QueryJSON*/
	    {
	      var params
	      /*: QueryJSON*/
	      = {
	        where: this._where
	      };

	      if (this._include.length) {
	        params.include = this._include.join(',');
	      }

	      if (this._exclude.length) {
	        params.excludeKeys = this._exclude.join(',');
	      }

	      if (this._select) {
	        params.keys = this._select.join(',');
	      }

	      if (this._count) {
	        params.count = 1;
	      }

	      if (this._limit >= 0) {
	        params.limit = this._limit;
	      }

	      if (this._skip > 0) {
	        params.skip = this._skip;
	      }

	      if (this._order) {
	        params.order = this._order.join(',');
	      }

	      if (this._readPreference) {
	        params.readPreference = this._readPreference;
	      }

	      if (this._includeReadPreference) {
	        params.includeReadPreference = this._includeReadPreference;
	      }

	      if (this._subqueryReadPreference) {
	        params.subqueryReadPreference = this._subqueryReadPreference;
	      }

	      if (this._hint) {
	        params.hint = this._hint;
	      }

	      if (this._explain) {
	        params.explain = true;
	      }

	      for (var _key3 in this._extraOptions) {
	        params[_key3] = this._extraOptions[_key3];
	      }

	      return params;
	    }
	    /**
	     * Return a query with conditions from json, can be useful to send query from server side to client
	     * Not static, all query conditions was set before calling this method will be deleted.
	     * For example on the server side we have
	     * var query = new Parse.Query("className");
	     * query.equalTo(key: value);
	     * query.limit(100);
	     * ... (others queries)
	     * Create JSON representation of Query Object
	     * var jsonFromServer = query.fromJSON();
	     *
	     * On client side getting query:
	     * var query = new Parse.Query("className");
	     * query.fromJSON(jsonFromServer);
	     *
	     * and continue to query...
	     * query.skip(100).find().then(...);
	     *
	     * @param {QueryJSON} json from Parse.Query.toJSON() method
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "withJSON",
	    value: function (json
	    /*: QueryJSON*/
	    )
	    /*: ParseQuery*/
	    {
	      if (json.where) {
	        this._where = json.where;
	      }

	      if (json.include) {
	        this._include = json.include.split(',');
	      }

	      if ((0, _keys.default)(json)) {
	        this._select = (0, _keys.default)(json).split(',');
	      }

	      if (json.excludeKeys) {
	        this._exclude = json.excludeKeys.split(',');
	      }

	      if (json.count) {
	        this._count = json.count === 1;
	      }

	      if (json.limit) {
	        this._limit = json.limit;
	      }

	      if (json.skip) {
	        this._skip = json.skip;
	      }

	      if (json.order) {
	        this._order = json.order.split(',');
	      }

	      if (json.readPreference) {
	        this._readPreference = json.readPreference;
	      }

	      if (json.includeReadPreference) {
	        this._includeReadPreference = json.includeReadPreference;
	      }

	      if (json.subqueryReadPreference) {
	        this._subqueryReadPreference = json.subqueryReadPreference;
	      }

	      if (json.hint) {
	        this._hint = json.hint;
	      }

	      if (json.explain) {
	        this._explain = !!json.explain;
	      }

	      for (var _key4 in json) {
	        if (json.hasOwnProperty(_key4)) {
	          var _context4;

	          if ((0, _indexOf.default)(_context4 = ['where', 'include', 'keys', 'count', 'limit', 'skip', 'order', 'readPreference', 'includeReadPreference', 'subqueryReadPreference', 'hint', 'explain']).call(_context4, _key4) === -1) {
	            this._extraOptions[_key4] = json[_key4];
	          }
	        }
	      }

	      return this;
	    }
	    /**
	     * Static method to restore Parse.Query by json representation
	     * Internally calling Parse.Query.withJSON
	     *
	     * @param {string} className
	     * @param {QueryJSON} json from Parse.Query.toJSON() method
	     * @returns {Parse.Query} new created query
	     */

	  }, {
	    key: "get",
	    value:
	    /**
	     * Constructs a Parse.Object whose id is already known by fetching data from
	     * the server. Unlike the <code>first</code> method, it never returns undefined.
	     *
	     * @param {string} objectId The id of the object to be fetched.
	     * @param {object} options
	     * Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.
	     *   <li>json: Return raw json without converting to Parse.Object
	     * </ul>
	     *
	     * @returns {Promise} A promise that is resolved with the result when
	     * the query completes.
	     */
	    function (objectId
	    /*: string*/
	    , options
	    /*:: ?: FullOptions*/
	    )
	    /*: Promise<ParseObject>*/
	    {
	      this.equalTo('objectId', objectId);
	      var firstOptions = {};

	      if (options && options.hasOwnProperty('useMasterKey')) {
	        firstOptions.useMasterKey = options.useMasterKey;
	      }

	      if (options && options.hasOwnProperty('sessionToken')) {
	        firstOptions.sessionToken = options.sessionToken;
	      }

	      if (options && options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {
	        firstOptions.context = options.context;
	      }

	      if (options && options.hasOwnProperty('json')) {
	        firstOptions.json = options.json;
	      }

	      return this.first(firstOptions).then(function (response) {
	        if (response) {
	          return response;
	        }

	        var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'Object not found.');
	        return _promise.default.reject(errorObject);
	      });
	    }
	    /**
	     * Retrieves a list of ParseObjects that satisfy this query.
	     *
	     * @param {object} options Valid options
	     * are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.
	     *   <li>json: Return raw json without converting to Parse.Object
	     * </ul>
	     *
	     * @returns {Promise} A promise that is resolved with the results when
	     * the query completes.
	     */

	  }, {
	    key: "find",
	    value: function (options
	    /*:: ?: FullOptions*/
	    )
	    /*: Promise<Array<ParseObject>>*/
	    {
	      var _this3 = this;

	      options = options || {};
	      var findOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        findOptions.useMasterKey = options.useMasterKey;
	      }

	      if (options.hasOwnProperty('sessionToken')) {
	        findOptions.sessionToken = options.sessionToken;
	      }

	      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {
	        findOptions.context = options.context;
	      }

	      this._setRequestTask(findOptions);

	      var controller = _CoreManager.default.getQueryController();

	      var select = this._select;

	      if (this._queriesLocalDatastore) {
	        return this._handleOfflineQuery(this.toJSON());
	      }

	      return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function (response) {
	        var _context5; // Return generic object when explain is used


	        if (_this3._explain) {
	          return response.results;
	        }

	        var results = (0, _map2.default)(_context5 = response.results).call(_context5, function (data) {
	          // In cases of relations, the server may send back a className
	          // on the top level of the payload
	          var override = response.className || _this3.className;

	          if (!data.className) {
	            data.className = override;
	          } // Make sure the data object contains keys for all objects that
	          // have been requested with a select, so that our cached state
	          // updates correctly.


	          if (select) {
	            handleSelectResult(data, select);
	          }

	          if (options.json) {
	            return data;
	          } else {
	            return _ParseObject.default.fromJSON(data, !select);
	          }
	        });
	        var count = response.count;

	        if (typeof count === 'number') {
	          return {
	            results: results,
	            count: count
	          };
	        } else {
	          return results;
	        }
	      });
	    }
	    /**
	     * Retrieves a complete list of ParseObjects that satisfy this query.
	     * Using `eachBatch` under the hood to fetch all the valid objects.
	     *
	     * @param {object} options Valid options are:<ul>
	     *   <li>batchSize: How many objects to yield in each batch (default: 100)
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     * </ul>
	     * @returns {Promise} A promise that is resolved with the results when
	     * the query completes.
	     */

	  }, {
	    key: "findAll",
	    value: function () {
	      var _findAll = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options
	      /*:: ?: BatchOptions*/
	      ) {
	        var result;
	        return _regenerator.default.wrap(function (_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                result
	                /*: ParseObject[]*/
	                = [];
	                _context7.next = 3;
	                return this.eachBatch(function (objects
	                /*: ParseObject[]*/
	                ) {
	                  var _context6;

	                  result = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(objects));
	                }, options);

	              case 3:
	                return _context7.abrupt("return", result);

	              case 4:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      return function () {
	        return _findAll.apply(this, arguments);
	      };
	    }()
	    /**
	     * Counts the number of objects that match this query.
	     *
	     * @param {object} options
	     * Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     * </ul>
	     *
	     * @returns {Promise} A promise that is resolved with the count when
	     * the query completes.
	     */

	  }, {
	    key: "count",
	    value: function (options
	    /*:: ?: FullOptions*/
	    )
	    /*: Promise<number>*/
	    {
	      options = options || {};
	      var findOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        findOptions.useMasterKey = options.useMasterKey;
	      }

	      if (options.hasOwnProperty('sessionToken')) {
	        findOptions.sessionToken = options.sessionToken;
	      }

	      this._setRequestTask(findOptions);

	      var controller = _CoreManager.default.getQueryController();

	      var params = this.toJSON();
	      params.limit = 0;
	      params.count = 1;
	      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (result) {
	        return result.count;
	      });
	    }
	    /**
	     * Executes a distinct query and returns unique values
	     *
	     * @param {string} key A field to find distinct values
	     * @param {object} options
	     * Valid options are:<ul>
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     * </ul>
	     *
	     * @returns {Promise} A promise that is resolved with the query completes.
	     */

	  }, {
	    key: "distinct",
	    value: function (key
	    /*: string*/
	    , options
	    /*:: ?: FullOptions*/
	    )
	    /*: Promise<Array<mixed>>*/
	    {
	      options = options || {};
	      var distinctOptions = {};
	      distinctOptions.useMasterKey = true;

	      if (options.hasOwnProperty('sessionToken')) {
	        distinctOptions.sessionToken = options.sessionToken;
	      }

	      this._setRequestTask(distinctOptions);

	      var controller = _CoreManager.default.getQueryController();

	      var params = {
	        distinct: key,
	        where: this._where,
	        hint: this._hint
	      };
	      return controller.aggregate(this.className, params, distinctOptions).then(function (results) {
	        return results.results;
	      });
	    }
	    /**
	     * Executes an aggregate query and returns aggregate results
	     *
	     * @param {(Array|object)} pipeline Array or Object of stages to process query
	     * @param {object} options Valid options are:<ul>
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     * </ul>
	     *
	     * @returns {Promise} A promise that is resolved with the query completes.
	     */

	  }, {
	    key: "aggregate",
	    value: function (pipeline
	    /*: mixed*/
	    , options
	    /*:: ?: FullOptions*/
	    )
	    /*: Promise<Array<mixed>>*/
	    {
	      options = options || {};
	      var aggregateOptions = {};
	      aggregateOptions.useMasterKey = true;

	      if (options.hasOwnProperty('sessionToken')) {
	        aggregateOptions.sessionToken = options.sessionToken;
	      }

	      this._setRequestTask(aggregateOptions);

	      var controller = _CoreManager.default.getQueryController();

	      if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== 'object') {
	        throw new Error('Invalid pipeline must be Array or Object');
	      }

	      if ((0, _keys2.default)(this._where || {}).length) {
	        if (!(0, _isArray.default)(pipeline)) {
	          pipeline = [pipeline];
	        }

	        pipeline.unshift({
	          match: this._where
	        });
	      }

	      var params = {
	        pipeline: pipeline,
	        hint: this._hint,
	        explain: this._explain,
	        readPreference: this._readPreference
	      };
	      return controller.aggregate(this.className, params, aggregateOptions).then(function (results) {
	        return results.results;
	      });
	    }
	    /**
	     * Retrieves at most one Parse.Object that satisfies this query.
	     *
	     * Returns the object if there is one, otherwise undefined.
	     *
	     * @param {object} options Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.
	     *   <li>json: Return raw json without converting to Parse.Object
	     * </ul>
	     *
	     * @returns {Promise} A promise that is resolved with the object when
	     * the query completes.
	     */

	  }, {
	    key: "first",
	    value: function (options
	    /*:: ?: FullOptions*/
	    )
	    /*: Promise<ParseObject | void>*/
	    {
	      var _this4 = this;

	      options = options || {};
	      var findOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        findOptions.useMasterKey = options.useMasterKey;
	      }

	      if (options.hasOwnProperty('sessionToken')) {
	        findOptions.sessionToken = options.sessionToken;
	      }

	      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {
	        findOptions.context = options.context;
	      }

	      this._setRequestTask(findOptions);

	      var controller = _CoreManager.default.getQueryController();

	      var params = this.toJSON();
	      params.limit = 1;
	      var select = this._select;

	      if (this._queriesLocalDatastore) {
	        return this._handleOfflineQuery(params).then(function (objects) {
	          if (!objects[0]) {
	            return undefined;
	          }

	          return objects[0];
	        });
	      }

	      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (response) {
	        var objects = response.results;

	        if (!objects[0]) {
	          return undefined;
	        }

	        if (!objects[0].className) {
	          objects[0].className = _this4.className;
	        } // Make sure the data object contains keys for all objects that
	        // have been requested with a select, so that our cached state
	        // updates correctly.


	        if (select) {
	          handleSelectResult(objects[0], select);
	        }

	        if (options.json) {
	          return objects[0];
	        } else {
	          return _ParseObject.default.fromJSON(objects[0], !select);
	        }
	      });
	    }
	    /**
	     * Iterates over objects matching a query, calling a callback for each batch.
	     * If the callback returns a promise, the iteration will not continue until
	     * that promise has been fulfilled. If the callback returns a rejected
	     * promise, then iteration will stop with that error. The items are processed
	     * in an unspecified order. The query may not have any sort order, and may
	     * not use limit or skip.
	     *
	     * @param {Function} callback Callback that will be called with each result
	     *     of the query.
	     * @param {object} options Valid options are:<ul>
	     *   <li>batchSize: How many objects to yield in each batch (default: 100)
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.
	     * </ul>
	     * @returns {Promise} A promise that will be fulfilled once the
	     *     iteration has completed.
	     */

	  }, {
	    key: "eachBatch",
	    value: function (callback
	    /*: (objs: Array<ParseObject>) => Promise<*>*/
	    , options
	    /*:: ?: BatchOptions*/
	    )
	    /*: Promise<void>*/
	    {
	      var _context8;

	      options = options || {};

	      if (this._order || this._skip || this._limit >= 0) {
	        return _promise.default.reject('Cannot iterate on a query with sort, skip, or limit.');
	      }

	      var query = new ParseQuery(this.className);
	      query._limit = options.batchSize || 100;
	      query._include = (0, _map2.default)(_context8 = this._include).call(_context8, function (i) {
	        return i;
	      });

	      if (this._select) {
	        var _context9;

	        query._select = (0, _map2.default)(_context9 = this._select).call(_context9, function (s) {
	          return s;
	        });
	      }

	      query._hint = this._hint;
	      query._where = {};

	      for (var _attr in this._where) {
	        var val = this._where[_attr];

	        if ((0, _isArray.default)(val)) {
	          query._where[_attr] = (0, _map2.default)(val).call(val, function (v) {
	            return v;
	          });
	        } else if (val && (0, _typeof2.default)(val) === 'object') {
	          var conditionMap = {};
	          query._where[_attr] = conditionMap;

	          for (var cond in val) {
	            conditionMap[cond] = val[cond];
	          }
	        } else {
	          query._where[_attr] = val;
	        }
	      }

	      query.ascending('objectId');
	      var findOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        findOptions.useMasterKey = options.useMasterKey;
	      }

	      if (options.hasOwnProperty('sessionToken')) {
	        findOptions.sessionToken = options.sessionToken;
	      }

	      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {
	        findOptions.context = options.context;
	      }

	      var finished = false;
	      var previousResults = [];
	      return (0, promiseUtils.continueWhile)(function () {
	        return !finished;
	      }, /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
	        var _yield$Promise$all, _yield$Promise$all2, results;

	        return _regenerator.default.wrap(function (_context10) {
	          while (1) {
	            switch (_context10.prev = _context10.next) {
	              case 0:
	                _context10.next = 2;
	                return _promise.default.all([(0, _find.default)(query).call(query, findOptions), _promise.default.resolve(previousResults.length > 0 && callback(previousResults))]);

	              case 2:
	                _yield$Promise$all = _context10.sent;
	                _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);
	                results = _yield$Promise$all2[0];

	                if (!(results.length >= query._limit)) {
	                  _context10.next = 10;
	                  break;
	                }

	                query.greaterThan('objectId', results[results.length - 1].id);
	                previousResults = results;
	                _context10.next = 17;
	                break;

	              case 10:
	                if (!(results.length > 0)) {
	                  _context10.next = 16;
	                  break;
	                }

	                _context10.next = 13;
	                return _promise.default.resolve(callback(results));

	              case 13:
	                finished = true;
	                _context10.next = 17;
	                break;

	              case 16:
	                finished = true;

	              case 17:
	              case "end":
	                return _context10.stop();
	            }
	          }
	        }, _callee3);
	      })));
	    }
	    /**
	     * Iterates over each result of a query, calling a callback for each one. If
	     * the callback returns a promise, the iteration will not continue until
	     * that promise has been fulfilled. If the callback returns a rejected
	     * promise, then iteration will stop with that error. The items are
	     * processed in an unspecified order. The query may not have any sort order,
	     * and may not use limit or skip.
	     *
	     * @param {Function} callback Callback that will be called with each result
	     *     of the query.
	     * @param {object} options Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     * </ul>
	     * @returns {Promise} A promise that will be fulfilled once the
	     *     iteration has completed.
	     */

	  }, {
	    key: "each",
	    value: function (callback
	    /*: (obj: ParseObject) => any*/
	    , options
	    /*:: ?: BatchOptions*/
	    )
	    /*: Promise<void>*/
	    {
	      return this.eachBatch(function (results) {
	        var callbacksDone = _promise.default.resolve();

	        (0, _forEach.default)(results).call(results, function (result) {
	          callbacksDone = callbacksDone.then(function () {
	            return callback(result);
	          });
	        });
	        return callbacksDone;
	      }, options);
	    }
	    /**
	     * Adds a hint to force index selection. (https://docs.mongodb.com/manual/reference/operator/meta/hint/)
	     *
	     * @param {(string|object)} value String or Object of index that should be used when executing query
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "hint",
	    value: function (value
	    /*: mixed*/
	    )
	    /*: ParseQuery*/
	    {
	      if (typeof value === 'undefined') {
	        delete this._hint;
	      }

	      this._hint = value;
	      return this;
	    }
	    /**
	     * Investigates the query execution plan. Useful for optimizing queries. (https://docs.mongodb.com/manual/reference/operator/meta/explain/)
	     *
	     * @param {boolean} explain Used to toggle the information on the query plan.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "explain",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      var _explain
	      /*: boolean*/
	      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	      if (typeof _explain !== 'boolean') {
	        throw new Error('You can only set explain to a boolean value');
	      }

	      this._explain = _explain;
	      return this;
	    }
	    /**
	     * Iterates over each result of a query, calling a callback for each one. If
	     * the callback returns a promise, the iteration will not continue until
	     * that promise has been fulfilled. If the callback returns a rejected
	     * promise, then iteration will stop with that error. The items are
	     * processed in an unspecified order. The query may not have any sort order,
	     * and may not use limit or skip.
	     *
	     * @param {Function} callback Callback <ul>
	     *   <li>currentObject: The current Parse.Object being processed in the array.</li>
	     *   <li>index: The index of the current Parse.Object being processed in the array.</li>
	     *   <li>query: The query map was called upon.</li>
	     * </ul>
	     *
	     * @param {object} options Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     * </ul>
	     * @returns {Promise} A promise that will be fulfilled once the
	     *     iteration has completed.
	     */

	  }, {
	    key: "map",
	    value: function () {
	      var _map = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(callback
	      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => any*/
	      , options
	      /*:: ?: BatchOptions*/
	      ) {
	        var _this5 = this;

	        var array, index;
	        return _regenerator.default.wrap(function (_context11) {
	          while (1) {
	            switch (_context11.prev = _context11.next) {
	              case 0:
	                array = [];
	                index = 0;
	                _context11.next = 4;
	                return this.each(function (object) {
	                  return _promise.default.resolve(callback(object, index, _this5)).then(function (result) {
	                    array.push(result);
	                    index += 1;
	                  });
	                }, options);

	              case 4:
	                return _context11.abrupt("return", array);

	              case 5:
	              case "end":
	                return _context11.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      return function () {
	        return _map.apply(this, arguments);
	      };
	    }()
	    /**
	     * Iterates over each result of a query, calling a callback for each one. If
	     * the callback returns a promise, the iteration will not continue until
	     * that promise has been fulfilled. If the callback returns a rejected
	     * promise, then iteration will stop with that error. The items are
	     * processed in an unspecified order. The query may not have any sort order,
	     * and may not use limit or skip.
	     *
	     * @param {Function} callback Callback <ul>
	     *   <li>accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback.</li>
	     *   <li>currentObject: The current Parse.Object being processed in the array.</li>
	     *   <li>index: The index of the current Parse.Object being processed in the array.</li>
	     * </ul>
	     * @param {*} initialValue A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first object in the query will be used and skipped.
	     * @param {object} options Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     * </ul>
	     * @returns {Promise} A promise that will be fulfilled once the
	     *     iteration has completed.
	     */

	  }, {
	    key: "reduce",
	    value: function () {
	      var _reduce = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(callback
	      /*: (accumulator: any, currentObject: ParseObject, index: number) => any*/
	      , initialValue
	      /*: any*/
	      , options
	      /*:: ?: BatchOptions*/
	      ) {
	        var accumulator, index;
	        return _regenerator.default.wrap(function (_context12) {
	          while (1) {
	            switch (_context12.prev = _context12.next) {
	              case 0:
	                accumulator = initialValue;
	                index = 0;
	                _context12.next = 4;
	                return this.each(function (object) {
	                  // If no initial value was given, we take the first object from the query
	                  // as the initial value and don't call the callback with it.
	                  if (index === 0 && initialValue === undefined) {
	                    accumulator = object;
	                    index += 1;
	                    return;
	                  }

	                  return _promise.default.resolve(callback(accumulator, object, index)).then(function (result) {
	                    accumulator = result;
	                    index += 1;
	                  });
	                }, options);

	              case 4:
	                if (!(index === 0 && initialValue === undefined)) {
	                  _context12.next = 6;
	                  break;
	                }

	                throw new TypeError('Reducing empty query result set with no initial value');

	              case 6:
	                return _context12.abrupt("return", accumulator);

	              case 7:
	              case "end":
	                return _context12.stop();
	            }
	          }
	        }, _callee5, this);
	      }));

	      return function () {
	        return _reduce.apply(this, arguments);
	      };
	    }()
	    /**
	     * Iterates over each result of a query, calling a callback for each one. If
	     * the callback returns a promise, the iteration will not continue until
	     * that promise has been fulfilled. If the callback returns a rejected
	     * promise, then iteration will stop with that error. The items are
	     * processed in an unspecified order. The query may not have any sort order,
	     * and may not use limit or skip.
	     *
	     * @param {Function} callback Callback <ul>
	     *   <li>currentObject: The current Parse.Object being processed in the array.</li>
	     *   <li>index: The index of the current Parse.Object being processed in the array.</li>
	     *   <li>query: The query filter was called upon.</li>
	     * </ul>
	     *
	     * @param {object} options Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     * </ul>
	     * @returns {Promise} A promise that will be fulfilled once the
	     *     iteration has completed.
	     */

	  }, {
	    key: "filter",
	    value: function () {
	      var _filter = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(callback
	      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => boolean*/
	      , options
	      /*:: ?: BatchOptions*/
	      ) {
	        var _this6 = this;

	        var array, index;
	        return _regenerator.default.wrap(function (_context13) {
	          while (1) {
	            switch (_context13.prev = _context13.next) {
	              case 0:
	                array = [];
	                index = 0;
	                _context13.next = 4;
	                return this.each(function (object) {
	                  return _promise.default.resolve(callback(object, index, _this6)).then(function (flag) {
	                    if (flag) {
	                      array.push(object);
	                    }

	                    index += 1;
	                  });
	                }, options);

	              case 4:
	                return _context13.abrupt("return", array);

	              case 5:
	              case "end":
	                return _context13.stop();
	            }
	          }
	        }, _callee6, this);
	      }));

	      return function () {
	        return _filter.apply(this, arguments);
	      };
	    }()
	    /** Query Conditions **/

	    /**
	     * Adds a constraint to the query that requires a particular key's value to
	     * be equal to the provided value.
	     *
	     * @param {string} key The key to check.
	     * @param value The value that the Parse.Object must contain.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "equalTo",
	    value: function (key
	    /*: string | { [key: string]: any }*/
	    , value
	    /*: ?mixed*/
	    )
	    /*: ParseQuery*/
	    {
	      var _this7 = this;

	      if (key && (0, _typeof2.default)(key) === 'object') {
	        var _context14;

	        (0, _forEach.default)(_context14 = (0, _entries.default)(key)).call(_context14, function (_ref2) {
	          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
	              k = _ref3[0],
	              val = _ref3[1];

	          return _this7.equalTo(k, val);
	        });
	        return this;
	      }

	      if (typeof value === 'undefined') {
	        return this.doesNotExist(key);
	      }

	      this._where[key] = (0, _encode.default)(value, false, true);
	      return this;
	    }
	    /**
	     * Adds a constraint to the query that requires a particular key's value to
	     * be not equal to the provided value.
	     *
	     * @param {string} key The key to check.
	     * @param value The value that must not be equalled.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "notEqualTo",
	    value: function (key
	    /*: string | { [key: string]: any }*/
	    , value
	    /*: ?mixed*/
	    )
	    /*: ParseQuery*/
	    {
	      var _this8 = this;

	      if (key && (0, _typeof2.default)(key) === 'object') {
	        var _context15;

	        (0, _forEach.default)(_context15 = (0, _entries.default)(key)).call(_context15, function (_ref4) {
	          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),
	              k = _ref5[0],
	              val = _ref5[1];

	          return _this8.notEqualTo(k, val);
	        });
	        return this;
	      }

	      return this._addCondition(key, '$ne', value);
	    }
	    /**
	     * Adds a constraint to the query that requires a particular key's value to
	     * be less than the provided value.
	     *
	     * @param {string} key The key to check.
	     * @param value The value that provides an upper bound.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "lessThan",
	    value: function (key
	    /*: string*/
	    , value
	    /*: mixed*/
	    )
	    /*: ParseQuery*/
	    {
	      return this._addCondition(key, '$lt', value);
	    }
	    /**
	     * Adds a constraint to the query that requires a particular key's value to
	     * be greater than the provided value.
	     *
	     * @param {string} key The key to check.
	     * @param value The value that provides an lower bound.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "greaterThan",
	    value: function (key
	    /*: string*/
	    , value
	    /*: mixed*/
	    )
	    /*: ParseQuery*/
	    {
	      return this._addCondition(key, '$gt', value);
	    }
	    /**
	     * Adds a constraint to the query that requires a particular key's value to
	     * be less than or equal to the provided value.
	     *
	     * @param {string} key The key to check.
	     * @param value The value that provides an upper bound.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "lessThanOrEqualTo",
	    value: function (key
	    /*: string*/
	    , value
	    /*: mixed*/
	    )
	    /*: ParseQuery*/
	    {
	      return this._addCondition(key, '$lte', value);
	    }
	    /**
	     * Adds a constraint to the query that requires a particular key's value to
	     * be greater than or equal to the provided value.
	     *
	     * @param {string} key The key to check.
	     * @param {*} value The value that provides an lower bound.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "greaterThanOrEqualTo",
	    value: function (key
	    /*: string*/
	    , value
	    /*: mixed*/
	    )
	    /*: ParseQuery*/
	    {
	      return this._addCondition(key, '$gte', value);
	    }
	    /**
	     * Adds a constraint to the query that requires a particular key's value to
	     * be contained in the provided list of values.
	     *
	     * @param {string} key The key to check.
	     * @param {*} value The values that will match.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "containedIn",
	    value: function (key
	    /*: string*/
	    , value
	    /*: mixed*/
	    )
	    /*: ParseQuery*/
	    {
	      return this._addCondition(key, '$in', value);
	    }
	    /**
	     * Adds a constraint to the query that requires a particular key's value to
	     * not be contained in the provided list of values.
	     *
	     * @param {string} key The key to check.
	     * @param {*} value The values that will not match.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "notContainedIn",
	    value: function (key
	    /*: string*/
	    , value
	    /*: mixed*/
	    )
	    /*: ParseQuery*/
	    {
	      return this._addCondition(key, '$nin', value);
	    }
	    /**
	     * Adds a constraint to the query that requires a particular key's value to
	     * be contained by the provided list of values. Get objects where all array elements match.
	     *
	     * @param {string} key The key to check.
	     * @param {Array} values The values that will match.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "containedBy",
	    value: function (key
	    /*: string*/
	    , values
	    /*: Array<mixed>*/
	    )
	    /*: ParseQuery*/
	    {
	      return this._addCondition(key, '$containedBy', values);
	    }
	    /**
	     * Adds a constraint to the query that requires a particular key's value to
	     * contain each one of the provided list of values.
	     *
	     * @param {string} key The key to check.  This key's value must be an array.
	     * @param {Array} values The values that will match.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "containsAll",
	    value: function (key
	    /*: string*/
	    , values
	    /*: Array<mixed>*/
	    )
	    /*: ParseQuery*/
	    {
	      return this._addCondition(key, '$all', values);
	    }
	    /**
	     * Adds a constraint to the query that requires a particular key's value to
	     * contain each one of the provided list of values starting with given strings.
	     *
	     * @param {string} key The key to check.  This key's value must be an array.
	     * @param {Array<string>} values The string values that will match as starting string.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "containsAllStartingWith",
	    value: function (key
	    /*: string*/
	    , values
	    /*: Array<string>*/
	    )
	    /*: ParseQuery*/
	    {
	      var _this = this;

	      if (!(0, _isArray.default)(values)) {
	        values = [values];
	      }

	      var regexObject = (0, _map2.default)(values).call(values, function (value) {
	        return {
	          $regex: _this._regexStartWith(value)
	        };
	      });
	      return this.containsAll(key, regexObject);
	    }
	    /**
	     * Adds a constraint for finding objects that contain the given key.
	     *
	     * @param {string} key The key that should exist.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "exists",
	    value: function (key
	    /*: string*/
	    )
	    /*: ParseQuery*/
	    {
	      return this._addCondition(key, '$exists', true);
	    }
	    /**
	     * Adds a constraint for finding objects that do not contain a given key.
	     *
	     * @param {string} key The key that should not exist
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "doesNotExist",
	    value: function (key
	    /*: string*/
	    )
	    /*: ParseQuery*/
	    {
	      return this._addCondition(key, '$exists', false);
	    }
	    /**
	     * Adds a regular expression constraint for finding string values that match
	     * the provided regular expression.
	     * This may be slow for large datasets.
	     *
	     * @param {string} key The key that the string to match is stored in.
	     * @param {RegExp} regex The regular expression pattern to match.
	     * @param {string} modifiers The regular expression mode.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "matches",
	    value: function (key
	    /*: string*/
	    , regex
	    /*: RegExp*/
	    , modifiers
	    /*: string*/
	    )
	    /*: ParseQuery*/
	    {
	      this._addCondition(key, '$regex', regex);

	      if (!modifiers) {
	        modifiers = '';
	      }

	      if (regex.ignoreCase) {
	        modifiers += 'i';
	      }

	      if (regex.multiline) {
	        modifiers += 'm';
	      }

	      if (modifiers.length) {
	        this._addCondition(key, '$options', modifiers);
	      }

	      return this;
	    }
	    /**
	     * Adds a constraint that requires that a key's value matches a Parse.Query
	     * constraint.
	     *
	     * @param {string} key The key that the contains the object to match the
	     *                     query.
	     * @param {Parse.Query} query The query that should match.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "matchesQuery",
	    value: function (key
	    /*: string*/
	    , query
	    /*: ParseQuery*/
	    )
	    /*: ParseQuery*/
	    {
	      var queryJSON = query.toJSON();
	      queryJSON.className = query.className;
	      return this._addCondition(key, '$inQuery', queryJSON);
	    }
	    /**
	     * Adds a constraint that requires that a key's value not matches a
	     * Parse.Query constraint.
	     *
	     * @param {string} key The key that the contains the object to match the
	     *                     query.
	     * @param {Parse.Query} query The query that should not match.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "doesNotMatchQuery",
	    value: function (key
	    /*: string*/
	    , query
	    /*: ParseQuery*/
	    )
	    /*: ParseQuery*/
	    {
	      var queryJSON = query.toJSON();
	      queryJSON.className = query.className;
	      return this._addCondition(key, '$notInQuery', queryJSON);
	    }
	    /**
	     * Adds a constraint that requires that a key's value matches a value in
	     * an object returned by a different Parse.Query.
	     *
	     * @param {string} key The key that contains the value that is being
	     *                     matched.
	     * @param {string} queryKey The key in the objects returned by the query to
	     *                          match against.
	     * @param {Parse.Query} query The query to run.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "matchesKeyInQuery",
	    value: function (key
	    /*: string*/
	    , queryKey
	    /*: string*/
	    , query
	    /*: ParseQuery*/
	    )
	    /*: ParseQuery*/
	    {
	      var queryJSON = query.toJSON();
	      queryJSON.className = query.className;
	      return this._addCondition(key, '$select', {
	        key: queryKey,
	        query: queryJSON
	      });
	    }
	    /**
	     * Adds a constraint that requires that a key's value not match a value in
	     * an object returned by a different Parse.Query.
	     *
	     * @param {string} key The key that contains the value that is being
	     *                     excluded.
	     * @param {string} queryKey The key in the objects returned by the query to
	     *                          match against.
	     * @param {Parse.Query} query The query to run.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "doesNotMatchKeyInQuery",
	    value: function (key
	    /*: string*/
	    , queryKey
	    /*: string*/
	    , query
	    /*: ParseQuery*/
	    )
	    /*: ParseQuery*/
	    {
	      var queryJSON = query.toJSON();
	      queryJSON.className = query.className;
	      return this._addCondition(key, '$dontSelect', {
	        key: queryKey,
	        query: queryJSON
	      });
	    }
	    /**
	     * Adds a constraint for finding string values that contain a provided
	     * string.  This may be slow for large datasets.
	     *
	     * @param {string} key The key that the string to match is stored in.
	     * @param {string} substring The substring that the value must contain.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "contains",
	    value: function (key
	    /*: string*/
	    , substring
	    /*: string*/
	    )
	    /*: ParseQuery*/
	    {
	      if (typeof substring !== 'string') {
	        throw new Error('The value being searched for must be a string.');
	      }

	      return this._addCondition(key, '$regex', quote(substring));
	    }
	    /**
	     * Adds a constraint for finding string values that contain a provided
	     * string. This may be slow for large datasets. Requires Parse-Server > 2.5.0
	     *
	     * In order to sort you must use select and ascending ($score is required)
	     *  <pre>
	     *   query.fullText('field', 'term');
	     *   query.ascending('$score');
	     *   query.select('$score');
	     *  </pre>
	     *
	     * To retrieve the weight / rank
	     *  <pre>
	     *   object->get('score');
	     *  </pre>
	     *
	     * You can define optionals by providing an object as a third parameter
	     *  <pre>
	     *   query.fullText('field', 'term', { language: 'es', diacriticSensitive: true });
	     *  </pre>
	     *
	     * @param {string} key The key that the string to match is stored in.
	     * @param {string} value The string to search
	     * @param {object} options (Optional)
	     * @param {string} options.language The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer.
	     * @param {boolean} options.caseSensitive A boolean flag to enable or disable case sensitive search.
	     * @param {boolean} options.diacriticSensitive A boolean flag to enable or disable diacritic sensitive search.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "fullText",
	    value: function (key
	    /*: string*/
	    , value
	    /*: string*/
	    , options
	    /*: ?Object*/
	    )
	    /*: ParseQuery*/
	    {
	      options = options || {};

	      if (!key) {
	        throw new Error('A key is required.');
	      }

	      if (!value) {
	        throw new Error('A search term is required');
	      }

	      if (typeof value !== 'string') {
	        throw new Error('The value being searched for must be a string.');
	      }

	      var fullOptions = {};
	      fullOptions.$term = value;

	      for (var option in options) {
	        switch (option) {
	          case 'language':
	            fullOptions.$language = options[option];
	            break;

	          case 'caseSensitive':
	            fullOptions.$caseSensitive = options[option];
	            break;

	          case 'diacriticSensitive':
	            fullOptions.$diacriticSensitive = options[option];
	            break;

	          default:
	            throw new Error("Unknown option: ".concat(option));
	        }
	      }

	      return this._addCondition(key, '$text', {
	        $search: fullOptions
	      });
	    }
	    /**
	     * Method to sort the full text search by text score
	     *
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "sortByTextScore",
	    value: function () {
	      this.ascending('$score');
	      this.select(['$score']);
	      return this;
	    }
	    /**
	     * Adds a constraint for finding string values that start with a provided
	     * string.  This query will use the backend index, so it will be fast even
	     * for large datasets.
	     *
	     * @param {string} key The key that the string to match is stored in.
	     * @param {string} prefix The substring that the value must start with.
	     * @param {string} modifiers The regular expression mode.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "startsWith",
	    value: function (key
	    /*: string*/
	    , prefix
	    /*: string*/
	    , modifiers
	    /*: string*/
	    )
	    /*: ParseQuery*/
	    {
	      if (typeof prefix !== 'string') {
	        throw new Error('The value being searched for must be a string.');
	      }

	      return this.matches(key, this._regexStartWith(prefix), modifiers);
	    }
	    /**
	     * Adds a constraint for finding string values that end with a provided
	     * string.  This will be slow for large datasets.
	     *
	     * @param {string} key The key that the string to match is stored in.
	     * @param {string} suffix The substring that the value must end with.
	     * @param {string} modifiers The regular expression mode.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "endsWith",
	    value: function (key
	    /*: string*/
	    , suffix
	    /*: string*/
	    , modifiers
	    /*: string*/
	    )
	    /*: ParseQuery*/
	    {
	      if (typeof suffix !== 'string') {
	        throw new Error('The value being searched for must be a string.');
	      }

	      return this.matches(key, quote(suffix) + '$', modifiers);
	    }
	    /**
	     * Adds a proximity based constraint for finding objects with key point
	     * values near the point given.
	     *
	     * @param {string} key The key that the Parse.GeoPoint is stored in.
	     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "near",
	    value: function (key
	    /*: string*/
	    , point
	    /*: ParseGeoPoint*/
	    )
	    /*: ParseQuery*/
	    {
	      if (!(point instanceof _ParseGeoPoint.default)) {
	        // Try to cast it as a GeoPoint
	        point = new _ParseGeoPoint.default(point);
	      }

	      return this._addCondition(key, '$nearSphere', point);
	    }
	    /**
	     * Adds a proximity based constraint for finding objects with key point
	     * values near the point given and within the maximum distance given.
	     *
	     * @param {string} key The key that the Parse.GeoPoint is stored in.
	     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.
	     * @param {number} maxDistance Maximum distance (in radians) of results to return.
	     * @param {boolean} sorted A Bool value that is true if results should be
	     * sorted by distance ascending, false is no sorting is required,
	     * defaults to true.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "withinRadians",
	    value: function (key
	    /*: string*/
	    , point
	    /*: ParseGeoPoint*/
	    , maxDistance
	    /*: number*/
	    , sorted
	    /*: boolean*/
	    )
	    /*: ParseQuery*/
	    {
	      if (sorted || sorted === undefined) {
	        this.near(key, point);
	        return this._addCondition(key, '$maxDistance', maxDistance);
	      } else {
	        return this._addCondition(key, '$geoWithin', {
	          $centerSphere: [[point.longitude, point.latitude], maxDistance]
	        });
	      }
	    }
	    /**
	     * Adds a proximity based constraint for finding objects with key point
	     * values near the point given and within the maximum distance given.
	     * Radius of earth used is 3958.8 miles.
	     *
	     * @param {string} key The key that the Parse.GeoPoint is stored in.
	     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.
	     * @param {number} maxDistance Maximum distance (in miles) of results to return.
	     * @param {boolean} sorted A Bool value that is true if results should be
	     * sorted by distance ascending, false is no sorting is required,
	     * defaults to true.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "withinMiles",
	    value: function (key
	    /*: string*/
	    , point
	    /*: ParseGeoPoint*/
	    , maxDistance
	    /*: number*/
	    , sorted
	    /*: boolean*/
	    )
	    /*: ParseQuery*/
	    {
	      return this.withinRadians(key, point, maxDistance / 3958.8, sorted);
	    }
	    /**
	     * Adds a proximity based constraint for finding objects with key point
	     * values near the point given and within the maximum distance given.
	     * Radius of earth used is 6371.0 kilometers.
	     *
	     * @param {string} key The key that the Parse.GeoPoint is stored in.
	     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.
	     * @param {number} maxDistance Maximum distance (in kilometers) of results to return.
	     * @param {boolean} sorted A Bool value that is true if results should be
	     * sorted by distance ascending, false is no sorting is required,
	     * defaults to true.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "withinKilometers",
	    value: function (key
	    /*: string*/
	    , point
	    /*: ParseGeoPoint*/
	    , maxDistance
	    /*: number*/
	    , sorted
	    /*: boolean*/
	    )
	    /*: ParseQuery*/
	    {
	      return this.withinRadians(key, point, maxDistance / 6371.0, sorted);
	    }
	    /**
	     * Adds a constraint to the query that requires a particular key's
	     * coordinates be contained within a given rectangular geographic bounding
	     * box.
	     *
	     * @param {string} key The key to be constrained.
	     * @param {Parse.GeoPoint} southwest
	     *     The lower-left inclusive corner of the box.
	     * @param {Parse.GeoPoint} northeast
	     *     The upper-right inclusive corner of the box.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "withinGeoBox",
	    value: function (key
	    /*: string*/
	    , southwest
	    /*: ParseGeoPoint*/
	    , northeast
	    /*: ParseGeoPoint*/
	    )
	    /*: ParseQuery*/
	    {
	      if (!(southwest instanceof _ParseGeoPoint.default)) {
	        southwest = new _ParseGeoPoint.default(southwest);
	      }

	      if (!(northeast instanceof _ParseGeoPoint.default)) {
	        northeast = new _ParseGeoPoint.default(northeast);
	      }

	      this._addCondition(key, '$within', {
	        $box: [southwest, northeast]
	      });

	      return this;
	    }
	    /**
	     * Adds a constraint to the query that requires a particular key's
	     * coordinates be contained within and on the bounds of a given polygon.
	     * Supports closed and open (last point is connected to first) paths
	     *
	     * Polygon must have at least 3 points
	     *
	     * @param {string} key The key to be constrained.
	     * @param {Array} points Array of Coordinates / GeoPoints
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "withinPolygon",
	    value: function (key
	    /*: string*/
	    , points
	    /*: Array<Array<number>>*/
	    )
	    /*: ParseQuery*/
	    {
	      return this._addCondition(key, '$geoWithin', {
	        $polygon: points
	      });
	    }
	    /**
	     * Add a constraint to the query that requires a particular key's
	     * coordinates that contains a ParseGeoPoint
	     *
	     * @param {string} key The key to be constrained.
	     * @param {Parse.GeoPoint} point
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "polygonContains",
	    value: function (key
	    /*: string*/
	    , point
	    /*: ParseGeoPoint*/
	    )
	    /*: ParseQuery*/
	    {
	      return this._addCondition(key, '$geoIntersects', {
	        $point: point
	      });
	    }
	    /** Query Orderings **/

	    /**
	     * Sorts the results in ascending order by the given key.
	     *
	     * @param {(string|string[])} keys The key to order by, which is a
	     * string of comma separated values, or an Array of keys, or multiple keys.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "ascending",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      this._order = [];

	      for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {
	        keys[_key5] = arguments[_key5];
	      }

	      return this.addAscending.apply(this, keys);
	    }
	    /**
	     * Sorts the results in ascending order by the given key,
	     * but can also add secondary sort descriptors without overwriting _order.
	     *
	     * @param {(string|string[])} keys The key to order by, which is a
	     * string of comma separated values, or an Array of keys, or multiple keys.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "addAscending",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      var _this9 = this;

	      if (!this._order) {
	        this._order = [];
	      }

	      for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {
	        keys[_key6] = arguments[_key6];
	      }

	      (0, _forEach.default)(keys).call(keys, function (key) {
	        var _context16;

	        if ((0, _isArray.default)(key)) {
	          key = key.join();
	        }

	        _this9._order = (0, _concat.default)(_context16 = _this9._order).call(_context16, key.replace(/\s/g, '').split(','));
	      });
	      return this;
	    }
	    /**
	     * Sorts the results in descending order by the given key.
	     *
	     * @param {(string|string[])} keys The key to order by, which is a
	     * string of comma separated values, or an Array of keys, or multiple keys.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "descending",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      this._order = [];

	      for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {
	        keys[_key7] = arguments[_key7];
	      }

	      return this.addDescending.apply(this, keys);
	    }
	    /**
	     * Sorts the results in descending order by the given key,
	     * but can also add secondary sort descriptors without overwriting _order.
	     *
	     * @param {(string|string[])} keys The key to order by, which is a
	     * string of comma separated values, or an Array of keys, or multiple keys.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "addDescending",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      var _this10 = this;

	      if (!this._order) {
	        this._order = [];
	      }

	      for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {
	        keys[_key8] = arguments[_key8];
	      }

	      (0, _forEach.default)(keys).call(keys, function (key) {
	        var _context17, _context18;

	        if ((0, _isArray.default)(key)) {
	          key = key.join();
	        }

	        _this10._order = (0, _concat.default)(_context17 = _this10._order).call(_context17, (0, _map2.default)(_context18 = key.replace(/\s/g, '').split(',')).call(_context18, function (k) {
	          return '-' + k;
	        }));
	      });
	      return this;
	    }
	    /** Query Options **/

	    /**
	     * Sets the number of results to skip before returning any results.
	     * This is useful for pagination.
	     * Default is to skip zero results.
	     *
	     * @param {number} n the number of results to skip.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "skip",
	    value: function (n
	    /*: number*/
	    )
	    /*: ParseQuery*/
	    {
	      if (typeof n !== 'number' || n < 0) {
	        throw new Error('You can only skip by a positive number');
	      }

	      this._skip = n;
	      return this;
	    }
	    /**
	     * Sets the limit of the number of results to return. The default limit is 100.
	     *
	     * @param {number} n the number of results to limit to.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "limit",
	    value: function (n
	    /*: number*/
	    )
	    /*: ParseQuery*/
	    {
	      if (typeof n !== 'number') {
	        throw new Error('You can only set the limit to a numeric value');
	      }

	      this._limit = n;
	      return this;
	    }
	    /**
	     * Sets the flag to include with response the total number of objects satisfying this query,
	     * despite limits/skip. Might be useful for pagination.
	     * Note that result of this query will be wrapped as an object with
	     * `results`: holding {ParseObject} array and `count`: integer holding total number
	     *
	     * @param {boolean} includeCount false - disable, true - enable.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "withCount",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      var includeCount
	      /*: boolean*/
	      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	      if (typeof includeCount !== 'boolean') {
	        throw new Error('You can only set withCount to a boolean value');
	      }

	      this._count = includeCount;
	      return this;
	    }
	    /**
	     * Includes nested Parse.Objects for the provided key.  You can use dot
	     * notation to specify which fields in the included object are also fetched.
	     *
	     * You can include all nested Parse.Objects by passing in '*'.
	     * Requires Parse Server 3.0.0+
	     * <pre>query.include('*');</pre>
	     *
	     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "include",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      var _this11 = this;

	      for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {
	        keys[_key9] = arguments[_key9];
	      }

	      (0, _forEach.default)(keys).call(keys, function (key) {
	        if ((0, _isArray.default)(key)) {
	          var _context19;

	          _this11._include = (0, _concat.default)(_context19 = _this11._include).call(_context19, key);
	        } else {
	          _this11._include.push(key);
	        }
	      });
	      return this;
	    }
	    /**
	     * Includes all nested Parse.Objects one level deep.
	     *
	     * Requires Parse Server 3.0.0+
	     *
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "includeAll",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      return this.include('*');
	    }
	    /**
	     * Restricts the fields of the returned Parse.Objects to include only the
	     * provided keys.  If this is called multiple times, then all of the keys
	     * specified in each of the calls will be included.
	     *
	     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "select",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      var _this12 = this;

	      if (!this._select) {
	        this._select = [];
	      }

	      for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {
	        keys[_key10] = arguments[_key10];
	      }

	      (0, _forEach.default)(keys).call(keys, function (key) {
	        if ((0, _isArray.default)(key)) {
	          var _context20;

	          _this12._select = (0, _concat.default)(_context20 = _this12._select).call(_context20, key);
	        } else {
	          _this12._select.push(key);
	        }
	      });
	      return this;
	    }
	    /**
	     * Restricts the fields of the returned Parse.Objects to all keys except the
	     * provided keys. Exclude takes precedence over select and include.
	     *
	     * Requires Parse Server 3.6.0+
	     *
	     * @param {...string|Array<string>} keys The name(s) of the key(s) to exclude.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "exclude",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      var _this13 = this;

	      for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {
	        keys[_key11] = arguments[_key11];
	      }

	      (0, _forEach.default)(keys).call(keys, function (key) {
	        if ((0, _isArray.default)(key)) {
	          var _context21;

	          _this13._exclude = (0, _concat.default)(_context21 = _this13._exclude).call(_context21, key);
	        } else {
	          _this13._exclude.push(key);
	        }
	      });
	      return this;
	    }
	    /**
	     * Changes the read preference that the backend will use when performing the query to the database.
	     *
	     * @param {string} readPreference The read preference for the main query.
	     * @param {string} includeReadPreference The read preference for the queries to include pointers.
	     * @param {string} subqueryReadPreference The read preference for the sub queries.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "readPreference",
	    value: function (_readPreference
	    /*: string*/
	    , includeReadPreference
	    /*:: ?: string*/
	    , subqueryReadPreference
	    /*:: ?: string*/
	    )
	    /*: ParseQuery*/
	    {
	      this._readPreference = _readPreference;
	      this._includeReadPreference = includeReadPreference;
	      this._subqueryReadPreference = subqueryReadPreference;
	      return this;
	    }
	    /**
	     * Subscribe this query to get liveQuery updates
	     *
	     * @param {string} sessionToken (optional) Defaults to the currentUser
	     * @returns {Promise<LiveQuerySubscription>} Returns the liveQuerySubscription, it's an event emitter
	     * which can be used to get liveQuery updates.
	     */

	  }, {
	    key: "subscribe",
	    value: function () {
	      var _subscribe = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(sessionToken
	      /*:: ?: string*/
	      ) {
	        var currentUser, liveQueryClient, subscription;
	        return _regenerator.default.wrap(function (_context22) {
	          while (1) {
	            switch (_context22.prev = _context22.next) {
	              case 0:
	                _context22.next = 2;
	                return _CoreManager.default.getUserController().currentUserAsync();

	              case 2:
	                currentUser = _context22.sent;

	                if (!sessionToken) {
	                  sessionToken = currentUser ? currentUser.getSessionToken() : undefined;
	                }

	                _context22.next = 6;
	                return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();

	              case 6:
	                liveQueryClient = _context22.sent;

	                if (liveQueryClient.shouldOpen()) {
	                  liveQueryClient.open();
	                }

	                subscription = liveQueryClient.subscribe(this, sessionToken);
	                return _context22.abrupt("return", subscription.subscribePromise.then(function () {
	                  return subscription;
	                }));

	              case 10:
	              case "end":
	                return _context22.stop();
	            }
	          }
	        }, _callee7, this);
	      }));

	      return function () {
	        return _subscribe.apply(this, arguments);
	      };
	    }()
	    /**
	     * Constructs a Parse.Query that is the OR of the passed in queries.  For
	     * example:
	     * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>
	     *
	     * will create a compoundQuery that is an or of the query1, query2, and
	     * query3.
	     *
	     * @param {...Parse.Query} queries The list of queries to OR.
	     * @static
	     * @returns {Parse.Query} The query that is the OR of the passed in queries.
	     */

	  }, {
	    key: "fromNetwork",
	    value:
	    /**
	     * Change the source of this query to the server.
	     *
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */
	    function ()
	    /*: ParseQuery*/
	    {
	      this._queriesLocalDatastore = false;
	      this._localDatastorePinName = null;
	      return this;
	    }
	    /**
	     * Changes the source of this query to all pinned objects.
	     *
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "fromLocalDatastore",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      return this.fromPinWithName(null);
	    }
	    /**
	     * Changes the source of this query to the default group of pinned objects.
	     *
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "fromPin",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      return this.fromPinWithName(LocalDatastoreUtils.DEFAULT_PIN);
	    }
	    /**
	     * Changes the source of this query to a specific group of pinned objects.
	     *
	     * @param {string} name The name of query source.
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "fromPinWithName",
	    value: function (name
	    /*:: ?: string*/
	    )
	    /*: ParseQuery*/
	    {
	      var localDatastore = _CoreManager.default.getLocalDatastore();

	      if (localDatastore.checkIfEnabled()) {
	        this._queriesLocalDatastore = true;
	        this._localDatastorePinName = name;
	      }

	      return this;
	    }
	    /**
	     * Cancels the current network request (if any is running).
	     *
	     * @returns {Parse.Query} Returns the query, so you can chain this call.
	     */

	  }, {
	    key: "cancel",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      var _this14 = this;

	      if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === 'function') {
	        this._xhrRequest.task._aborted = true;

	        this._xhrRequest.task.abort();

	        this._xhrRequest.task = null;

	        this._xhrRequest.onchange = function () {};

	        return this;
	      }

	      return this._xhrRequest.onchange = function () {
	        return _this14.cancel();
	      };
	    }
	  }, {
	    key: "_setRequestTask",
	    value: function (options) {
	      var _this15 = this;

	      options.requestTask = function (task) {
	        _this15._xhrRequest.task = task;

	        _this15._xhrRequest.onchange();
	      };
	    }
	  }], [{
	    key: "fromJSON",
	    value: function (className
	    /*: string*/
	    , json
	    /*: QueryJSON*/
	    )
	    /*: ParseQuery*/
	    {
	      var query = new ParseQuery(className);
	      return query.withJSON(json);
	    }
	  }, {
	    key: "or",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {
	        queries[_key12] = arguments[_key12];
	      }

	      var className = _getClassNameFromQueries(queries);

	      var query = new ParseQuery(className);

	      query._orQuery(queries);

	      return query;
	    }
	    /**
	     * Constructs a Parse.Query that is the AND of the passed in queries.  For
	     * example:
	     * <pre>var compoundQuery = Parse.Query.and(query1, query2, query3);</pre>
	     *
	     * will create a compoundQuery that is an and of the query1, query2, and
	     * query3.
	     *
	     * @param {...Parse.Query} queries The list of queries to AND.
	     * @static
	     * @returns {Parse.Query} The query that is the AND of the passed in queries.
	     */

	  }, {
	    key: "and",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {
	        queries[_key13] = arguments[_key13];
	      }

	      var className = _getClassNameFromQueries(queries);

	      var query = new ParseQuery(className);

	      query._andQuery(queries);

	      return query;
	    }
	    /**
	     * Constructs a Parse.Query that is the NOR of the passed in queries.  For
	     * example:
	     * <pre>const compoundQuery = Parse.Query.nor(query1, query2, query3);</pre>
	     *
	     * will create a compoundQuery that is a nor of the query1, query2, and
	     * query3.
	     *
	     * @param {...Parse.Query} queries The list of queries to NOR.
	     * @static
	     * @returns {Parse.Query} The query that is the NOR of the passed in queries.
	     */

	  }, {
	    key: "nor",
	    value: function ()
	    /*: ParseQuery*/
	    {
	      for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {
	        queries[_key14] = arguments[_key14];
	      }

	      var className = _getClassNameFromQueries(queries);

	      var query = new ParseQuery(className);

	      query._norQuery(queries);

	      return query;
	    }
	  }]);
	  return ParseQuery;
	}();

	var DefaultController = {
	  find: function (className
	  /*: string*/
	  , params
	  /*: QueryJSON*/
	  , options
	  /*: RequestOptions*/
	  )
	  /*: Promise<Array<ParseObject>>*/
	  {
	    var RESTController = _CoreManager.default.getRESTController();

	    return RESTController.request('GET', 'classes/' + className, params, options);
	  },
	  aggregate: function (className
	  /*: string*/
	  , params
	  /*: any*/
	  , options
	  /*: RequestOptions*/
	  )
	  /*: Promise<Array<mixed>>*/
	  {
	    var RESTController = _CoreManager.default.getRESTController();

	    return RESTController.request('GET', 'aggregate/' + className, params, options);
	  }
	};

	_CoreManager.default.setQueryController(DefaultController);

	var _default = ParseQuery;
	exports.default = _default;
	});

	var ParseRelation_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _isArray = interopRequireDefault(isArray$3);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _defineProperty2 = interopRequireDefault(defineProperty$b);



	interopRequireDefault(ParseObject_1);

	var _ParseQuery = interopRequireDefault(ParseQuery_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */

	/**
	 * Creates a new Relation for the given parent object and key. This
	 * constructor should rarely be used directly, but rather created by
	 * Parse.Object.relation.
	 *
	 * <p>
	 * A class that is used to access all of the children of a many-to-many
	 * relationship.  Each instance of Parse.Relation is associated with a
	 * particular parent object and key.
	 * </p>
	 *
	 * @alias Parse.Relation
	 */


	var ParseRelation = /*#__PURE__*/function () {
	  /**
	   * @param {Parse.Object} parent The parent of this relation.
	   * @param {string} key The key for this relation on the parent.
	   */
	  function ParseRelation(parent
	  /*: ?ParseObject*/
	  , key
	  /*: ?string*/
	  ) {
	    (0, _classCallCheck2.default)(this, ParseRelation);
	    (0, _defineProperty2.default)(this, "parent", void 0);
	    (0, _defineProperty2.default)(this, "key", void 0);
	    (0, _defineProperty2.default)(this, "targetClassName", void 0);
	    this.parent = parent;
	    this.key = key;
	    this.targetClassName = null;
	  }
	  /*
	   * Makes sure that this relation has the right parent and key.
	   */


	  (0, _createClass2.default)(ParseRelation, [{
	    key: "_ensureParentAndKey",
	    value: function (parent
	    /*: ParseObject*/
	    , key
	    /*: string*/
	    ) {
	      this.key = this.key || key;

	      if (this.key !== key) {
	        throw new Error('Internal Error. Relation retrieved from two different keys.');
	      }

	      if (this.parent) {
	        if (this.parent.className !== parent.className) {
	          throw new Error('Internal Error. Relation retrieved from two different Objects.');
	        }

	        if (this.parent.id) {
	          if (this.parent.id !== parent.id) {
	            throw new Error('Internal Error. Relation retrieved from two different Objects.');
	          }
	        } else if (parent.id) {
	          this.parent = parent;
	        }
	      } else {
	        this.parent = parent;
	      }
	    }
	    /**
	     * Adds a Parse.Object or an array of Parse.Objects to the relation.
	     *
	     * @param {(Parse.Object|Array)} objects The item or items to add.
	     * @returns {Parse.Object} The parent of the relation.
	     */

	  }, {
	    key: "add",
	    value: function (objects
	    /*: ParseObject | Array<ParseObject | string>*/
	    )
	    /*: ParseObject*/
	    {
	      if (!(0, _isArray.default)(objects)) {
	        objects = [objects];
	      }

	      var change = new ParseOp.RelationOp(objects, []);
	      var parent = this.parent;

	      if (!parent) {
	        throw new Error('Cannot add to a Relation without a parent');
	      }

	      if (objects.length === 0) {
	        return parent;
	      }

	      parent.set(this.key, change);
	      this.targetClassName = change._targetClassName;
	      return parent;
	    }
	    /**
	     * Removes a Parse.Object or an array of Parse.Objects from this relation.
	     *
	     * @param {(Parse.Object|Array)} objects The item or items to remove.
	     */

	  }, {
	    key: "remove",
	    value: function (objects
	    /*: ParseObject | Array<ParseObject | string>*/
	    ) {
	      if (!(0, _isArray.default)(objects)) {
	        objects = [objects];
	      }

	      var change = new ParseOp.RelationOp([], objects);

	      if (!this.parent) {
	        throw new Error('Cannot remove from a Relation without a parent');
	      }

	      if (objects.length === 0) {
	        return;
	      }

	      this.parent.set(this.key, change);
	      this.targetClassName = change._targetClassName;
	    }
	    /**
	     * Returns a JSON version of the object suitable for saving to disk.
	     *
	     * @returns {object} JSON representation of Relation
	     */

	  }, {
	    key: "toJSON",
	    value: function ()
	    /*: { __type: 'Relation', className: ?string }*/
	    {
	      return {
	        __type: 'Relation',
	        className: this.targetClassName
	      };
	    }
	    /**
	     * Returns a Parse.Query that is limited to objects in this
	     * relation.
	     *
	     * @returns {Parse.Query} Relation Query
	     */

	  }, {
	    key: "query",
	    value: function query()
	    /*: ParseQuery*/
	    {
	      var query;
	      var parent = this.parent;

	      if (!parent) {
	        throw new Error('Cannot construct a query for a Relation without a parent');
	      }

	      if (!this.targetClassName) {
	        query = new _ParseQuery.default(parent.className);
	        query._extraOptions.redirectClassNameForKey = this.key;
	      } else {
	        query = new _ParseQuery.default(this.targetClassName);
	      }

	      query._addCondition('$relatedTo', 'object', {
	        __type: 'Pointer',
	        className: parent.className,
	        objectId: parent.id
	      });

	      query._addCondition('$relatedTo', 'key', this.key);

	      return query;
	    }
	  }]);
	  return ParseRelation;
	}();

	var _default = ParseRelation;
	exports.default = _default;
	});

	var canBeSerialized_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = canBeSerialized;

	var _isArray = interopRequireDefault(isArray$3);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _ParseFile = interopRequireDefault(ParseFile_1);

	var _ParseObject = interopRequireDefault(ParseObject_1);

	var _ParseRelation = interopRequireDefault(ParseRelation_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */


	function canBeSerialized(obj
	/*: ParseObject*/
	)
	/*: boolean*/
	{
	  if (!(obj instanceof _ParseObject.default)) {
	    return true;
	  }

	  var attributes = obj.attributes;

	  for (var attr in attributes) {
	    var val = attributes[attr];

	    if (!canBeSerializedHelper(val)) {
	      return false;
	    }
	  }

	  return true;
	}

	function canBeSerializedHelper(value
	/*: any*/
	)
	/*: boolean*/
	{
	  if ((0, _typeof2.default)(value) !== 'object') {
	    return true;
	  }

	  if (value instanceof _ParseRelation.default) {
	    return true;
	  }

	  if (value instanceof _ParseObject.default) {
	    return !!value.id;
	  }

	  if (value instanceof _ParseFile.default) {
	    if (value.url()) {
	      return true;
	    }

	    return false;
	  }

	  if ((0, _isArray.default)(value)) {
	    for (var i = 0; i < value.length; i++) {
	      if (!canBeSerializedHelper(value[i])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  for (var k in value) {
	    if (!canBeSerializedHelper(value[k])) {
	      return false;
	    }
	  }

	  return true;
	}
	});

	var _escape = createCommonjsModule(function (module, exports) {



	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = escape;
	/*
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */

	var encoded = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '/': '&#x2F;',
	  "'": '&#x27;',
	  '"': '&quot;'
	};

	function escape(str
	/*: string*/
	)
	/*: string*/
	{
	  return str.replace(/[&<>\/'"]/g, function (char) {
	    return encoded[char];
	  });
	}
	});

	var MSIE = /MSIE .\./.test(engineUserAgent); // <- dirty ie9- check
	var Function$3 = global$1.Function;

	var wrap$1 = function (scheduler) {
	  return MSIE ? function (handler, timeout /* , ...arguments */) {
	    var boundArgs = validateArgumentsLength(arguments.length, 1) > 2;
	    var fn = isCallable(handler) ? handler : Function$3(handler);
	    var args = boundArgs ? arraySlice(arguments, 2) : undefined;
	    return scheduler(boundArgs ? function () {
	      functionApply(fn, this, args);
	    } : fn, timeout);
	  } : scheduler;
	};

	// ie9- setTimeout & setInterval additional parameters fix
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
	var schedulersFix = {
	  // `setTimeout` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
	  setTimeout: wrap$1(global$1.setTimeout),
	  // `setInterval` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
	  setInterval: wrap$1(global$1.setInterval)
	};

	var setInterval$1 = schedulersFix.setInterval;

	// ie9- setInterval additional parameters fix
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
	_export({ global: true, bind: true, forced: global$1.setInterval !== setInterval$1 }, {
	  setInterval: setInterval$1
	});

	var setTimeout$1 = schedulersFix.setTimeout;

	// ie9- setTimeout additional parameters fix
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
	_export({ global: true, bind: true, forced: global$1.setTimeout !== setTimeout$1 }, {
	  setTimeout: setTimeout$1
	});

	var setInterval$2 = path.setInterval;

	var setInterval$3 = setInterval$2;

	var $findIndex = arrayIteration.findIndex;


	var FIND_INDEX = 'findIndex';
	var SKIPS_HOLES$1 = true;

	// Shouldn't skip holes
	if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES$1 = false; });

	// `Array.prototype.findIndex` method
	// https://tc39.es/ecma262/#sec-array.prototype.findindex
	_export({ target: 'Array', proto: true, forced: SKIPS_HOLES$1 }, {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var findIndex$1 = entryVirtual('Array').findIndex;

	var ArrayPrototype$c = Array.prototype;

	var findIndex$2 = function (it) {
	  var own = it.findIndex;
	  return it === ArrayPrototype$c || (objectIsPrototypeOf(ArrayPrototype$c, it) && own === ArrayPrototype$c.findIndex) ? findIndex$1 : own;
	};

	var findIndex$3 = findIndex$2;

	var findIndex$4 = findIndex$3;

	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 * @private
	 */

	/* global localStorage */

	var StorageController = {
	  async: 0,
	  getItem: function (path
	  /*: string*/
	  )
	  /*: ?string*/
	  {
	    return localStorage.getItem(path);
	  },
	  setItem: function (path
	  /*: string*/
	  , value
	  /*: string*/
	  ) {
	    try {
	      localStorage.setItem(path, value);
	    } catch (e) {
	      // Quota exceeded, possibly due to Safari Private Browsing mode
	      console.log(e.message);
	    }
	  },
	  removeItem: function (path
	  /*: string*/
	  ) {
	    localStorage.removeItem(path);
	  },
	  getAllKeys: function () {
	    var keys = [];

	    for (var i = 0; i < localStorage.length; i += 1) {
	      keys.push(localStorage.key(i));
	    }

	    return keys;
	  },
	  clear: function () {
	    localStorage.clear();
	  }
	};
	var StorageController_browser = StorageController;

	var _promise = interopRequireDefault(promise$3);

	var _CoreManager = interopRequireDefault(CoreManager);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */


	var Storage = {
	  async: function ()
	  /*: boolean*/
	  {
	    var controller = _CoreManager.default.getStorageController();

	    return !!controller.async;
	  },
	  getItem: function (path
	  /*: string*/
	  )
	  /*: ?string*/
	  {
	    var controller = _CoreManager.default.getStorageController();

	    if (controller.async === 1) {
	      throw new Error('Synchronous storage is not supported by the current storage controller');
	    }

	    return controller.getItem(path);
	  },
	  getItemAsync: function (path
	  /*: string*/
	  )
	  /*: Promise<string>*/
	  {
	    var controller = _CoreManager.default.getStorageController();

	    if (controller.async === 1) {
	      return controller.getItemAsync(path);
	    }

	    return _promise.default.resolve(controller.getItem(path));
	  },
	  setItem: function (path
	  /*: string*/
	  , value
	  /*: string*/
	  )
	  /*: void*/
	  {
	    var controller = _CoreManager.default.getStorageController();

	    if (controller.async === 1) {
	      throw new Error('Synchronous storage is not supported by the current storage controller');
	    }

	    return controller.setItem(path, value);
	  },
	  setItemAsync: function (path
	  /*: string*/
	  , value
	  /*: string*/
	  )
	  /*: Promise<void>*/
	  {
	    var controller = _CoreManager.default.getStorageController();

	    if (controller.async === 1) {
	      return controller.setItemAsync(path, value);
	    }

	    return _promise.default.resolve(controller.setItem(path, value));
	  },
	  removeItem: function (path
	  /*: string*/
	  )
	  /*: void*/
	  {
	    var controller = _CoreManager.default.getStorageController();

	    if (controller.async === 1) {
	      throw new Error('Synchronous storage is not supported by the current storage controller');
	    }

	    return controller.removeItem(path);
	  },
	  removeItemAsync: function (path
	  /*: string*/
	  )
	  /*: Promise<void>*/
	  {
	    var controller = _CoreManager.default.getStorageController();

	    if (controller.async === 1) {
	      return controller.removeItemAsync(path);
	    }

	    return _promise.default.resolve(controller.removeItem(path));
	  },
	  getAllKeys: function ()
	  /*: Array<string>*/
	  {
	    var controller = _CoreManager.default.getStorageController();

	    if (controller.async === 1) {
	      throw new Error('Synchronous storage is not supported by the current storage controller');
	    }

	    return controller.getAllKeys();
	  },
	  getAllKeysAsync: function ()
	  /*: Promise<Array<string>>*/
	  {
	    var controller = _CoreManager.default.getStorageController();

	    if (controller.async === 1) {
	      return controller.getAllKeysAsync();
	    }

	    return _promise.default.resolve(controller.getAllKeys());
	  },
	  generatePath: function (path
	  /*: string*/
	  )
	  /*: string*/
	  {
	    if (!_CoreManager.default.get('APPLICATION_ID')) {
	      throw new Error('You need to call Parse.initialize before using Parse.');
	    }

	    if (typeof path !== 'string') {
	      throw new Error('Tried to get a Storage path that was not a String.');
	    }

	    if (path[0] === '/') {
	      path = path.substr(1);
	    }

	    return 'Parse/' + _CoreManager.default.get('APPLICATION_ID') + '/' + path;
	  },
	  _clear: function () {
	    var controller = _CoreManager.default.getStorageController();

	    if (controller.hasOwnProperty('clear')) {
	      controller.clear();
	    }
	  }
	};
	var Storage_1 = Storage;

	_CoreManager.default.setStorageController(StorageController_browser);

	var _find = interopRequireDefault(find$4);

	var _setInterval2 = interopRequireDefault(setInterval$3);

	var _toConsumableArray2 = interopRequireDefault(toConsumableArray);

	var _findIndex = interopRequireDefault(findIndex$4);

	var _splice = interopRequireDefault(splice$4);

	var _stringify = interopRequireDefault(stringify$2);

	var _regenerator = interopRequireDefault(regenerator);

	var _asyncToGenerator2 = interopRequireDefault(asyncToGenerator);

	var _CoreManager$1 = interopRequireDefault(CoreManager);

	var _ParseObject = interopRequireDefault(ParseObject_1);

	var _ParseQuery = interopRequireDefault(ParseQuery_1);

	var _Storage = interopRequireDefault(Storage_1);
	/**
	 * https://github.com/francimedia/parse-js-local-storage
	 *
	 * @flow
	 */


	var QUEUE_KEY = 'Parse/Eventually/Queue';
	var queueCache = [];
	var dirtyCache = true;
	var polling = undefined;
	/**
	 * Provides utility functions to queue objects that will be
	 * saved to the server at a later date.
	 *
	 * @class Parse.EventuallyQueue
	 * @static
	 */

	var EventuallyQueue = {
	  /**
	   * Add object to queue with save operation.
	   *
	   * @function save
	   * @name Parse.EventuallyQueue.save
	   * @param {ParseObject} object Parse.Object to be saved eventually
	   * @param {object} [serverOptions] See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Object.html#save Parse.Object.save} options.
	   * @returns {Promise} A promise that is fulfilled if object is added to queue.
	   * @static
	   * @see Parse.Object#saveEventually
	   */
	  save: function (object
	  /*: ParseObject*/
	  )
	  /*: Promise*/
	  {
	    var serverOptions
	    /*: SaveOptions*/
	    = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    return this.enqueue('save', object, serverOptions);
	  },

	  /**
	   * Add object to queue with save operation.
	   *
	   * @function destroy
	   * @name Parse.EventuallyQueue.destroy
	   * @param {ParseObject} object Parse.Object to be destroyed eventually
	   * @param {object} [serverOptions] See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Object.html#destroy Parse.Object.destroy} options
	   * @returns {Promise} A promise that is fulfilled if object is added to queue.
	   * @static
	   * @see Parse.Object#destroyEventually
	   */
	  destroy: function (object
	  /*: ParseObject*/
	  )
	  /*: Promise*/
	  {
	    var serverOptions
	    /*: RequestOptions*/
	    = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    return this.enqueue('destroy', object, serverOptions);
	  },

	  /**
	   * Generate unique identifier to avoid duplicates and maintain previous state.
	   *
	   * @param {string} action save / destroy
	   * @param {object} object Parse.Object to be queued
	   * @returns {string}
	   * @static
	   * @ignore
	   */
	  generateQueueId: function (action
	  /*: string*/
	  , object
	  /*: ParseObject*/
	  )
	  /*: string*/
	  {
	    object._getId();

	    var className = object.className,
	        id = object.id,
	        _localId = object._localId;

	    var uniqueId = object.get('hash') || _localId;

	    return [action, className, id, uniqueId].join('_');
	  },

	  /**
	   * Build queue object and add to queue.
	   *
	   * @param {string} action save / destroy
	   * @param {object} object Parse.Object to be queued
	   * @param {object} [serverOptions]
	   * @returns {Promise} A promise that is fulfilled if object is added to queue.
	   * @static
	   * @ignore
	   */
	  enqueue: function (action
	  /*: string*/
	  , object
	  /*: ParseObject*/
	  , serverOptions
	  /*: SaveOptions | RequestOptions*/
	  )
	  /*: Promise*/
	  {
	    var _this = this;

	    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
	      var queueData, queueId, index, prop;
	      return _regenerator.default.wrap(function (_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return _this.getQueue();

	            case 2:
	              queueData = _context.sent;
	              queueId = _this.generateQueueId(action, object);
	              index = _this.queueItemExists(queueData, queueId);

	              if (index > -1) {
	                // Add cached values to new object if they don't exist
	                for (prop in queueData[index].object) {
	                  if (typeof object.get(prop) === 'undefined') {
	                    object.set(prop, queueData[index].object[prop]);
	                  }
	                }
	              } else {
	                index = queueData.length;
	              }

	              queueData[index] = {
	                queueId: queueId,
	                action: action,
	                object: object.toJSON(),
	                serverOptions: serverOptions,
	                id: object.id,
	                className: object.className,
	                hash: object.get('hash'),
	                createdAt: new Date()
	              };
	              return _context.abrupt("return", _this.setQueue(queueData));

	            case 8:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }))();
	  },
	  store: function (data) {
	    return _Storage.default.setItemAsync(QUEUE_KEY, (0, _stringify.default)(data));
	  },
	  load: function () {
	    return _Storage.default.getItemAsync(QUEUE_KEY);
	  },

	  /**
	   * Sets the in-memory queue from local storage and returns.
	   *
	   * @function getQueue
	   * @name Parse.EventuallyQueue.getQueue
	   * @returns {Promise<Array>}
	   * @static
	   */
	  getQueue: function ()
	  /*: Promise<Array>*/
	  {
	    var _this2 = this;

	    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
	      return _regenerator.default.wrap(function (_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              if (!dirtyCache) {
	                _context2.next = 10;
	                break;
	              }

	              _context2.t0 = JSON;
	              _context2.next = 4;
	              return _this2.load();

	            case 4:
	              _context2.t1 = _context2.sent;

	              if (_context2.t1) {
	                _context2.next = 7;
	                break;
	              }

	              _context2.t1 = '[]';

	            case 7:
	              _context2.t2 = _context2.t1;
	              queueCache = _context2.t0.parse.call(_context2.t0, _context2.t2);
	              dirtyCache = false;

	            case 10:
	              return _context2.abrupt("return", queueCache);

	            case 11:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }))();
	  },

	  /**
	   * Saves the queue to local storage
	   *
	   * @param {Queue} queue Queue containing Parse.Object data.
	   * @returns {Promise} A promise that is fulfilled when queue is stored.
	   * @static
	   * @ignore
	   */
	  setQueue: function (queue
	  /*: Queue*/
	  )
	  /*: Promise<void>*/
	  {
	    queueCache = queue;
	    return this.store(queueCache);
	  },

	  /**
	   * Removes Parse.Object data from queue.
	   *
	   * @param {string} queueId Unique identifier for Parse.Object data.
	   * @returns {Promise} A promise that is fulfilled when queue is stored.
	   * @static
	   * @ignore
	   */
	  remove: function (queueId
	  /*: string*/
	  )
	  /*: Promise<void>*/
	  {
	    var _this3 = this;

	    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
	      var queueData, index;
	      return _regenerator.default.wrap(function (_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              _context3.next = 2;
	              return _this3.getQueue();

	            case 2:
	              queueData = _context3.sent;
	              index = _this3.queueItemExists(queueData, queueId);

	              if (!(index > -1)) {
	                _context3.next = 8;
	                break;
	              }

	              (0, _splice.default)(queueData).call(queueData, index, 1);
	              _context3.next = 8;
	              return _this3.setQueue(queueData);

	            case 8:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3);
	    }))();
	  },

	  /**
	   * Removes all objects from queue.
	   *
	   * @function clear
	   * @name Parse.EventuallyQueue.clear
	   * @returns {Promise} A promise that is fulfilled when queue is cleared.
	   * @static
	   */
	  clear: function ()
	  /*: Promise*/
	  {
	    queueCache = [];
	    return this.store([]);
	  },

	  /**
	   * Return the index of a queueId in the queue. Returns -1 if not found.
	   *
	   * @param {Queue} queue Queue containing Parse.Object data.
	   * @param {string} queueId Unique identifier for Parse.Object data.
	   * @returns {number}
	   * @static
	   * @ignore
	   */
	  queueItemExists: function (queue
	  /*: Queue*/
	  , queueId
	  /*: string*/
	  )
	  /*: number*/
	  {
	    return (0, _findIndex.default)(queue).call(queue, function (data) {
	      return data.queueId === queueId;
	    });
	  },

	  /**
	   * Return the number of objects in the queue.
	   *
	   * @function length
	   * @name Parse.EventuallyQueue.length
	   * @returns {number}
	   * @static
	   */
	  length: function ()
	  /*: number*/
	  {
	    var _this4 = this;

	    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
	      var queueData;
	      return _regenerator.default.wrap(function (_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              _context4.next = 2;
	              return _this4.getQueue();

	            case 2:
	              queueData = _context4.sent;
	              return _context4.abrupt("return", queueData.length);

	            case 4:
	            case "end":
	              return _context4.stop();
	          }
	        }
	      }, _callee4);
	    }))();
	  },

	  /**
	   * Sends the queue to the server.
	   *
	   * @function sendQueue
	   * @name Parse.EventuallyQueue.sendQueue
	   * @returns {Promise<boolean>} Returns true if queue was sent successfully.
	   * @static
	   */
	  sendQueue: function ()
	  /*: Promise<boolean>*/
	  {
	    var _this5 = this;

	    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {
	      var queue, queueData, i, queueObject, id, hash, className, ObjectType;
	      return _regenerator.default.wrap(function (_context5) {
	        while (1) {
	          switch (_context5.prev = _context5.next) {
	            case 0:
	              _context5.next = 2;
	              return _this5.getQueue();

	            case 2:
	              queue = _context5.sent;
	              queueData = (0, _toConsumableArray2.default)(queue);

	              if (!(queueData.length === 0)) {
	                _context5.next = 6;
	                break;
	              }

	              return _context5.abrupt("return", false);

	            case 6:
	              i = 0;

	            case 7:
	              if (!(i < queueData.length)) {
	                _context5.next = 26;
	                break;
	              }

	              queueObject = queueData[i];
	              id = queueObject.id, hash = queueObject.hash, className = queueObject.className;
	              ObjectType = _ParseObject.default.extend(className);

	              if (!id) {
	                _context5.next = 16;
	                break;
	              }

	              _context5.next = 14;
	              return _this5.process.byId(ObjectType, queueObject);

	            case 14:
	              _context5.next = 23;
	              break;

	            case 16:
	              if (!hash) {
	                _context5.next = 21;
	                break;
	              }

	              _context5.next = 19;
	              return _this5.process.byHash(ObjectType, queueObject);

	            case 19:
	              _context5.next = 23;
	              break;

	            case 21:
	              _context5.next = 23;
	              return _this5.process.create(ObjectType, queueObject);

	            case 23:
	              i += 1;
	              _context5.next = 7;
	              break;

	            case 26:
	              return _context5.abrupt("return", true);

	            case 27:
	            case "end":
	              return _context5.stop();
	          }
	        }
	      }, _callee5);
	    }))();
	  },

	  /**
	   * Build queue object and add to queue.
	   *
	   * @param {ParseObject} object Parse.Object to be processed
	   * @param {QueueObject} queueObject Parse.Object data from the queue
	   * @returns {Promise} A promise that is fulfilled when operation is performed.
	   * @static
	   * @ignore
	   */
	  sendQueueCallback: function (object
	  /*: ParseObject*/
	  , queueObject
	  /*: QueueObject*/
	  )
	  /*: Promise<void>*/
	  {
	    var _this6 = this;

	    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
	      return _regenerator.default.wrap(function (_context6) {
	        while (1) {
	          switch (_context6.prev = _context6.next) {
	            case 0:
	              if (object) {
	                _context6.next = 2;
	                break;
	              }

	              return _context6.abrupt("return", _this6.remove(queueObject.queueId));

	            case 2:
	              _context6.t0 = queueObject.action;
	              _context6.next = _context6.t0 === 'save' ? 5 : _context6.t0 === 'destroy' ? 20 : 33;
	              break;

	            case 5:
	              if (!(typeof object.updatedAt !== 'undefined' && object.updatedAt > new Date(queueObject.object.createdAt))) {
	                _context6.next = 7;
	                break;
	              }

	              return _context6.abrupt("return", _this6.remove(queueObject.queueId));

	            case 7:
	              _context6.prev = 7;
	              _context6.next = 10;
	              return object.save(queueObject.object, queueObject.serverOptions);

	            case 10:
	              _context6.next = 12;
	              return _this6.remove(queueObject.queueId);

	            case 12:
	              _context6.next = 19;
	              break;

	            case 14:
	              _context6.prev = 14;
	              _context6.t1 = _context6["catch"](7);

	              if (!(_context6.t1.message !== 'XMLHttpRequest failed: "Unable to connect to the Parse API"')) {
	                _context6.next = 19;
	                break;
	              }

	              _context6.next = 19;
	              return _this6.remove(queueObject.queueId);

	            case 19:
	              return _context6.abrupt("break", 33);

	            case 20:
	              _context6.prev = 20;
	              _context6.next = 23;
	              return object.destroy(queueObject.serverOptions);

	            case 23:
	              _context6.next = 25;
	              return _this6.remove(queueObject.queueId);

	            case 25:
	              _context6.next = 32;
	              break;

	            case 27:
	              _context6.prev = 27;
	              _context6.t2 = _context6["catch"](20);

	              if (!(_context6.t2.message !== 'XMLHttpRequest failed: "Unable to connect to the Parse API"')) {
	                _context6.next = 32;
	                break;
	              }

	              _context6.next = 32;
	              return _this6.remove(queueObject.queueId);

	            case 32:
	              return _context6.abrupt("break", 33);

	            case 33:
	            case "end":
	              return _context6.stop();
	          }
	        }
	      }, _callee6, null, [[7, 14], [20, 27]]);
	    }))();
	  },

	  /**
	   * Start polling server for network connection.
	   * Will send queue if connection is established.
	   *
	   * @function poll
	   * @name Parse.EventuallyQueue.poll
	   * @param [ms] Milliseconds to ping the server. Default 2000ms
	   * @static
	   */
	  poll: function () {
	    var _this7 = this;

	    var ms
	    /*: number*/
	    = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2000;

	    if (polling) {
	      return;
	    }

	    polling = (0, _setInterval2.default)(function () {
	      var RESTController = _CoreManager$1.default.getRESTController();

	      RESTController.request('GET', 'health').then(function (_ref) {
	        var status = _ref.status;

	        if (status === 'ok') {
	          _this7.stopPoll();

	          return _this7.sendQueue();
	        }
	      }).catch(function (e) {
	        return e;
	      });
	    }, ms);
	  },

	  /**
	   * Turns off polling.
	   *
	   * @function stopPoll
	   * @name Parse.EventuallyQueue.stopPoll
	   * @static
	   */
	  stopPoll: function () {
	    clearInterval(polling);
	    polling = undefined;
	  },

	  /**
	   * Return true if pinging the server.
	   *
	   * @function isPolling
	   * @name Parse.EventuallyQueue.isPolling
	   * @returns {boolean}
	   * @static
	   */
	  isPolling: function ()
	  /*: boolean*/
	  {
	    return !!polling;
	  },
	  _setPolling: function (flag
	  /*: boolean*/
	  ) {
	    polling = flag;
	  },
	  process: {
	    create: function (ObjectType, queueObject) {
	      var object = new ObjectType();
	      return EventuallyQueue.sendQueueCallback(object, queueObject);
	    },
	    byId: function (ObjectType, queueObject) {
	      return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {
	        var sessionToken, query, results;
	        return _regenerator.default.wrap(function (_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                sessionToken = queueObject.serverOptions.sessionToken;
	                query = new _ParseQuery.default(ObjectType);
	                query.equalTo('objectId', queueObject.id);
	                _context7.next = 5;
	                return (0, _find.default)(query).call(query, {
	                  sessionToken: sessionToken
	                });

	              case 5:
	                results = _context7.sent;
	                return _context7.abrupt("return", EventuallyQueue.sendQueueCallback(results[0], queueObject));

	              case 7:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee7);
	      }))();
	    },
	    byHash: function (ObjectType, queueObject) {
	      return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {
	        var sessionToken, query, results;
	        return _regenerator.default.wrap(function (_context8) {
	          while (1) {
	            switch (_context8.prev = _context8.next) {
	              case 0:
	                sessionToken = queueObject.serverOptions.sessionToken;
	                query = new _ParseQuery.default(ObjectType);
	                query.equalTo('hash', queueObject.hash);
	                _context8.next = 5;
	                return (0, _find.default)(query).call(query, {
	                  sessionToken: sessionToken
	                });

	              case 5:
	                results = _context8.sent;

	                if (!(results.length > 0)) {
	                  _context8.next = 8;
	                  break;
	                }

	                return _context8.abrupt("return", EventuallyQueue.sendQueueCallback(results[0], queueObject));

	              case 8:
	                return _context8.abrupt("return", EventuallyQueue.process.create(ObjectType, queueObject));

	              case 9:
	              case "end":
	                return _context8.stop();
	            }
	          }
	        }, _callee8);
	      }))();
	    }
	  }
	};
	var EventuallyQueue_1 = EventuallyQueue;

	// a string of all valid unicode whitespaces
	var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
	  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var replace$2 = functionUncurryThis(''.replace);
	var whitespace = '[' + whitespaces + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim = RegExp(whitespace + whitespace + '*$');

	// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
	var createMethod$4 = function (TYPE) {
	  return function ($this) {
	    var string = toString$3(requireObjectCoercible($this));
	    if (TYPE & 1) string = replace$2(string, ltrim, '');
	    if (TYPE & 2) string = replace$2(string, rtrim, '');
	    return string;
	  };
	};

	var stringTrim = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
	  start: createMethod$4(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.es/ecma262/#sec-string.prototype.trimend
	  end: createMethod$4(2),
	  // `String.prototype.trim` method
	  // https://tc39.es/ecma262/#sec-string.prototype.trim
	  trim: createMethod$4(3)
	};

	var trim = stringTrim.trim;


	var $parseInt = global$1.parseInt;
	var Symbol$2 = global$1.Symbol;
	var ITERATOR$5 = Symbol$2 && Symbol$2.iterator;
	var hex = /^[+-]?0x/i;
	var exec$2 = functionUncurryThis(hex.exec);
	var FORCED$5 = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22
	  // MS Edge 18- broken with boxed symbols
	  || (ITERATOR$5 && !fails(function () { $parseInt(Object(ITERATOR$5)); }));

	// `parseInt` method
	// https://tc39.es/ecma262/#sec-parseint-string-radix
	var numberParseInt = FORCED$5 ? function parseInt(string, radix) {
	  var S = trim(toString$3(string));
	  return $parseInt(S, (radix >>> 0) || (exec$2(hex, S) ? 16 : 10));
	} : $parseInt;

	// `parseInt` method
	// https://tc39.es/ecma262/#sec-parseint-string-radix
	_export({ global: true, forced: parseInt != numberParseInt }, {
	  parseInt: numberParseInt
	});

	var _parseInt = path.parseInt;

	var _parseInt$1 = _parseInt;

	var _parseInt$2 = _parseInt$1;

	var parseDate_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = parseDate;

	var _parseInt2 = interopRequireDefault(_parseInt$2);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */


	function parseDate(iso8601
	/*: string*/
	)
	/*: ?Date*/
	{
	  var regexp = new RegExp('^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2})' + 'T' + '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})' + '(.([0-9]+))?' + 'Z$');
	  var match = regexp.exec(iso8601);

	  if (!match) {
	    return null;
	  }

	  var year = (0, _parseInt2.default)(match[1]) || 0;
	  var month = ((0, _parseInt2.default)(match[2]) || 1) - 1;
	  var day = (0, _parseInt2.default)(match[3]) || 0;
	  var hour = (0, _parseInt2.default)(match[4]) || 0;
	  var minute = (0, _parseInt2.default)(match[5]) || 0;
	  var second = (0, _parseInt2.default)(match[6]) || 0;
	  var milli = (0, _parseInt2.default)(match[8]) || 0;
	  return new Date(Date.UTC(year, month, day, hour, minute, second, milli));
	}
	});

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _defineProperty2 = interopRequireDefault(defineProperty$b);


	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */


	var TaskQueue = /*#__PURE__*/function () {
	  function TaskQueue() {
	    (0, _classCallCheck2.default)(this, TaskQueue);
	    (0, _defineProperty2.default)(this, "queue", void 0);
	    this.queue = [];
	  }

	  (0, _createClass2.default)(TaskQueue, [{
	    key: "enqueue",
	    value: function (task
	    /*: () => Promise*/
	    )
	    /*: Promise*/
	    {
	      var _this = this;

	      var taskComplete = new promiseUtils.resolvingPromise();
	      this.queue.push({
	        task: task,
	        _completion: taskComplete
	      });

	      if (this.queue.length === 1) {
	        task().then(function () {
	          _this._dequeue();

	          taskComplete.resolve();
	        }, function (error) {
	          _this._dequeue();

	          taskComplete.reject(error);
	        });
	      }

	      return taskComplete;
	    }
	  }, {
	    key: "_dequeue",
	    value: function () {
	      var _this2 = this;

	      this.queue.shift();

	      if (this.queue.length) {
	        var next = this.queue[0];
	        next.task().then(function () {
	          _this2._dequeue();

	          next._completion.resolve();
	        }, function (error) {
	          _this2._dequeue();

	          next._completion.reject(error);
	        });
	      }
	    }
	  }]);
	  return TaskQueue;
	}();

	var TaskQueue_1 = TaskQueue;

	var ObjectStateMutations = createCommonjsModule(function (module, exports) {



















	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.commitServerChanges = commitServerChanges;
	exports.defaultState = defaultState;
	exports.estimateAttribute = estimateAttribute;
	exports.estimateAttributes = estimateAttributes;
	exports.mergeFirstPendingState = mergeFirstPendingState;
	exports.popPendingState = popPendingState;
	exports.pushPendingState = pushPendingState;
	exports.setPendingOp = setPendingOp;
	exports.setServerData = setServerData;

	var _stringify = interopRequireDefault(stringify$2);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _defineProperty2 = interopRequireDefault(defineProperty$b);

	var _includes = interopRequireDefault(includes$4);

	var _encode = interopRequireDefault(encode_1);

	var _ParseFile = interopRequireDefault(ParseFile_1);

	var _ParseObject = interopRequireDefault(ParseObject_1);

	var _ParseRelation = interopRequireDefault(ParseRelation_1);

	var _TaskQueue = interopRequireDefault(TaskQueue_1);



	function ownKeys(object, enumerableOnly) {
	  var keys = keys$3(object);

	  if (getOwnPropertySymbols$2) {
	    var symbols = getOwnPropertySymbols$2(object);

	    enumerableOnly && (symbols = filter$3(symbols).call(symbols, function (sym) {
	      return getOwnPropertyDescriptor$3(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var _context, _context2;

	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? forEach$4(_context = ownKeys(Object(source), !0)).call(_context, function (key) {
	      (0, _defineProperty2.default)(target, key, source[key]);
	    }) : getOwnPropertyDescriptors$2 ? defineProperties$2(target, getOwnPropertyDescriptors$2(source)) : forEach$4(_context2 = ownKeys(Object(source))).call(_context2, function (key) {
	      defineProperty$3(target, key, getOwnPropertyDescriptor$3(source, key));
	    });
	  }

	  return target;
	}

	function defaultState()
	/*: State*/
	{
	  return {
	    serverData: {},
	    pendingOps: [{}],
	    objectCache: {},
	    tasks: new _TaskQueue.default(),
	    existed: false
	  };
	}

	function setServerData(serverData
	/*: AttributeMap*/
	, attributes
	/*: AttributeMap*/
	) {
	  for (var _attr in attributes) {
	    if (typeof attributes[_attr] !== 'undefined') {
	      serverData[_attr] = attributes[_attr];
	    } else {
	      delete serverData[_attr];
	    }
	  }
	}

	function setPendingOp(pendingOps
	/*: Array<OpsMap>*/
	, attr
	/*: string*/
	, op
	/*: ?Op*/
	) {
	  var last = pendingOps.length - 1;

	  if (op) {
	    pendingOps[last][attr] = op;
	  } else {
	    delete pendingOps[last][attr];
	  }
	}

	function pushPendingState(pendingOps
	/*: Array<OpsMap>*/
	) {
	  pendingOps.push({});
	}

	function popPendingState(pendingOps
	/*: Array<OpsMap>*/
	)
	/*: OpsMap*/
	{
	  var first = pendingOps.shift();

	  if (!pendingOps.length) {
	    pendingOps[0] = {};
	  }

	  return first;
	}

	function mergeFirstPendingState(pendingOps
	/*: Array<OpsMap>*/
	) {
	  var first = popPendingState(pendingOps);
	  var next = pendingOps[0];

	  for (var _attr2 in first) {
	    if (next[_attr2] && first[_attr2]) {
	      var merged = next[_attr2].mergeWith(first[_attr2]);

	      if (merged) {
	        next[_attr2] = merged;
	      }
	    } else {
	      next[_attr2] = first[_attr2];
	    }
	  }
	}

	function estimateAttribute(serverData
	/*: AttributeMap*/
	, pendingOps
	/*: Array<OpsMap>*/
	, className
	/*: string*/
	, id
	/*: ?string*/
	, attr
	/*: string*/
	)
	/*: mixed*/
	{
	  var value = serverData[attr];

	  for (var i = 0; i < pendingOps.length; i++) {
	    if (pendingOps[i][attr]) {
	      if (pendingOps[i][attr] instanceof ParseOp.RelationOp) {
	        if (id) {
	          value = pendingOps[i][attr].applyTo(value, {
	            className: className,
	            id: id
	          }, attr);
	        }
	      } else {
	        value = pendingOps[i][attr].applyTo(value);
	      }
	    }
	  }

	  return value;
	}

	function estimateAttributes(serverData
	/*: AttributeMap*/
	, pendingOps
	/*: Array<OpsMap>*/
	, className
	/*: string*/
	, id
	/*: ?string*/
	)
	/*: AttributeMap*/
	{
	  var data = {};

	  for (var attr in serverData) {
	    data[attr] = serverData[attr];
	  }

	  for (var i = 0; i < pendingOps.length; i++) {
	    for (attr in pendingOps[i]) {
	      if (pendingOps[i][attr] instanceof ParseOp.RelationOp) {
	        if (id) {
	          data[attr] = pendingOps[i][attr].applyTo(data[attr], {
	            className: className,
	            id: id
	          }, attr);
	        }
	      } else {
	        if ((0, _includes.default)(attr).call(attr, '.')) {
	          // convert a.b.c into { a: { b: { c: value } } }
	          var fields = attr.split('.');
	          var first = fields[0];
	          var last = fields[fields.length - 1];
	          data[first] = _objectSpread({}, serverData[first]);

	          var object = _objectSpread({}, data);

	          for (var _i = 0; _i < fields.length - 1; _i++) {
	            var key = fields[_i];

	            if (!(key in object)) {
	              object[key] = {};
	            }

	            object = object[key];
	          }

	          object[last] = pendingOps[i][attr].applyTo(object[last]);
	        } else {
	          data[attr] = pendingOps[i][attr].applyTo(data[attr]);
	        }
	      }
	    }
	  }

	  return data;
	}

	function nestedSet(obj, key, value) {
	  var path = key.split('.');

	  for (var i = 0; i < path.length - 1; i++) {
	    if (!(path[i] in obj)) obj[path[i]] = {};
	    obj = obj[path[i]];
	  }

	  if (typeof value === 'undefined') {
	    delete obj[path[path.length - 1]];
	  } else {
	    obj[path[path.length - 1]] = value;
	  }
	}

	function commitServerChanges(serverData
	/*: AttributeMap*/
	, objectCache
	/*: ObjectCache*/
	, changes
	/*: AttributeMap*/
	) {
	  for (var _attr3 in changes) {
	    var val = changes[_attr3];
	    nestedSet(serverData, _attr3, val);

	    if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof _ParseObject.default) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {
	      var json = (0, _encode.default)(val, false, true);
	      objectCache[_attr3] = (0, _stringify.default)(json);
	    }
	  }
	}
	});

	var SingleInstanceStateController = createCommonjsModule(function (module, exports) {









	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.clearAllState = clearAllState;
	exports.commitServerChanges = commitServerChanges;
	exports.duplicateState = duplicateState;
	exports.enqueueTask = enqueueTask;
	exports.estimateAttribute = estimateAttribute;
	exports.estimateAttributes = estimateAttributes;
	exports.getObjectCache = getObjectCache;
	exports.getPendingOps = getPendingOps;
	exports.getServerData = getServerData;
	exports.getState = getState;
	exports.initializeState = initializeState;
	exports.mergeFirstPendingState = mergeFirstPendingState;
	exports.popPendingState = popPendingState;
	exports.pushPendingState = pushPendingState;
	exports.removeState = removeState;
	exports.setPendingOp = setPendingOp;
	exports.setServerData = setServerData;

	var ObjectStateMutations$1 = _interopRequireWildcard(ObjectStateMutations);

	function _getRequireWildcardCache(nodeInterop) {
	  if (typeof weakMap$2 !== "function") return null;
	  var cacheBabelInterop = new weakMap$2();
	  var cacheNodeInterop = new weakMap$2();
	  return (_getRequireWildcardCache = function (nodeInterop) {
	    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
	  })(nodeInterop);
	}

	function _interopRequireWildcard(obj, nodeInterop) {
	  if (!nodeInterop && obj && obj.__esModule) {
	    return obj;
	  }

	  if (obj === null || _typeof_1(obj) !== "object" && typeof obj !== "function") {
	    return {
	      default: obj
	    };
	  }

	  var cache = _getRequireWildcardCache(nodeInterop);

	  if (cache && cache.has(obj)) {
	    return cache.get(obj);
	  }

	  var newObj = {};

	  for (var key in obj) {
	    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
	      var desc = defineProperty$3 && getOwnPropertyDescriptor$3 ? getOwnPropertyDescriptor$3(obj, key) : null;

	      if (desc && (desc.get || desc.set)) {
	        defineProperty$3(newObj, key, desc);
	      } else {
	        newObj[key] = obj[key];
	      }
	    }
	  }

	  newObj.default = obj;

	  if (cache) {
	    cache.set(obj, newObj);
	  }

	  return newObj;
	}
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */


	var objectState
	/*: {
	  [className: string]: {
	    [id: string]: State,
	  },
	}*/
	= {};

	function getState(obj
	/*: ObjectIdentifier*/
	)
	/*: ?State*/
	{
	  var classData = objectState[obj.className];

	  if (classData) {
	    return classData[obj.id] || null;
	  }

	  return null;
	}

	function initializeState(obj
	/*: ObjectIdentifier*/
	, initial
	/*:: ?: State*/
	)
	/*: State*/
	{
	  var state = getState(obj);

	  if (state) {
	    return state;
	  }

	  if (!objectState[obj.className]) {
	    objectState[obj.className] = {};
	  }

	  if (!initial) {
	    initial = ObjectStateMutations$1.defaultState();
	  }

	  state = objectState[obj.className][obj.id] = initial;
	  return state;
	}

	function removeState(obj
	/*: ObjectIdentifier*/
	)
	/*: ?State*/
	{
	  var state = getState(obj);

	  if (state === null) {
	    return null;
	  }

	  delete objectState[obj.className][obj.id];
	  return state;
	}

	function getServerData(obj
	/*: ObjectIdentifier*/
	)
	/*: AttributeMap*/
	{
	  var state = getState(obj);

	  if (state) {
	    return state.serverData;
	  }

	  return {};
	}

	function setServerData(obj
	/*: ObjectIdentifier*/
	, attributes
	/*: AttributeMap*/
	) {
	  var serverData = initializeState(obj).serverData;
	  ObjectStateMutations$1.setServerData(serverData, attributes);
	}

	function getPendingOps(obj
	/*: ObjectIdentifier*/
	)
	/*: Array<OpsMap>*/
	{
	  var state = getState(obj);

	  if (state) {
	    return state.pendingOps;
	  }

	  return [{}];
	}

	function setPendingOp(obj
	/*: ObjectIdentifier*/
	, attr
	/*: string*/
	, op
	/*: ?Op*/
	) {
	  var pendingOps = initializeState(obj).pendingOps;
	  ObjectStateMutations$1.setPendingOp(pendingOps, attr, op);
	}

	function pushPendingState(obj
	/*: ObjectIdentifier*/
	) {
	  var pendingOps = initializeState(obj).pendingOps;
	  ObjectStateMutations$1.pushPendingState(pendingOps);
	}

	function popPendingState(obj
	/*: ObjectIdentifier*/
	)
	/*: OpsMap*/
	{
	  var pendingOps = initializeState(obj).pendingOps;
	  return ObjectStateMutations$1.popPendingState(pendingOps);
	}

	function mergeFirstPendingState(obj
	/*: ObjectIdentifier*/
	) {
	  var pendingOps = getPendingOps(obj);
	  ObjectStateMutations$1.mergeFirstPendingState(pendingOps);
	}

	function getObjectCache(obj
	/*: ObjectIdentifier*/
	)
	/*: ObjectCache*/
	{
	  var state = getState(obj);

	  if (state) {
	    return state.objectCache;
	  }

	  return {};
	}

	function estimateAttribute(obj
	/*: ObjectIdentifier*/
	, attr
	/*: string*/
	)
	/*: mixed*/
	{
	  var serverData = getServerData(obj);
	  var pendingOps = getPendingOps(obj);
	  return ObjectStateMutations$1.estimateAttribute(serverData, pendingOps, obj.className, obj.id, attr);
	}

	function estimateAttributes(obj
	/*: ObjectIdentifier*/
	)
	/*: AttributeMap*/
	{
	  var serverData = getServerData(obj);
	  var pendingOps = getPendingOps(obj);
	  return ObjectStateMutations$1.estimateAttributes(serverData, pendingOps, obj.className, obj.id);
	}

	function commitServerChanges(obj
	/*: ObjectIdentifier*/
	, changes
	/*: AttributeMap*/
	) {
	  var state = initializeState(obj);
	  ObjectStateMutations$1.commitServerChanges(state.serverData, state.objectCache, changes);
	}

	function enqueueTask(obj
	/*: ObjectIdentifier*/
	, task
	/*: () => Promise*/
	)
	/*: Promise*/
	{
	  var state = initializeState(obj);
	  return state.tasks.enqueue(task);
	}

	function clearAllState() {
	  objectState = {};
	}

	function duplicateState(source
	/*: { id: string }*/
	, dest
	/*: { id: string }*/
	) {
	  dest.id = source.id;
	}
	});

	var UniqueInstanceStateController = createCommonjsModule(function (module, exports) {











	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.clearAllState = clearAllState;
	exports.commitServerChanges = commitServerChanges;
	exports.duplicateState = duplicateState;
	exports.enqueueTask = enqueueTask;
	exports.estimateAttribute = estimateAttribute;
	exports.estimateAttributes = estimateAttributes;
	exports.getObjectCache = getObjectCache;
	exports.getPendingOps = getPendingOps;
	exports.getServerData = getServerData;
	exports.getState = getState;
	exports.initializeState = initializeState;
	exports.mergeFirstPendingState = mergeFirstPendingState;
	exports.popPendingState = popPendingState;
	exports.pushPendingState = pushPendingState;
	exports.removeState = removeState;
	exports.setPendingOp = setPendingOp;
	exports.setServerData = setServerData;

	var _weakMap = interopRequireDefault(weakMap$2);

	var ObjectStateMutations$1 = _interopRequireWildcard(ObjectStateMutations);

	var _TaskQueue = interopRequireDefault(TaskQueue_1);

	function _getRequireWildcardCache(nodeInterop) {
	  if (typeof weakMap$2 !== "function") return null;
	  var cacheBabelInterop = new weakMap$2();
	  var cacheNodeInterop = new weakMap$2();
	  return (_getRequireWildcardCache = function (nodeInterop) {
	    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
	  })(nodeInterop);
	}

	function _interopRequireWildcard(obj, nodeInterop) {
	  if (!nodeInterop && obj && obj.__esModule) {
	    return obj;
	  }

	  if (obj === null || _typeof_1(obj) !== "object" && typeof obj !== "function") {
	    return {
	      default: obj
	    };
	  }

	  var cache = _getRequireWildcardCache(nodeInterop);

	  if (cache && cache.has(obj)) {
	    return cache.get(obj);
	  }

	  var newObj = {};

	  for (var key in obj) {
	    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
	      var desc = defineProperty$3 && getOwnPropertyDescriptor$3 ? getOwnPropertyDescriptor$3(obj, key) : null;

	      if (desc && (desc.get || desc.set)) {
	        defineProperty$3(newObj, key, desc);
	      } else {
	        newObj[key] = obj[key];
	      }
	    }
	  }

	  newObj.default = obj;

	  if (cache) {
	    cache.set(obj, newObj);
	  }

	  return newObj;
	}
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */


	var objectState = new _weakMap.default();

	function getState(obj
	/*: ParseObject*/
	)
	/*: ?State*/
	{
	  var classData = objectState.get(obj);
	  return classData || null;
	}

	function initializeState(obj
	/*: ParseObject*/
	, initial
	/*:: ?: State*/
	)
	/*: State*/
	{
	  var state = getState(obj);

	  if (state) {
	    return state;
	  }

	  if (!initial) {
	    initial = {
	      serverData: {},
	      pendingOps: [{}],
	      objectCache: {},
	      tasks: new _TaskQueue.default(),
	      existed: false
	    };
	  }

	  state = initial;
	  objectState.set(obj, state);
	  return state;
	}

	function removeState(obj
	/*: ParseObject*/
	)
	/*: ?State*/
	{
	  var state = getState(obj);

	  if (state === null) {
	    return null;
	  }

	  objectState.delete(obj);
	  return state;
	}

	function getServerData(obj
	/*: ParseObject*/
	)
	/*: AttributeMap*/
	{
	  var state = getState(obj);

	  if (state) {
	    return state.serverData;
	  }

	  return {};
	}

	function setServerData(obj
	/*: ParseObject*/
	, attributes
	/*: AttributeMap*/
	) {
	  var serverData = initializeState(obj).serverData;
	  ObjectStateMutations$1.setServerData(serverData, attributes);
	}

	function getPendingOps(obj
	/*: ParseObject*/
	)
	/*: Array<OpsMap>*/
	{
	  var state = getState(obj);

	  if (state) {
	    return state.pendingOps;
	  }

	  return [{}];
	}

	function setPendingOp(obj
	/*: ParseObject*/
	, attr
	/*: string*/
	, op
	/*: ?Op*/
	) {
	  var pendingOps = initializeState(obj).pendingOps;
	  ObjectStateMutations$1.setPendingOp(pendingOps, attr, op);
	}

	function pushPendingState(obj
	/*: ParseObject*/
	) {
	  var pendingOps = initializeState(obj).pendingOps;
	  ObjectStateMutations$1.pushPendingState(pendingOps);
	}

	function popPendingState(obj
	/*: ParseObject*/
	)
	/*: OpsMap*/
	{
	  var pendingOps = initializeState(obj).pendingOps;
	  return ObjectStateMutations$1.popPendingState(pendingOps);
	}

	function mergeFirstPendingState(obj
	/*: ParseObject*/
	) {
	  var pendingOps = getPendingOps(obj);
	  ObjectStateMutations$1.mergeFirstPendingState(pendingOps);
	}

	function getObjectCache(obj
	/*: ParseObject*/
	)
	/*: ObjectCache*/
	{
	  var state = getState(obj);

	  if (state) {
	    return state.objectCache;
	  }

	  return {};
	}

	function estimateAttribute(obj
	/*: ParseObject*/
	, attr
	/*: string*/
	)
	/*: mixed*/
	{
	  var serverData = getServerData(obj);
	  var pendingOps = getPendingOps(obj);
	  return ObjectStateMutations$1.estimateAttribute(serverData, pendingOps, obj.className, obj.id, attr);
	}

	function estimateAttributes(obj
	/*: ParseObject*/
	)
	/*: AttributeMap*/
	{
	  var serverData = getServerData(obj);
	  var pendingOps = getPendingOps(obj);
	  return ObjectStateMutations$1.estimateAttributes(serverData, pendingOps, obj.className, obj.id);
	}

	function commitServerChanges(obj
	/*: ParseObject*/
	, changes
	/*: AttributeMap*/
	) {
	  var state = initializeState(obj);
	  ObjectStateMutations$1.commitServerChanges(state.serverData, state.objectCache, changes);
	}

	function enqueueTask(obj
	/*: ParseObject*/
	, task
	/*: () => Promise*/
	)
	/*: Promise*/
	{
	  var state = initializeState(obj);
	  return state.tasks.enqueue(task);
	}

	function duplicateState(source
	/*: ParseObject*/
	, dest
	/*: ParseObject*/
	)
	/*: void*/
	{
	  var oldState = initializeState(source);
	  var newState = initializeState(dest);

	  for (var key in oldState.serverData) {
	    newState.serverData[key] = oldState.serverData[key];
	  }

	  for (var index = 0; index < oldState.pendingOps.length; index++) {
	    for (var _key in oldState.pendingOps[index]) {
	      newState.pendingOps[index][_key] = oldState.pendingOps[index][_key];
	    }
	  }

	  for (var _key2 in oldState.objectCache) {
	    newState.objectCache[_key2] = oldState.objectCache[_key2];
	  }

	  newState.existed = oldState.existed;
	}

	function clearAllState() {
	  objectState = new _weakMap.default();
	}
	});

	var unsavedChildren_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = unsavedChildren;

	var _forEach = interopRequireDefault(forEach$4);

	var _isArray = interopRequireDefault(isArray$3);

	var _indexOf = interopRequireDefault(indexOf$8);

	var _concat = interopRequireDefault(concat$5);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _ParseFile = interopRequireDefault(ParseFile_1);

	var _ParseObject = interopRequireDefault(ParseObject_1);

	var _ParseRelation = interopRequireDefault(ParseRelation_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */

	/**
	 * Return an array of unsaved children, which are either Parse Objects or Files.
	 * If it encounters any dirty Objects without Ids, it will throw an exception.
	 *
	 * @param {Parse.Object} obj
	 * @param {boolean} allowDeepUnsaved
	 * @returns {Array}
	 */


	function unsavedChildren(obj
	/*: ParseObject*/
	, allowDeepUnsaved
	/*:: ?: boolean*/
	)
	/*: Array<ParseFile | ParseObject>*/
	{
	  var encountered = {
	    objects: {},
	    files: []
	  };

	  var identifier = obj.className + ':' + obj._getId();

	  encountered.objects[identifier] = obj.dirty() ? obj : true;
	  var attributes = obj.attributes;

	  for (var attr in attributes) {
	    if ((0, _typeof2.default)(attributes[attr]) === 'object') {
	      traverse(attributes[attr], encountered, false, !!allowDeepUnsaved);
	    }
	  }

	  var unsaved = [];

	  for (var id in encountered.objects) {
	    if (id !== identifier && encountered.objects[id] !== true) {
	      unsaved.push(encountered.objects[id]);
	    }
	  }

	  return (0, _concat.default)(unsaved).call(unsaved, encountered.files);
	}

	function traverse(obj
	/*: ParseObject*/
	, encountered
	/*: EncounterMap*/
	, shouldThrow
	/*: boolean*/
	, allowDeepUnsaved
	/*: boolean*/
	) {
	  if (obj instanceof _ParseObject.default) {
	    if (!obj.id && shouldThrow) {
	      throw new Error('Cannot create a pointer to an unsaved Object.');
	    }

	    var _identifier = obj.className + ':' + obj._getId();

	    if (!encountered.objects[_identifier]) {
	      encountered.objects[_identifier] = obj.dirty() ? obj : true;
	      var attributes = obj.attributes;

	      for (var attr in attributes) {
	        if ((0, _typeof2.default)(attributes[attr]) === 'object') {
	          traverse(attributes[attr], encountered, !allowDeepUnsaved, allowDeepUnsaved);
	        }
	      }
	    }

	    return;
	  }

	  if (obj instanceof _ParseFile.default) {
	    var _context;

	    if (!obj.url() && (0, _indexOf.default)(_context = encountered.files).call(_context, obj) < 0) {
	      encountered.files.push(obj);
	    }

	    return;
	  }

	  if (obj instanceof _ParseRelation.default) {
	    return;
	  }

	  if ((0, _isArray.default)(obj)) {
	    (0, _forEach.default)(obj).call(obj, function (el) {
	      if ((0, _typeof2.default)(el) === 'object') {
	        traverse(el, encountered, shouldThrow, allowDeepUnsaved);
	      }
	    });
	  }

	  for (var k in obj) {
	    if ((0, _typeof2.default)(obj[k]) === 'object') {
	      traverse(obj[k], encountered, shouldThrow, allowDeepUnsaved);
	    }
	  }
	}
	});

	// Unique ID creation requires a high quality random # generator.  In node.js
	// this is pretty straight-forward - we use the crypto API.



	var rng = function nodeRNG() {
	  return crypto__default['default'].randomBytes(16);
	};

	/**
	 * Convert array of 16 byte values to UUID string format of the form:
	 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
	 */
	var byteToHex = [];
	for (var i = 0; i < 256; ++i) {
	  byteToHex[i] = (i + 0x100).toString(16).substr(1);
	}

	function bytesToUuid(buf, offset) {
	  var i = offset || 0;
	  var bth = byteToHex;
	  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
	  return ([
	    bth[buf[i++]], bth[buf[i++]],
	    bth[buf[i++]], bth[buf[i++]], '-',
	    bth[buf[i++]], bth[buf[i++]], '-',
	    bth[buf[i++]], bth[buf[i++]], '-',
	    bth[buf[i++]], bth[buf[i++]], '-',
	    bth[buf[i++]], bth[buf[i++]],
	    bth[buf[i++]], bth[buf[i++]],
	    bth[buf[i++]], bth[buf[i++]]
	  ]).join('');
	}

	var bytesToUuid_1 = bytesToUuid;

	function v4(options, buf, offset) {
	  var i = buf && offset || 0;

	  if (typeof(options) == 'string') {
	    buf = options === 'binary' ? new Array(16) : null;
	    options = null;
	  }
	  options = options || {};

	  var rnds = options.random || (options.rng || rng)();

	  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	  rnds[6] = (rnds[6] & 0x0f) | 0x40;
	  rnds[8] = (rnds[8] & 0x3f) | 0x80;

	  // Copy bytes to buffer, if provided
	  if (buf) {
	    for (var ii = 0; ii < 16; ++ii) {
	      buf[i + ii] = rnds[ii];
	    }
	  }

	  return buf || bytesToUuid_1(rnds);
	}

	var v4_1 = v4;

	var uuid = null;
	uuid = v4_1;
	var uuid_1 = uuid;

	var ParseObject_1 = createCommonjsModule(function (module, exports) {

































	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _map = interopRequireDefault(map$9);

	var _find = interopRequireDefault(find$4);

	var _defineProperty2 = interopRequireDefault(defineProperty$3);

	var _create = interopRequireDefault(create$6);

	var _promise = interopRequireDefault(promise$3);

	var _isArray = interopRequireDefault(isArray$3);

	var _regenerator = interopRequireDefault(regenerator);

	var _asyncToGenerator2 = interopRequireDefault(asyncToGenerator);

	var _concat = interopRequireDefault(concat$5);

	var _getPrototypeOf = interopRequireDefault(getPrototypeOf$7);

	var _includes = interopRequireDefault(includes$4);

	var _stringify = interopRequireDefault(stringify$2);

	var _forEach = interopRequireDefault(forEach$4);

	var _keys = interopRequireDefault(keys$3);

	var _freeze = interopRequireDefault(freeze$2);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _defineProperty3 = interopRequireDefault(defineProperty$b);

	var _indexOf = interopRequireDefault(indexOf$8);

	var _CoreManager = interopRequireDefault(CoreManager);

	var _canBeSerialized = interopRequireDefault(canBeSerialized_1);

	var _decode = interopRequireDefault(decode_1);

	var _encode = interopRequireDefault(encode_1);

	var _escape2 = interopRequireDefault(_escape);

	var _EventuallyQueue = interopRequireDefault(EventuallyQueue_1);

	var _ParseACL = interopRequireDefault(ParseACL_1);

	var _parseDate = interopRequireDefault(parseDate_1);

	var _ParseError = interopRequireDefault(ParseError_1);

	var _ParseFile = interopRequireDefault(ParseFile_1);







	var _ParseQuery = interopRequireDefault(ParseQuery_1);

	var _ParseRelation = interopRequireDefault(ParseRelation_1);

	var SingleInstanceStateController$1 = _interopRequireWildcard(SingleInstanceStateController);

	var _unique = interopRequireDefault(unique_1);

	var UniqueInstanceStateController$1 = _interopRequireWildcard(UniqueInstanceStateController);

	var _unsavedChildren = interopRequireDefault(unsavedChildren_1);

	function _getRequireWildcardCache(nodeInterop) {
	  if (typeof weakMap$2 !== "function") return null;
	  var cacheBabelInterop = new weakMap$2();
	  var cacheNodeInterop = new weakMap$2();
	  return (_getRequireWildcardCache = function (nodeInterop) {
	    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
	  })(nodeInterop);
	}

	function _interopRequireWildcard(obj, nodeInterop) {
	  if (!nodeInterop && obj && obj.__esModule) {
	    return obj;
	  }

	  if (obj === null || _typeof_1(obj) !== "object" && typeof obj !== "function") {
	    return {
	      default: obj
	    };
	  }

	  var cache = _getRequireWildcardCache(nodeInterop);

	  if (cache && cache.has(obj)) {
	    return cache.get(obj);
	  }

	  var newObj = {};

	  for (var key in obj) {
	    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
	      var desc = defineProperty$3 && getOwnPropertyDescriptor$3 ? getOwnPropertyDescriptor$3(obj, key) : null;

	      if (desc && (desc.get || desc.set)) {
	        defineProperty$3(newObj, key, desc);
	      } else {
	        newObj[key] = obj[key];
	      }
	    }
	  }

	  newObj.default = obj;

	  if (cache) {
	    cache.set(obj, newObj);
	  }

	  return newObj;
	}

	function _createForOfIteratorHelper(o, allowArrayLike) {
	  var it = typeof symbol$6 !== "undefined" && getIteratorMethod$5(o) || o["@@iterator"];

	  if (!it) {
	    if (isArray$3(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function () {};

	      return {
	        s: F,
	        n: function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function (_e) {
	          throw _e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function () {
	      it = it.call(o);
	    },
	    n: function () {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function (_e2) {
	      didErr = true;
	      err = _e2;
	    },
	    f: function () {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	function _unsupportedIterableToArray(o, minLen) {
	  var _context18;

	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);

	  var n = slice$3(_context18 = Object.prototype.toString.call(o)).call(_context18, 8, -1);

	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return from$3(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function ownKeys(object, enumerableOnly) {
	  var keys = keys$3(object);

	  if (getOwnPropertySymbols$2) {
	    var symbols = getOwnPropertySymbols$2(object);

	    enumerableOnly && (symbols = filter$3(symbols).call(symbols, function (sym) {
	      return getOwnPropertyDescriptor$3(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var _context16, _context17;

	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? forEach$4(_context16 = ownKeys(Object(source), !0)).call(_context16, function (key) {
	      (0, _defineProperty3.default)(target, key, source[key]);
	    }) : getOwnPropertyDescriptors$2 ? defineProperties$2(target, getOwnPropertyDescriptors$2(source)) : forEach$4(_context17 = ownKeys(Object(source))).call(_context17, function (key) {
	      defineProperty$3(target, key, getOwnPropertyDescriptor$3(source, key));
	    });
	  }

	  return target;
	}


	/*:: export type Pointer = {
	  __type: string,
	  className: string,
	  objectId: string,
	};*/

	/*:: type SaveParams = {
	  method: string,
	  path: string,
	  body: AttributeMap,
	};*/

	/*:: export type SaveOptions = FullOptions & {
	  cascadeSave?: boolean,
	  context?: AttributeMap,
	};*/
	// Mapping of class names to constructors, so we can populate objects from the
	// server with appropriate subclasses of ParseObject


	var classMap = {}; // Global counter for generating unique Ids for non-single-instance objects

	var objectCount = 0; // On web clients, objects are single-instance: any two objects with the same Id
	// will have the same attributes. However, this may be dangerous default
	// behavior in a server scenario

	var singleInstance = !_CoreManager.default.get('IS_NODE');

	if (singleInstance) {
	  _CoreManager.default.setObjectStateController(SingleInstanceStateController$1);
	} else {
	  _CoreManager.default.setObjectStateController(UniqueInstanceStateController$1);
	}

	function getServerUrlPath() {
	  var serverUrl = _CoreManager.default.get('SERVER_URL');

	  if (serverUrl[serverUrl.length - 1] !== '/') {
	    serverUrl += '/';
	  }

	  var url = serverUrl.replace(/https?:\/\//, '');
	  return url.substr((0, _indexOf.default)(url).call(url, '/'));
	}
	/**
	 * Creates a new model with defined attributes.
	 *
	 * <p>You won't normally call this method directly.  It is recommended that
	 * you use a subclass of <code>Parse.Object</code> instead, created by calling
	 * <code>extend</code>.</p>
	 *
	 * <p>However, if you don't want to use a subclass, or aren't sure which
	 * subclass is appropriate, you can use this form:<pre>
	 *     var object = new Parse.Object("ClassName");
	 * </pre>
	 * That is basically equivalent to:<pre>
	 *     var MyClass = Parse.Object.extend("ClassName");
	 *     var object = new MyClass();
	 * </pre></p>
	 *
	 * @alias Parse.Object
	 */


	var ParseObject = /*#__PURE__*/function () {
	  /**
	   * @param {string} className The class name for the object
	   * @param {object} attributes The initial set of data to store in the object.
	   * @param {object} options The options for this object instance.
	   */
	  function ParseObject(className
	  /*: ?string | { className: string, [attr: string]: mixed }*/
	  , attributes
	  /*:: ?: { [attr: string]: mixed }*/
	  , options
	  /*:: ?: { ignoreValidation: boolean }*/
	  ) {
	    (0, _classCallCheck2.default)(this, ParseObject);
	    (0, _defineProperty3.default)(this, "id", void 0);
	    (0, _defineProperty3.default)(this, "_localId", void 0);
	    (0, _defineProperty3.default)(this, "_objCount", void 0);
	    (0, _defineProperty3.default)(this, "className", void 0); // Enable legacy initializers

	    if (typeof this.initialize === 'function') {
	      this.initialize.apply(this, arguments);
	    }

	    var toSet = null;
	    this._objCount = objectCount++;

	    if (typeof className === 'string') {
	      this.className = className;

	      if (attributes && (0, _typeof2.default)(attributes) === 'object') {
	        toSet = attributes;
	      }
	    } else if (className && (0, _typeof2.default)(className) === 'object') {
	      this.className = className.className;
	      toSet = {};

	      for (var _attr in className) {
	        if (_attr !== 'className') {
	          toSet[_attr] = className[_attr];
	        }
	      }

	      if (attributes && (0, _typeof2.default)(attributes) === 'object') {
	        options = attributes;
	      }
	    }

	    if (toSet && !this.set(toSet, options)) {
	      throw new Error("Can't create an invalid Parse Object");
	    }
	  }
	  /**
	   * The ID of this object, unique within its class.
	   *
	   * @property {string} id
	   */


	  (0, _createClass2.default)(ParseObject, [{
	    key: "attributes",
	    get:
	    /** Prototype getters / setters **/
	    function ()
	    /*: AttributeMap*/
	    {
	      var stateController = _CoreManager.default.getObjectStateController();

	      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));
	    }
	    /**
	     * The first time this object was saved on the server.
	     *
	     * @property {Date} createdAt
	     * @returns {Date}
	     */

	  }, {
	    key: "createdAt",
	    get: function ()
	    /*: ?Date*/
	    {
	      return this._getServerData().createdAt;
	    }
	    /**
	     * The last time this object was updated on the server.
	     *
	     * @property {Date} updatedAt
	     * @returns {Date}
	     */

	  }, {
	    key: "updatedAt",
	    get: function ()
	    /*: ?Date*/
	    {
	      return this._getServerData().updatedAt;
	    }
	    /** Private methods **/

	    /**
	     * Returns a local or server Id used uniquely identify this object
	     *
	     * @returns {string}
	     */

	  }, {
	    key: "_getId",
	    value: function ()
	    /*: string*/
	    {
	      if (typeof this.id === 'string') {
	        return this.id;
	      }

	      if (typeof this._localId === 'string') {
	        return this._localId;
	      }

	      var localId = 'local' + uuid_1();
	      this._localId = localId;
	      return localId;
	    }
	    /**
	     * Returns a unique identifier used to pull data from the State Controller.
	     *
	     * @returns {Parse.Object|object}
	     */

	  }, {
	    key: "_getStateIdentifier",
	    value: function ()
	    /*: ParseObject | { id: string, className: string }*/
	    {
	      if (singleInstance) {
	        var id = this.id;

	        if (!id) {
	          id = this._getId();
	        }

	        return {
	          id: id,
	          className: this.className
	        };
	      } else {
	        return this;
	      }
	    }
	  }, {
	    key: "_getServerData",
	    value: function ()
	    /*: AttributeMap*/
	    {
	      var stateController = _CoreManager.default.getObjectStateController();

	      return stateController.getServerData(this._getStateIdentifier());
	    }
	  }, {
	    key: "_clearServerData",
	    value: function () {
	      var serverData = this._getServerData();

	      var unset = {};

	      for (var _attr2 in serverData) {
	        unset[_attr2] = undefined;
	      }

	      var stateController = _CoreManager.default.getObjectStateController();

	      stateController.setServerData(this._getStateIdentifier(), unset);
	    }
	  }, {
	    key: "_getPendingOps",
	    value: function ()
	    /*: Array<OpsMap>*/
	    {
	      var stateController = _CoreManager.default.getObjectStateController();

	      return stateController.getPendingOps(this._getStateIdentifier());
	    }
	    /**
	     * @param {Array<string>} [keysToClear] - if specified, only ops matching
	     * these fields will be cleared
	     */

	  }, {
	    key: "_clearPendingOps",
	    value: function (keysToClear
	    /*:: ?: Array<string>*/
	    ) {
	      var pending = this._getPendingOps();

	      var latest = pending[pending.length - 1];
	      var keys = keysToClear || (0, _keys.default)(latest);
	      (0, _forEach.default)(keys).call(keys, function (key) {
	        delete latest[key];
	      });
	    }
	  }, {
	    key: "_getDirtyObjectAttributes",
	    value: function ()
	    /*: AttributeMap*/
	    {
	      var attributes = this.attributes;

	      var stateController = _CoreManager.default.getObjectStateController();

	      var objectCache = stateController.getObjectCache(this._getStateIdentifier());
	      var dirty = {};

	      for (var _attr3 in attributes) {
	        var val = attributes[_attr3];

	        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {
	          // Due to the way browsers construct maps, the key order will not change
	          // unless the object is changed
	          try {
	            var json = (0, _encode.default)(val, false, true);
	            var stringified = (0, _stringify.default)(json);

	            if (objectCache[_attr3] !== stringified) {
	              dirty[_attr3] = val;
	            }
	          } catch (e) {
	            // Error occurred, possibly by a nested unsaved pointer in a mutable container
	            // No matter how it happened, it indicates a change in the attribute
	            dirty[_attr3] = val;
	          }
	        }
	      }

	      return dirty;
	    }
	  }, {
	    key: "_toFullJSON",
	    value: function (seen
	    /*:: ?: Array<any>*/
	    , offline
	    /*:: ?: boolean*/
	    )
	    /*: AttributeMap*/
	    {
	      var json
	      /*: { [key: string]: mixed }*/
	      = this.toJSON(seen, offline);
	      json.__type = 'Object';
	      json.className = this.className;
	      return json;
	    }
	  }, {
	    key: "_getSaveJSON",
	    value: function ()
	    /*: AttributeMap*/
	    {
	      var pending = this._getPendingOps();

	      var dirtyObjects = this._getDirtyObjectAttributes();

	      var json = {};

	      for (var attr in dirtyObjects) {
	        var isDotNotation = false;

	        for (var i = 0; i < pending.length; i += 1) {
	          for (var field in pending[i]) {
	            // Dot notation operations are handled later
	            if ((0, _includes.default)(field).call(field, '.')) {
	              var fieldName = field.split('.')[0];

	              if (fieldName === attr) {
	                isDotNotation = true;
	                break;
	              }
	            }
	          }
	        }

	        if (!isDotNotation) {
	          json[attr] = new ParseOp.SetOp(dirtyObjects[attr]).toJSON();
	        }
	      }

	      for (attr in pending[0]) {
	        json[attr] = pending[0][attr].toJSON();
	      }

	      return json;
	    }
	  }, {
	    key: "_getSaveParams",
	    value: function ()
	    /*: SaveParams*/
	    {
	      var method = this.id ? 'PUT' : 'POST';

	      var body = this._getSaveJSON();

	      var path = 'classes/' + this.className;

	      if (_CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID')) {
	        if (!this.createdAt) {
	          method = 'POST';
	          body.objectId = this.id;
	        } else {
	          method = 'PUT';
	          path += '/' + this.id;
	        }
	      } else if (this.id) {
	        path += '/' + this.id;
	      } else if (this.className === '_User') {
	        path = 'users';
	      }

	      return {
	        method: method,
	        body: body,
	        path: path
	      };
	    }
	  }, {
	    key: "_finishFetch",
	    value: function (serverData
	    /*: AttributeMap*/
	    ) {
	      if (!this.id && serverData.objectId) {
	        this.id = serverData.objectId;
	      }

	      var stateController = _CoreManager.default.getObjectStateController();

	      stateController.initializeState(this._getStateIdentifier());
	      var decoded = {};

	      for (var _attr4 in serverData) {
	        if (_attr4 === 'ACL') {
	          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);
	        } else if (_attr4 !== 'objectId') {
	          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);

	          if (decoded[_attr4] instanceof _ParseRelation.default) {
	            decoded[_attr4]._ensureParentAndKey(this, _attr4);
	          }
	        }
	      }

	      if (decoded.createdAt && typeof decoded.createdAt === 'string') {
	        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);
	      }

	      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {
	        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);
	      }

	      if (!decoded.updatedAt && decoded.createdAt) {
	        decoded.updatedAt = decoded.createdAt;
	      }

	      stateController.commitServerChanges(this._getStateIdentifier(), decoded);
	    }
	  }, {
	    key: "_setExisted",
	    value: function (existed
	    /*: boolean*/
	    ) {
	      var stateController = _CoreManager.default.getObjectStateController();

	      var state = stateController.getState(this._getStateIdentifier());

	      if (state) {
	        state.existed = existed;
	      }
	    }
	  }, {
	    key: "_migrateId",
	    value: function (serverId
	    /*: string*/
	    ) {
	      if (this._localId && serverId) {
	        if (singleInstance) {
	          var stateController = _CoreManager.default.getObjectStateController();

	          var oldState = stateController.removeState(this._getStateIdentifier());
	          this.id = serverId;
	          delete this._localId;

	          if (oldState) {
	            stateController.initializeState(this._getStateIdentifier(), oldState);
	          }
	        } else {
	          this.id = serverId;
	          delete this._localId;
	        }
	      }
	    }
	  }, {
	    key: "_handleSaveResponse",
	    value: function (response
	    /*: AttributeMap*/
	    , status
	    /*: number*/
	    ) {
	      var changes = {};

	      var stateController = _CoreManager.default.getObjectStateController();

	      var pending = stateController.popPendingState(this._getStateIdentifier());

	      for (var attr in pending) {
	        if (pending[attr] instanceof ParseOp.RelationOp) {
	          changes[attr] = pending[attr].applyTo(undefined, this, attr);
	        } else if (!(attr in response)) {
	          // Only SetOps and UnsetOps should not come back with results
	          changes[attr] = pending[attr].applyTo(undefined);
	        }
	      }

	      for (attr in response) {
	        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {
	          changes[attr] = (0, _parseDate.default)(response[attr]);
	        } else if (attr === 'ACL') {
	          changes[attr] = new _ParseACL.default(response[attr]);
	        } else if (attr !== 'objectId') {
	          var val = (0, _decode.default)(response[attr]);

	          if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {
	            changes[attr] = _objectSpread(_objectSpread({}, this.attributes[attr]), val);
	          } else {
	            changes[attr] = val;
	          }

	          if (changes[attr] instanceof ParseOp.UnsetOp) {
	            changes[attr] = undefined;
	          }
	        }
	      }

	      if (changes.createdAt && !changes.updatedAt) {
	        changes.updatedAt = changes.createdAt;
	      }

	      this._migrateId(response.objectId);

	      if (status !== 201) {
	        this._setExisted(true);
	      }

	      stateController.commitServerChanges(this._getStateIdentifier(), changes);
	    }
	  }, {
	    key: "_handleSaveError",
	    value: function () {
	      var stateController = _CoreManager.default.getObjectStateController();

	      stateController.mergeFirstPendingState(this._getStateIdentifier());
	    }
	  }, {
	    key: "initialize",
	    value:
	    /** Public methods **/
	    function () {// NOOP
	    }
	    /**
	     * Returns a JSON version of the object suitable for saving to Parse.
	     *
	     * @param seen
	     * @param offline
	     * @returns {object}
	     */

	  }, {
	    key: "toJSON",
	    value: function (seen
	    /*: Array<any> | void*/
	    , offline
	    /*:: ?: boolean*/
	    )
	    /*: AttributeMap*/
	    {
	      var seenEntry = this.id ? this.className + ':' + this.id : this;
	      seen = seen || [seenEntry];
	      var json = {};
	      var attrs = this.attributes;

	      for (var _attr5 in attrs) {
	        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {
	          json[_attr5] = attrs[_attr5].toJSON();
	        } else {
	          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);
	        }
	      }

	      var pending = this._getPendingOps();

	      for (var _attr6 in pending[0]) {
	        json[_attr6] = pending[0][_attr6].toJSON(offline);
	      }

	      if (this.id) {
	        json.objectId = this.id;
	      }

	      return json;
	    }
	    /**
	     * Determines whether this ParseObject is equal to another ParseObject
	     *
	     * @param {object} other - An other object ot compare
	     * @returns {boolean}
	     */

	  }, {
	    key: "equals",
	    value: function (other
	    /*: mixed*/
	    )
	    /*: boolean*/
	    {
	      if (this === other) {
	        return true;
	      }

	      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';
	    }
	    /**
	     * Returns true if this object has been modified since its last
	     * save/refresh.  If an attribute is specified, it returns true only if that
	     * particular attribute has been modified since the last save/refresh.
	     *
	     * @param {string} attr An attribute name (optional).
	     * @returns {boolean}
	     */

	  }, {
	    key: "dirty",
	    value: function (attr
	    /*:: ?: string*/
	    )
	    /*: boolean*/
	    {
	      if (!this.id) {
	        return true;
	      }

	      var pendingOps = this._getPendingOps();

	      var dirtyObjects = this._getDirtyObjectAttributes();

	      if (attr) {
	        if (dirtyObjects.hasOwnProperty(attr)) {
	          return true;
	        }

	        for (var i = 0; i < pendingOps.length; i++) {
	          if (pendingOps[i].hasOwnProperty(attr)) {
	            return true;
	          }
	        }

	        return false;
	      }

	      if ((0, _keys.default)(pendingOps[0]).length !== 0) {
	        return true;
	      }

	      if ((0, _keys.default)(dirtyObjects).length !== 0) {
	        return true;
	      }

	      return false;
	    }
	    /**
	     * Returns an array of keys that have been modified since last save/refresh
	     *
	     * @returns {string[]}
	     */

	  }, {
	    key: "dirtyKeys",
	    value: function ()
	    /*: Array<string>*/
	    {
	      var pendingOps = this._getPendingOps();

	      var keys = {};

	      for (var i = 0; i < pendingOps.length; i++) {
	        for (var _attr7 in pendingOps[i]) {
	          keys[_attr7] = true;
	        }
	      }

	      var dirtyObjects = this._getDirtyObjectAttributes();

	      for (var _attr8 in dirtyObjects) {
	        keys[_attr8] = true;
	      }

	      return (0, _keys.default)(keys);
	    }
	    /**
	     * Returns true if the object has been fetched.
	     *
	     * @returns {boolean}
	     */

	  }, {
	    key: "isDataAvailable",
	    value: function ()
	    /*: boolean*/
	    {
	      var serverData = this._getServerData();

	      return !!(0, _keys.default)(serverData).length;
	    }
	    /**
	     * Gets a Pointer referencing this Object.
	     *
	     * @returns {Pointer}
	     */

	  }, {
	    key: "toPointer",
	    value: function ()
	    /*: Pointer*/
	    {
	      if (!this.id) {
	        throw new Error('Cannot create a pointer to an unsaved ParseObject');
	      }

	      return {
	        __type: 'Pointer',
	        className: this.className,
	        objectId: this.id
	      };
	    }
	    /**
	     * Gets a Pointer referencing this Object.
	     *
	     * @returns {Pointer}
	     */

	  }, {
	    key: "toOfflinePointer",
	    value: function ()
	    /*: Pointer*/
	    {
	      if (!this._localId) {
	        throw new Error('Cannot create a offline pointer to a saved ParseObject');
	      }

	      return {
	        __type: 'Object',
	        className: this.className,
	        _localId: this._localId
	      };
	    }
	    /**
	     * Gets the value of an attribute.
	     *
	     * @param {string} attr The string name of an attribute.
	     * @returns {*}
	     */

	  }, {
	    key: "get",
	    value: function (attr
	    /*: string*/
	    )
	    /*: mixed*/
	    {
	      return this.attributes[attr];
	    }
	    /**
	     * Gets a relation on the given class for the attribute.
	     *
	     * @param {string} attr The attribute to get the relation for.
	     * @returns {Parse.Relation}
	     */

	  }, {
	    key: "relation",
	    value: function (attr
	    /*: string*/
	    )
	    /*: ParseRelation*/
	    {
	      var value = this.get(attr);

	      if (value) {
	        if (!(value instanceof _ParseRelation.default)) {
	          throw new Error('Called relation() on non-relation field ' + attr);
	        }

	        value._ensureParentAndKey(this, attr);

	        return value;
	      }

	      return new _ParseRelation.default(this, attr);
	    }
	    /**
	     * Gets the HTML-escaped value of an attribute.
	     *
	     * @param {string} attr The string name of an attribute.
	     * @returns {string}
	     */

	  }, {
	    key: "escape",
	    value: function (attr
	    /*: string*/
	    )
	    /*: string*/
	    {
	      var val = this.attributes[attr];

	      if (val == null) {
	        return '';
	      }

	      if (typeof val !== 'string') {
	        if (typeof val.toString !== 'function') {
	          return '';
	        }

	        val = val.toString();
	      }

	      return (0, _escape2.default)(val);
	    }
	    /**
	     * Returns <code>true</code> if the attribute contains a value that is not
	     * null or undefined.
	     *
	     * @param {string} attr The string name of the attribute.
	     * @returns {boolean}
	     */

	  }, {
	    key: "has",
	    value: function (attr
	    /*: string*/
	    )
	    /*: boolean*/
	    {
	      var attributes = this.attributes;

	      if (attributes.hasOwnProperty(attr)) {
	        return attributes[attr] != null;
	      }

	      return false;
	    }
	    /**
	     * Sets a hash of model attributes on the object.
	     *
	     * <p>You can call it with an object containing keys and values, with one
	     * key and value, or dot notation.  For example:<pre>
	     *   gameTurn.set({
	     *     player: player1,
	     *     diceRoll: 2
	     *   }, {
	     *     error: function(gameTurnAgain, error) {
	     *       // The set failed validation.
	     *     }
	     *   });
	     *
	     *   game.set("currentPlayer", player2, {
	     *     error: function(gameTurnAgain, error) {
	     *       // The set failed validation.
	     *     }
	     *   });
	     *
	     *   game.set("finished", true);</pre></p>
	     *
	     *   game.set("player.score", 10);</pre></p>
	     *
	     * @param {(string|object)} key The key to set.
	     * @param {(string|object)} value The value to give it.
	     * @param {object} options A set of options for the set.
	     *     The only supported option is <code>error</code>.
	     * @returns {(ParseObject|boolean)} true if the set succeeded.
	     */

	  }, {
	    key: "set",
	    value: function (key
	    /*: mixed*/
	    , value
	    /*: mixed*/
	    , options
	    /*:: ?: mixed*/
	    )
	    /*: ParseObject | boolean*/
	    {
	      var changes = {};
	      var newOps = {};

	      if (key && (0, _typeof2.default)(key) === 'object') {
	        changes = key;
	        options = value;
	      } else if (typeof key === 'string') {
	        changes[key] = value;
	      } else {
	        return this;
	      }

	      options = options || {};
	      var readonly = [];

	      if (typeof this.constructor.readOnlyAttributes === 'function') {
	        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());
	      }

	      for (var k in changes) {
	        if (k === 'createdAt' || k === 'updatedAt') {
	          // This property is read-only, but for legacy reasons we silently
	          // ignore it
	          continue;
	        }

	        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {
	          throw new Error('Cannot modify readonly attribute: ' + k);
	        }

	        if (options.unset) {
	          newOps[k] = new ParseOp.UnsetOp();
	        } else if (changes[k] instanceof ParseOp.Op) {
	          newOps[k] = changes[k];
	        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {
	          newOps[k] = (0, ParseOp.opFromJSON)(changes[k]);
	        } else if (k === 'objectId' || k === 'id') {
	          if (typeof changes[k] === 'string') {
	            this.id = changes[k];
	          }
	        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {
	          newOps[k] = new ParseOp.SetOp(new _ParseACL.default(changes[k]));
	        } else if (changes[k] instanceof _ParseRelation.default) {
	          var relation = new _ParseRelation.default(this, k);
	          relation.targetClassName = changes[k].targetClassName;
	          newOps[k] = new ParseOp.SetOp(relation);
	        } else {
	          newOps[k] = new ParseOp.SetOp(changes[k]);
	        }
	      }

	      var currentAttributes = this.attributes; // Calculate new values

	      var newValues = {};

	      for (var _attr9 in newOps) {
	        if (newOps[_attr9] instanceof ParseOp.RelationOp) {
	          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);
	        } else if (!(newOps[_attr9] instanceof ParseOp.UnsetOp)) {
	          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);
	        }
	      } // Validate changes


	      if (!options.ignoreValidation) {
	        var validation = this.validate(newValues);

	        if (validation) {
	          if (typeof options.error === 'function') {
	            options.error(this, validation);
	          }

	          return false;
	        }
	      } // Consolidate Ops


	      var pendingOps = this._getPendingOps();

	      var last = pendingOps.length - 1;

	      var stateController = _CoreManager.default.getObjectStateController();

	      for (var _attr10 in newOps) {
	        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);

	        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);
	      }

	      return this;
	    }
	    /**
	     * Remove an attribute from the model. This is a noop if the attribute doesn't
	     * exist.
	     *
	     * @param {string} attr The string name of an attribute.
	     * @param options
	     * @returns {(ParseObject | boolean)}
	     */

	  }, {
	    key: "unset",
	    value: function (attr
	    /*: string*/
	    , options
	    /*:: ?: { [opt: string]: mixed }*/
	    )
	    /*: ParseObject | boolean*/
	    {
	      options = options || {};
	      options.unset = true;
	      return this.set(attr, null, options);
	    }
	    /**
	     * Atomically increments the value of the given attribute the next time the
	     * object is saved. If no amount is specified, 1 is used by default.
	     *
	     * @param attr {String} The key.
	     * @param amount {Number} The amount to increment by (optional).
	     * @returns {(ParseObject|boolean)}
	     */

	  }, {
	    key: "increment",
	    value: function (attr
	    /*: string*/
	    , amount
	    /*:: ?: number*/
	    )
	    /*: ParseObject | boolean*/
	    {
	      if (typeof amount === 'undefined') {
	        amount = 1;
	      }

	      if (typeof amount !== 'number') {
	        throw new Error('Cannot increment by a non-numeric amount.');
	      }

	      return this.set(attr, new ParseOp.IncrementOp(amount));
	    }
	    /**
	     * Atomically decrements the value of the given attribute the next time the
	     * object is saved. If no amount is specified, 1 is used by default.
	     *
	     * @param attr {String} The key.
	     * @param amount {Number} The amount to decrement by (optional).
	     * @returns {(ParseObject | boolean)}
	     */

	  }, {
	    key: "decrement",
	    value: function (attr
	    /*: string*/
	    , amount
	    /*:: ?: number*/
	    )
	    /*: ParseObject | boolean*/
	    {
	      if (typeof amount === 'undefined') {
	        amount = 1;
	      }

	      if (typeof amount !== 'number') {
	        throw new Error('Cannot decrement by a non-numeric amount.');
	      }

	      return this.set(attr, new ParseOp.IncrementOp(amount * -1));
	    }
	    /**
	     * Atomically add an object to the end of the array associated with a given
	     * key.
	     *
	     * @param attr {String} The key.
	     * @param item {} The item to add.
	     * @returns {(ParseObject | boolean)}
	     */

	  }, {
	    key: "add",
	    value: function (attr
	    /*: string*/
	    , item
	    /*: mixed*/
	    )
	    /*: ParseObject | boolean*/
	    {
	      return this.set(attr, new ParseOp.AddOp([item]));
	    }
	    /**
	     * Atomically add the objects to the end of the array associated with a given
	     * key.
	     *
	     * @param attr {String} The key.
	     * @param items {Object[]} The items to add.
	     * @returns {(ParseObject | boolean)}
	     */

	  }, {
	    key: "addAll",
	    value: function (attr
	    /*: string*/
	    , items
	    /*: Array<mixed>*/
	    )
	    /*: ParseObject | boolean*/
	    {
	      return this.set(attr, new ParseOp.AddOp(items));
	    }
	    /**
	     * Atomically add an object to the array associated with a given key, only
	     * if it is not already present in the array. The position of the insert is
	     * not guaranteed.
	     *
	     * @param attr {String} The key.
	     * @param item {} The object to add.
	     * @returns {(ParseObject | boolean)}
	     */

	  }, {
	    key: "addUnique",
	    value: function (attr
	    /*: string*/
	    , item
	    /*: mixed*/
	    )
	    /*: ParseObject | boolean*/
	    {
	      return this.set(attr, new ParseOp.AddUniqueOp([item]));
	    }
	    /**
	     * Atomically add the objects to the array associated with a given key, only
	     * if it is not already present in the array. The position of the insert is
	     * not guaranteed.
	     *
	     * @param attr {String} The key.
	     * @param items {Object[]} The objects to add.
	     * @returns {(ParseObject | boolean)}
	     */

	  }, {
	    key: "addAllUnique",
	    value: function (attr
	    /*: string*/
	    , items
	    /*: Array<mixed>*/
	    )
	    /*: ParseObject | boolean*/
	    {
	      return this.set(attr, new ParseOp.AddUniqueOp(items));
	    }
	    /**
	     * Atomically remove all instances of an object from the array associated
	     * with a given key.
	     *
	     * @param attr {String} The key.
	     * @param item {} The object to remove.
	     * @returns {(ParseObject | boolean)}
	     */

	  }, {
	    key: "remove",
	    value: function (attr
	    /*: string*/
	    , item
	    /*: mixed*/
	    )
	    /*: ParseObject | boolean*/
	    {
	      return this.set(attr, new ParseOp.RemoveOp([item]));
	    }
	    /**
	     * Atomically remove all instances of the objects from the array associated
	     * with a given key.
	     *
	     * @param attr {String} The key.
	     * @param items {Object[]} The object to remove.
	     * @returns {(ParseObject | boolean)}
	     */

	  }, {
	    key: "removeAll",
	    value: function (attr
	    /*: string*/
	    , items
	    /*: Array<mixed>*/
	    )
	    /*: ParseObject | boolean*/
	    {
	      return this.set(attr, new ParseOp.RemoveOp(items));
	    }
	    /**
	     * Returns an instance of a subclass of Parse.Op describing what kind of
	     * modification has been performed on this field since the last time it was
	     * saved. For example, after calling object.increment("x"), calling
	     * object.op("x") would return an instance of Parse.Op.Increment.
	     *
	     * @param attr {String} The key.
	     * @returns {Parse.Op} The operation, or undefined if none.
	     */

	  }, {
	    key: "op",
	    value: function (attr
	    /*: string*/
	    )
	    /*: ?Op*/
	    {
	      var pending = this._getPendingOps();

	      for (var i = pending.length; i--;) {
	        if (pending[i][attr]) {
	          return pending[i][attr];
	        }
	      }
	    }
	    /**
	     * Creates a new model with identical attributes to this one.
	     *
	     * @returns {Parse.Object}
	     */

	  }, {
	    key: "clone",
	    value: function clone()
	    /*: any*/
	    {
	      var clone = new this.constructor(this.className);
	      var attributes = this.attributes;

	      if (typeof this.constructor.readOnlyAttributes === 'function') {
	        var readonly = this.constructor.readOnlyAttributes() || []; // Attributes are frozen, so we have to rebuild an object,
	        // rather than delete readonly keys

	        var copy = {};

	        for (var a in attributes) {
	          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {
	            copy[a] = attributes[a];
	          }
	        }

	        attributes = copy;
	      }

	      if (clone.set) {
	        clone.set(attributes);
	      }

	      return clone;
	    }
	    /**
	     * Creates a new instance of this object. Not to be confused with clone()
	     *
	     * @returns {Parse.Object}
	     */

	  }, {
	    key: "newInstance",
	    value: function ()
	    /*: any*/
	    {
	      var clone = new this.constructor(this.className);
	      clone.id = this.id;

	      if (singleInstance) {
	        // Just return an object with the right id
	        return clone;
	      }

	      var stateController = _CoreManager.default.getObjectStateController();

	      if (stateController) {
	        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());
	      }

	      return clone;
	    }
	    /**
	     * Returns true if this object has never been saved to Parse.
	     *
	     * @returns {boolean}
	     */

	  }, {
	    key: "isNew",
	    value: function ()
	    /*: boolean*/
	    {
	      return !this.id;
	    }
	    /**
	     * Returns true if this object was created by the Parse server when the
	     * object might have already been there (e.g. in the case of a Facebook
	     * login)
	     *
	     * @returns {boolean}
	     */

	  }, {
	    key: "existed",
	    value: function ()
	    /*: boolean*/
	    {
	      if (!this.id) {
	        return false;
	      }

	      var stateController = _CoreManager.default.getObjectStateController();

	      var state = stateController.getState(this._getStateIdentifier());

	      if (state) {
	        return state.existed;
	      }

	      return false;
	    }
	    /**
	     * Returns true if this object exists on the Server
	     *
	     * @param {object} options
	     * Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     * </ul>
	     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object exists.
	     */

	  }, {
	    key: "exists",
	    value: function () {
	      var _exists = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options
	      /*:: ?: RequestOptions*/
	      ) {
	        var query;
	        return _regenerator.default.wrap(function (_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (this.id) {
	                  _context.next = 2;
	                  break;
	                }

	                return _context.abrupt("return", false);

	              case 2:
	                _context.prev = 2;
	                query = new _ParseQuery.default(this.className);
	                _context.next = 6;
	                return query.get(this.id, options);

	              case 6:
	                return _context.abrupt("return", true);

	              case 9:
	                _context.prev = 9;
	                _context.t0 = _context["catch"](2);

	                if (!(_context.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {
	                  _context.next = 13;
	                  break;
	                }

	                return _context.abrupt("return", false);

	              case 13:
	                throw _context.t0;

	              case 14:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[2, 9]]);
	      }));

	      return function () {
	        return _exists.apply(this, arguments);
	      };
	    }()
	    /**
	     * Checks if the model is currently in a valid state.
	     *
	     * @returns {boolean}
	     */

	  }, {
	    key: "isValid",
	    value: function ()
	    /*: boolean*/
	    {
	      return !this.validate(this.attributes);
	    }
	    /**
	     * You should not call this function directly unless you subclass
	     * <code>Parse.Object</code>, in which case you can override this method
	     * to provide additional validation on <code>set</code> and
	     * <code>save</code>.  Your implementation should return
	     *
	     * @param {object} attrs The current data to validate.
	     * @returns {Parse.Error|boolean} False if the data is valid.  An error object otherwise.
	     * @see Parse.Object#set
	     */

	  }, {
	    key: "validate",
	    value: function (attrs
	    /*: AttributeMap*/
	    )
	    /*: ParseError | boolean*/
	    {
	      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {
	        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');
	      }

	      for (var _key in attrs) {
	        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {
	          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);
	        }
	      }

	      return false;
	    }
	    /**
	     * Returns the ACL for this object.
	     *
	     * @returns {Parse.ACL} An instance of Parse.ACL.
	     * @see Parse.Object#get
	     */

	  }, {
	    key: "getACL",
	    value: function ()
	    /*: ?ParseACL*/
	    {
	      var acl = this.get('ACL');

	      if (acl instanceof _ParseACL.default) {
	        return acl;
	      }

	      return null;
	    }
	    /**
	     * Sets the ACL to be used for this object.
	     *
	     * @param {Parse.ACL} acl An instance of Parse.ACL.
	     * @param {object} options
	     * @returns {(ParseObject | boolean)} Whether the set passed validation.
	     * @see Parse.Object#set
	     */

	  }, {
	    key: "setACL",
	    value: function (acl
	    /*: ParseACL*/
	    , options
	    /*:: ?: mixed*/
	    )
	    /*: ParseObject | boolean*/
	    {
	      return this.set('ACL', acl, options);
	    }
	    /**
	     * Clears any (or specific) changes to this object made since the last call to save()
	     *
	     * @param {string} [keys] - specify which fields to revert
	     */

	  }, {
	    key: "revert",
	    value: function ()
	    /*: void*/
	    {
	      var keysToRevert;

	      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
	        keys[_key2] = arguments[_key2];
	      }

	      if (keys.length) {
	        keysToRevert = [];

	        var _iterator = _createForOfIteratorHelper(keys),
	            _step;

	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var _key3 = _step.value;

	            if (typeof _key3 === 'string') {
	              keysToRevert.push(_key3);
	            } else {
	              throw new Error('Parse.Object#revert expects either no, or a list of string, arguments.');
	            }
	          }
	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }
	      }

	      this._clearPendingOps(keysToRevert);
	    }
	    /**
	     * Clears all attributes on a model
	     *
	     * @returns {(ParseObject | boolean)}
	     */

	  }, {
	    key: "clear",
	    value: function ()
	    /*: ParseObject | boolean*/
	    {
	      var attributes = this.attributes;
	      var erasable = {};
	      var readonly = ['createdAt', 'updatedAt'];

	      if (typeof this.constructor.readOnlyAttributes === 'function') {
	        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());
	      }

	      for (var _attr11 in attributes) {
	        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {
	          erasable[_attr11] = true;
	        }
	      }

	      return this.set(erasable, {
	        unset: true
	      });
	    }
	    /**
	     * Fetch the model from the server. If the server's representation of the
	     * model differs from its current attributes, they will be overriden.
	     *
	     * @param {object} options
	     * Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,
	     *       or an array of array of strings.
	     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.
	     * </ul>
	     * @returns {Promise} A promise that is fulfilled when the fetch
	     *     completes.
	     */

	  }, {
	    key: "fetch",
	    value: function (options
	    /*: RequestOptions*/
	    )
	    /*: Promise*/
	    {
	      options = options || {};
	      var fetchOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        fetchOptions.useMasterKey = options.useMasterKey;
	      }

	      if (options.hasOwnProperty('sessionToken')) {
	        fetchOptions.sessionToken = options.sessionToken;
	      }

	      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {
	        fetchOptions.context = options.context;
	      }

	      if (options.hasOwnProperty('include')) {
	        fetchOptions.include = [];

	        if ((0, _isArray.default)(options.include)) {
	          var _context2;

	          (0, _forEach.default)(_context2 = options.include).call(_context2, function (key) {
	            if ((0, _isArray.default)(key)) {
	              var _context3;

	              fetchOptions.include = (0, _concat.default)(_context3 = fetchOptions.include).call(_context3, key);
	            } else {
	              fetchOptions.include.push(key);
	            }
	          });
	        } else {
	          fetchOptions.include.push(options.include);
	        }
	      }

	      var controller = _CoreManager.default.getObjectController();

	      return controller.fetch(this, true, fetchOptions);
	    }
	    /**
	     * Fetch the model from the server. If the server's representation of the
	     * model differs from its current attributes, they will be overriden.
	     *
	     * Includes nested Parse.Objects for the provided key. You can use dot
	     * notation to specify which fields in the included object are also fetched.
	     *
	     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.
	     * @param {object} options
	     * Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     * </ul>
	     * @returns {Promise} A promise that is fulfilled when the fetch
	     *     completes.
	     */

	  }, {
	    key: "fetchWithInclude",
	    value: function (keys
	    /*: String | Array<string | Array<string>>*/
	    , options
	    /*: RequestOptions*/
	    )
	    /*: Promise*/
	    {
	      options = options || {};
	      options.include = keys;
	      return this.fetch(options);
	    }
	    /**
	     * Saves this object to the server at some unspecified time in the future,
	     * even if Parse is currently inaccessible.
	     *
	     * Use this when you may not have a solid network connection, and don't need to know when the save completes.
	     * If there is some problem with the object such that it can't be saved, it will be silently discarded.
	     *
	     * Objects saved with this method will be stored locally in an on-disk cache until they can be delivered to Parse.
	     * They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection is
	     * available. Objects saved this way will persist even after the app is closed, in which case they will be sent the
	     * next time the app is opened.
	     *
	     * @param {object} [options]
	     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.
	     * Valid options are:
	     * <ul>
	     * <li>sessionToken: A valid session token, used for making a request on
	     * behalf of a specific user.
	     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).
	     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.
	     * </ul>
	     * @returns {Promise} A promise that is fulfilled when the save
	     * completes.
	     */

	  }, {
	    key: "saveEventually",
	    value: function () {
	      var _saveEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options
	      /*: SaveOptions*/
	      ) {
	        return _regenerator.default.wrap(function (_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                _context4.prev = 0;
	                _context4.next = 3;
	                return this.save(null, options);

	              case 3:
	                _context4.next = 11;
	                break;

	              case 5:
	                _context4.prev = 5;
	                _context4.t0 = _context4["catch"](0);

	                if (!(_context4.t0.message === 'XMLHttpRequest failed: "Unable to connect to the Parse API"')) {
	                  _context4.next = 11;
	                  break;
	                }

	                _context4.next = 10;
	                return _EventuallyQueue.default.save(this, options);

	              case 10:
	                _EventuallyQueue.default.poll();

	              case 11:
	                return _context4.abrupt("return", this);

	              case 12:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee2, this, [[0, 5]]);
	      }));

	      return function () {
	        return _saveEventually.apply(this, arguments);
	      };
	    }()
	    /**
	     * Set a hash of model attributes, and save the model to the server.
	     * updatedAt will be updated when the request returns.
	     * You can either call it as:<pre>
	     * object.save();</pre>
	     * or<pre>
	     * object.save(attrs);</pre>
	     * or<pre>
	     * object.save(null, options);</pre>
	     * or<pre>
	     * object.save(attrs, options);</pre>
	     * or<pre>
	     * object.save(key, value);</pre>
	     * or<pre>
	     * object.save(key, value, options);</pre>
	     *
	     * Example 1: <pre>
	     * gameTurn.save({
	     * player: "Jake Cutter",
	     * diceRoll: 2
	     * }).then(function(gameTurnAgain) {
	     * // The save was successful.
	     * }, function(error) {
	     * // The save failed.  Error is an instance of Parse.Error.
	     * });</pre>
	     *
	     * Example 2: <pre>
	     * gameTurn.save("player", "Jake Cutter");</pre>
	     *
	     * @param {string | object | null} [arg1]
	     * Valid options are:<ul>
	     * <li>`Object` - Key/value pairs to update on the object.</li>
	     * <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>
	     * <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>
	     * </ul>
	     * @param {string | object} [arg2]
	     * <ul>
	     * <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>
	     * <li>`Object` Options - Valid options are:
	     * <ul>
	     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     * be used for this request.
	     * <li>sessionToken: A valid session token, used for making a request on
	     * behalf of a specific user.
	     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).
	     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.
	     * </ul>
	     * </li>
	     * </ul>
	     * @param {object} [arg3]
	     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.
	     * Valid options are:
	     * <ul>
	     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     * be used for this request.
	     * <li>sessionToken: A valid session token, used for making a request on
	     * behalf of a specific user.
	     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).
	     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.
	     * </ul>
	     * @returns {Promise} A promise that is fulfilled when the save
	     * completes.
	     */

	  }, {
	    key: "save",
	    value: function (arg1
	    /*: ?string | { [attr: string]: mixed }*/
	    , arg2
	    /*: SaveOptions | mixed*/
	    , arg3
	    /*:: ?: SaveOptions*/
	    )
	    /*: Promise*/
	    {
	      var _this = this;

	      var attrs;
	      var options;

	      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {
	        attrs = arg1;

	        if ((0, _typeof2.default)(arg2) === 'object') {
	          options = arg2;
	        }
	      } else {
	        attrs = {};
	        attrs[arg1] = arg2;
	        options = arg3;
	      }

	      if (attrs) {
	        var validation = this.validate(attrs);

	        if (validation) {
	          return _promise.default.reject(validation);
	        }

	        this.set(attrs, options);
	      }

	      options = options || {};
	      var saveOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        saveOptions.useMasterKey = !!options.useMasterKey;
	      }

	      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {
	        saveOptions.sessionToken = options.sessionToken;
	      }

	      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {
	        saveOptions.installationId = options.installationId;
	      }

	      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {
	        saveOptions.context = options.context;
	      }

	      var controller = _CoreManager.default.getObjectController();

	      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;
	      return controller.save(unsaved, saveOptions).then(function () {
	        return controller.save(_this, saveOptions);
	      });
	    }
	    /**
	     * Deletes this object from the server at some unspecified time in the future,
	     * even if Parse is currently inaccessible.
	     *
	     * Use this when you may not have a solid network connection,
	     * and don't need to know when the delete completes. If there is some problem with the object
	     * such that it can't be deleted, the request will be silently discarded.
	     *
	     * Delete instructions made with this method will be stored locally in an on-disk cache until they can be transmitted
	     * to Parse. They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection
	     * is available. Delete requests will persist even after the app is closed, in which case they will be sent the
	     * next time the app is opened.
	     *
	     * @param {object} [options]
	     * Valid options are:<ul>
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.
	     * </ul>
	     * @returns {Promise} A promise that is fulfilled when the destroy
	     *     completes.
	     */

	  }, {
	    key: "destroyEventually",
	    value: function () {
	      var _destroyEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(options
	      /*: RequestOptions*/
	      ) {
	        return _regenerator.default.wrap(function (_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                _context5.prev = 0;
	                _context5.next = 3;
	                return this.destroy(options);

	              case 3:
	                _context5.next = 11;
	                break;

	              case 5:
	                _context5.prev = 5;
	                _context5.t0 = _context5["catch"](0);

	                if (!(_context5.t0.message === 'XMLHttpRequest failed: "Unable to connect to the Parse API"')) {
	                  _context5.next = 11;
	                  break;
	                }

	                _context5.next = 10;
	                return _EventuallyQueue.default.destroy(this, options);

	              case 10:
	                _EventuallyQueue.default.poll();

	              case 11:
	                return _context5.abrupt("return", this);

	              case 12:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee3, this, [[0, 5]]);
	      }));

	      return function () {
	        return _destroyEventually.apply(this, arguments);
	      };
	    }()
	    /**
	     * Destroy this model on the server if it was already persisted.
	     *
	     * @param {object} options
	     * Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.
	     * </ul>
	     * @returns {Promise} A promise that is fulfilled when the destroy
	     *     completes.
	     */

	  }, {
	    key: "destroy",
	    value: function (options
	    /*: RequestOptions*/
	    )
	    /*: Promise*/
	    {
	      options = options || {};
	      var destroyOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        destroyOptions.useMasterKey = options.useMasterKey;
	      }

	      if (options.hasOwnProperty('sessionToken')) {
	        destroyOptions.sessionToken = options.sessionToken;
	      }

	      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {
	        destroyOptions.context = options.context;
	      }

	      if (!this.id) {
	        return _promise.default.resolve();
	      }

	      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);
	    }
	    /**
	     * Asynchronously stores the object and every object it points to in the local datastore,
	     * recursively, using a default pin name: _default.
	     *
	     * If those other objects have not been fetched from Parse, they will not be stored.
	     * However, if they have changed data, all the changes will be retained.
	     *
	     * <pre>
	     * await object.pin();
	     * </pre>
	     *
	     * To retrieve object:
	     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>
	     *
	     * @returns {Promise} A promise that is fulfilled when the pin completes.
	     */

	  }, {
	    key: "pin",
	    value: function ()
	    /*: Promise<void>*/
	    {
	      return ParseObject.pinAllWithName(LocalDatastoreUtils.DEFAULT_PIN, [this]);
	    }
	    /**
	     * Asynchronously removes the object and every object it points to in the local datastore,
	     * recursively, using a default pin name: _default.
	     *
	     * <pre>
	     * await object.unPin();
	     * </pre>
	     *
	     * @returns {Promise} A promise that is fulfilled when the unPin completes.
	     */

	  }, {
	    key: "unPin",
	    value: function ()
	    /*: Promise<void>*/
	    {
	      return ParseObject.unPinAllWithName(LocalDatastoreUtils.DEFAULT_PIN, [this]);
	    }
	    /**
	     * Asynchronously returns if the object is pinned
	     *
	     * <pre>
	     * const isPinned = await object.isPinned();
	     * </pre>
	     *
	     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.
	     */

	  }, {
	    key: "isPinned",
	    value: function () {
	      var _isPinned = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
	        var localDatastore, objectKey, pin;
	        return _regenerator.default.wrap(function (_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                localDatastore = _CoreManager.default.getLocalDatastore();

	                if (localDatastore.isEnabled) {
	                  _context6.next = 3;
	                  break;
	                }

	                return _context6.abrupt("return", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));

	              case 3:
	                objectKey = localDatastore.getKeyForObject(this);
	                _context6.next = 6;
	                return localDatastore.fromPinWithName(objectKey);

	              case 6:
	                pin = _context6.sent;
	                return _context6.abrupt("return", pin.length > 0);

	              case 8:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      return function () {
	        return _isPinned.apply(this, arguments);
	      };
	    }()
	    /**
	     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.
	     *
	     * If those other objects have not been fetched from Parse, they will not be stored.
	     * However, if they have changed data, all the changes will be retained.
	     *
	     * <pre>
	     * await object.pinWithName(name);
	     * </pre>
	     *
	     * To retrieve object:
	     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>
	     *
	     * @param {string} name Name of Pin.
	     * @returns {Promise} A promise that is fulfilled when the pin completes.
	     */

	  }, {
	    key: "pinWithName",
	    value: function (name
	    /*: string*/
	    )
	    /*: Promise<void>*/
	    {
	      return ParseObject.pinAllWithName(name, [this]);
	    }
	    /**
	     * Asynchronously removes the object and every object it points to in the local datastore, recursively.
	     *
	     * <pre>
	     * await object.unPinWithName(name);
	     * </pre>
	     *
	     * @param {string} name Name of Pin.
	     * @returns {Promise} A promise that is fulfilled when the unPin completes.
	     */

	  }, {
	    key: "unPinWithName",
	    value: function (name
	    /*: string*/
	    )
	    /*: Promise<void>*/
	    {
	      return ParseObject.unPinAllWithName(name, [this]);
	    }
	    /**
	     * Asynchronously loads data from the local datastore into this object.
	     *
	     * <pre>
	     * await object.fetchFromLocalDatastore();
	     * </pre>
	     *
	     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>
	     * and then call <code>fetchFromLocalDatastore()</code> on it.
	     *
	     * @returns {Promise} A promise that is fulfilled when the fetch completes.
	     */

	  }, {
	    key: "fetchFromLocalDatastore",
	    value: function () {
	      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {
	        var localDatastore, objectKey, pinned, result;
	        return _regenerator.default.wrap(function (_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                localDatastore = _CoreManager.default.getLocalDatastore();

	                if (localDatastore.isEnabled) {
	                  _context7.next = 3;
	                  break;
	                }

	                throw new Error('Parse.enableLocalDatastore() must be called first');

	              case 3:
	                objectKey = localDatastore.getKeyForObject(this);
	                _context7.next = 6;
	                return localDatastore._serializeObject(objectKey);

	              case 6:
	                pinned = _context7.sent;

	                if (pinned) {
	                  _context7.next = 9;
	                  break;
	                }

	                throw new Error('Cannot fetch an unsaved ParseObject');

	              case 9:
	                result = ParseObject.fromJSON(pinned);

	                this._finishFetch(result.toJSON());

	                return _context7.abrupt("return", this);

	              case 12:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee5, this);
	      }));

	      return function () {
	        return _fetchFromLocalDatastore.apply(this, arguments);
	      };
	    }()
	    /** Static methods **/

	  }], [{
	    key: "_getClassMap",
	    value: function () {
	      return classMap;
	    }
	  }, {
	    key: "_clearAllState",
	    value: function () {
	      var stateController = _CoreManager.default.getObjectStateController();

	      stateController.clearAllState();
	    }
	    /**
	     * Fetches the given list of Parse.Object.
	     * If any error is encountered, stops and calls the error handler.
	     *
	     * <pre>
	     *   Parse.Object.fetchAll([object1, object2, ...])
	     *    .then((list) => {
	     *      // All the objects were fetched.
	     *    }, (error) => {
	     *      // An error occurred while fetching one of the objects.
	     *    });
	     * </pre>
	     *
	     * @param {Array} list A list of <code>Parse.Object</code>.
	     * @param {object} options
	     * Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,
	     *       or an array of array of strings.
	     * </ul>
	     * @static
	     * @returns {Parse.Object[]}
	     */

	  }, {
	    key: "fetchAll",
	    value: function (list
	    /*: Array<ParseObject>*/
	    ) {
	      var options
	      /*: RequestOptions*/
	      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      var queryOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        queryOptions.useMasterKey = options.useMasterKey;
	      }

	      if (options.hasOwnProperty('sessionToken')) {
	        queryOptions.sessionToken = options.sessionToken;
	      }

	      if (options.hasOwnProperty('include')) {
	        queryOptions.include = ParseObject.handleIncludeOptions(options);
	      }

	      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);
	    }
	    /**
	     * Fetches the given list of Parse.Object.
	     *
	     * Includes nested Parse.Objects for the provided key. You can use dot
	     * notation to specify which fields in the included object are also fetched.
	     *
	     * If any error is encountered, stops and calls the error handler.
	     *
	     * <pre>
	     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])
	     *    .then((list) => {
	     *      // All the objects were fetched.
	     *    }, (error) => {
	     *      // An error occurred while fetching one of the objects.
	     *    });
	     * </pre>
	     *
	     * @param {Array} list A list of <code>Parse.Object</code>.
	     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.
	     * @param {object} options
	     * Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     * </ul>
	     * @static
	     * @returns {Parse.Object[]}
	     */

	  }, {
	    key: "fetchAllWithInclude",
	    value: function (list
	    /*: Array<ParseObject>*/
	    , keys
	    /*: String | Array<string | Array<string>>*/
	    , options
	    /*: RequestOptions*/
	    ) {
	      options = options || {};
	      options.include = keys;
	      return ParseObject.fetchAll(list, options);
	    }
	    /**
	     * Fetches the given list of Parse.Object if needed.
	     * If any error is encountered, stops and calls the error handler.
	     *
	     * Includes nested Parse.Objects for the provided key. You can use dot
	     * notation to specify which fields in the included object are also fetched.
	     *
	     * If any error is encountered, stops and calls the error handler.
	     *
	     * <pre>
	     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])
	     *    .then((list) => {
	     *      // All the objects were fetched.
	     *    }, (error) => {
	     *      // An error occurred while fetching one of the objects.
	     *    });
	     * </pre>
	     *
	     * @param {Array} list A list of <code>Parse.Object</code>.
	     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.
	     * @param {object} options
	     * Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     *   <li>sessionToken: A valid session token, used for making a request on
	     *       behalf of a specific user.
	     * </ul>
	     * @static
	     * @returns {Parse.Object[]}
	     */

	  }, {
	    key: "fetchAllIfNeededWithInclude",
	    value: function (list
	    /*: Array<ParseObject>*/
	    , keys
	    /*: String | Array<string | Array<string>>*/
	    , options
	    /*: RequestOptions*/
	    ) {
	      options = options || {};
	      options.include = keys;
	      return ParseObject.fetchAllIfNeeded(list, options);
	    }
	    /**
	     * Fetches the given list of Parse.Object if needed.
	     * If any error is encountered, stops and calls the error handler.
	     *
	     * <pre>
	     *   Parse.Object.fetchAllIfNeeded([object1, ...])
	     *    .then((list) => {
	     *      // Objects were fetched and updated.
	     *    }, (error) => {
	     *      // An error occurred while fetching one of the objects.
	     *    });
	     * </pre>
	     *
	     * @param {Array} list A list of <code>Parse.Object</code>.
	     * @param {object} options
	     * @static
	     * @returns {Parse.Object[]}
	     */

	  }, {
	    key: "fetchAllIfNeeded",
	    value: function (list
	    /*: Array<ParseObject>*/
	    , options) {
	      options = options || {};
	      var queryOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        queryOptions.useMasterKey = options.useMasterKey;
	      }

	      if (options.hasOwnProperty('sessionToken')) {
	        queryOptions.sessionToken = options.sessionToken;
	      }

	      if (options.hasOwnProperty('include')) {
	        queryOptions.include = ParseObject.handleIncludeOptions(options);
	      }

	      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);
	    }
	  }, {
	    key: "handleIncludeOptions",
	    value: function (options) {
	      var include = [];

	      if ((0, _isArray.default)(options.include)) {
	        var _context8;

	        (0, _forEach.default)(_context8 = options.include).call(_context8, function (key) {
	          if ((0, _isArray.default)(key)) {
	            include = (0, _concat.default)(include).call(include, key);
	          } else {
	            include.push(key);
	          }
	        });
	      } else {
	        include.push(options.include);
	      }

	      return include;
	    }
	    /**
	     * Destroy the given list of models on the server if it was already persisted.
	     *
	     * <p>Unlike saveAll, if an error occurs while deleting an individual model,
	     * this method will continue trying to delete the rest of the models if
	     * possible, except in the case of a fatal error like a connection error.
	     *
	     * <p>In particular, the Parse.Error object returned in the case of error may
	     * be one of two types:
	     *
	     * <ul>
	     * <li>A Parse.Error.AGGREGATE_ERROR. This object's "errors" property is an
	     * array of other Parse.Error objects. Each error object in this array
	     * has an "object" property that references the object that could not be
	     * deleted (for instance, because that object could not be found).</li>
	     * <li>A non-aggregate Parse.Error. This indicates a serious error that
	     * caused the delete operation to be aborted partway through (for
	     * instance, a connection failure in the middle of the delete).</li>
	     * </ul>
	     *
	     * <pre>
	     * Parse.Object.destroyAll([object1, object2, ...])
	     * .then((list) => {
	     * // All the objects were deleted.
	     * }, (error) => {
	     * // An error occurred while deleting one or more of the objects.
	     * // If this is an aggregate error, then we can inspect each error
	     * // object individually to determine the reason why a particular
	     * // object was not deleted.
	     * if (error.code === Parse.Error.AGGREGATE_ERROR) {
	     * for (var i = 0; i < error.errors.length; i++) {
	     * console.log("Couldn't delete " + error.errors[i].object.id +
	     * "due to " + error.errors[i].message);
	     * }
	     * } else {
	     * console.log("Delete aborted because of " + error.message);
	     * }
	     * });
	     * </pre>
	     *
	     * @param {Array} list A list of <code>Parse.Object</code>.
	     * @param {object} options
	     * @static
	     * @returns {Promise} A promise that is fulfilled when the destroyAll
	     * completes.
	     */

	  }, {
	    key: "destroyAll",
	    value: function (list
	    /*: Array<ParseObject>*/
	    ) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      var destroyOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        destroyOptions.useMasterKey = options.useMasterKey;
	      }

	      if (options.hasOwnProperty('sessionToken')) {
	        destroyOptions.sessionToken = options.sessionToken;
	      }

	      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {
	        destroyOptions.batchSize = options.batchSize;
	      }

	      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {
	        destroyOptions.context = options.context;
	      }

	      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);
	    }
	    /**
	     * Saves the given list of Parse.Object.
	     * If any error is encountered, stops and calls the error handler.
	     *
	     * <pre>
	     * Parse.Object.saveAll([object1, object2, ...])
	     * .then((list) => {
	     * // All the objects were saved.
	     * }, (error) => {
	     * // An error occurred while saving one of the objects.
	     * });
	     * </pre>
	     *
	     * @param {Array} list A list of <code>Parse.Object</code>.
	     * @param {object} options
	     * @static
	     * @returns {Parse.Object[]}
	     */

	  }, {
	    key: "saveAll",
	    value: function (list
	    /*: Array<ParseObject>*/
	    ) {
	      var options
	      /*: RequestOptions*/
	      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      var saveOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        saveOptions.useMasterKey = options.useMasterKey;
	      }

	      if (options.hasOwnProperty('sessionToken')) {
	        saveOptions.sessionToken = options.sessionToken;
	      }

	      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {
	        saveOptions.batchSize = options.batchSize;
	      }

	      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {
	        saveOptions.context = options.context;
	      }

	      return _CoreManager.default.getObjectController().save(list, saveOptions);
	    }
	    /**
	     * Creates a reference to a subclass of Parse.Object with the given id. This
	     * does not exist on Parse.Object, only on subclasses.
	     *
	     * <p>A shortcut for: <pre>
	     *  var Foo = Parse.Object.extend("Foo");
	     *  var pointerToFoo = new Foo();
	     *  pointerToFoo.id = "myObjectId";
	     * </pre>
	     *
	     * @param {string} id The ID of the object to create a reference to.
	     * @static
	     * @returns {Parse.Object} A Parse.Object reference.
	     */

	  }, {
	    key: "createWithoutData",
	    value: function (id
	    /*: string*/
	    ) {
	      var obj = new this();
	      obj.id = id;
	      return obj;
	    }
	    /**
	     * Creates a new instance of a Parse Object from a JSON representation.
	     *
	     * @param {object} json The JSON map of the Object's data
	     * @param {boolean} override In single instance mode, all old server data
	     *   is overwritten if this is set to true
	     * @param {boolean} dirty Whether the Parse.Object should set JSON keys to dirty
	     * @static
	     * @returns {Parse.Object} A Parse.Object reference
	     */

	  }, {
	    key: "fromJSON",
	    value: function (json
	    /*: any*/
	    , override
	    /*:: ?: boolean*/
	    , dirty
	    /*:: ?: boolean*/
	    ) {
	      if (!json.className) {
	        throw new Error('Cannot create an object without a className');
	      }

	      var constructor = classMap[json.className];
	      var o = constructor ? new constructor(json.className) : new ParseObject(json.className);
	      var otherAttributes = {};

	      for (var _attr12 in json) {
	        if (_attr12 !== 'className' && _attr12 !== '__type') {
	          otherAttributes[_attr12] = json[_attr12];

	          if (dirty) {
	            o.set(_attr12, json[_attr12]);
	          }
	        }
	      }

	      if (override) {
	        // id needs to be set before clearServerData can work
	        if (otherAttributes.objectId) {
	          o.id = otherAttributes.objectId;
	        }

	        var preserved = null;

	        if (typeof o._preserveFieldsOnFetch === 'function') {
	          preserved = o._preserveFieldsOnFetch();
	        }

	        o._clearServerData();

	        if (preserved) {
	          o._finishFetch(preserved);
	        }
	      }

	      o._finishFetch(otherAttributes);

	      if (json.objectId) {
	        o._setExisted(true);
	      }

	      return o;
	    }
	    /**
	     * Registers a subclass of Parse.Object with a specific class name.
	     * When objects of that class are retrieved from a query, they will be
	     * instantiated with this subclass.
	     * This is only necessary when using ES6 subclassing.
	     *
	     * @param {string} className The class name of the subclass
	     * @param {Function} constructor The subclass
	     */

	  }, {
	    key: "registerSubclass",
	    value: function (className
	    /*: string*/
	    , constructor
	    /*: any*/
	    ) {
	      if (typeof className !== 'string') {
	        throw new TypeError('The first argument must be a valid class name.');
	      }

	      if (typeof constructor === 'undefined') {
	        throw new TypeError('You must supply a subclass constructor.');
	      }

	      if (typeof constructor !== 'function') {
	        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');
	      }

	      classMap[className] = constructor;

	      if (!constructor.className) {
	        constructor.className = className;
	      }
	    }
	    /**
	     * Unegisters a subclass of Parse.Object with a specific class name.
	     *
	     * @param {string} className The class name of the subclass
	     */

	  }, {
	    key: "unregisterSubclass",
	    value: function (className
	    /*: string*/
	    ) {
	      if (typeof className !== 'string') {
	        throw new TypeError('The first argument must be a valid class name.');
	      }

	      delete classMap[className];
	    }
	    /**
	     * Creates a new subclass of Parse.Object for the given Parse class name.
	     *
	     * <p>Every extension of a Parse class will inherit from the most recent
	     * previous extension of that class. When a Parse.Object is automatically
	     * created by parsing JSON, it will use the most recent extension of that
	     * class.</p>
	     *
	     * <p>You should call either:<pre>
	     *     var MyClass = Parse.Object.extend("MyClass", {
	     *         <i>Instance methods</i>,
	     *         initialize: function(attrs, options) {
	     *             this.someInstanceProperty = [],
	     *             <i>Other instance properties</i>
	     *         }
	     *     }, {
	     *         <i>Class properties</i>
	     *     });</pre>
	     * or, for Backbone compatibility:<pre>
	     *     var MyClass = Parse.Object.extend({
	     *         className: "MyClass",
	     *         <i>Instance methods</i>,
	     *         initialize: function(attrs, options) {
	     *             this.someInstanceProperty = [],
	     *             <i>Other instance properties</i>
	     *         }
	     *     }, {
	     *         <i>Class properties</i>
	     *     });</pre></p>
	     *
	     * @param {string} className The name of the Parse class backing this model.
	     * @param {object} protoProps Instance properties to add to instances of the
	     *     class returned from this method.
	     * @param {object} classProps Class properties to add the class returned from
	     *     this method.
	     * @returns {Parse.Object} A new subclass of Parse.Object.
	     */

	  }, {
	    key: "extend",
	    value: function (className
	    /*: any*/
	    , protoProps
	    /*: any*/
	    , classProps
	    /*: any*/
	    ) {
	      if (typeof className !== 'string') {
	        if (className && typeof className.className === 'string') {
	          return ParseObject.extend(className.className, className, protoProps);
	        } else {
	          throw new Error("Parse.Object.extend's first argument should be the className.");
	        }
	      }

	      var adjustedClassName = className;

	      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {
	        adjustedClassName = '_User';
	      }

	      var parentProto = ParseObject.prototype;

	      if (this.hasOwnProperty('__super__') && this.__super__) {
	        parentProto = this.prototype;
	      } else if (classMap[adjustedClassName]) {
	        parentProto = classMap[adjustedClassName].prototype;
	      }

	      var ParseObjectSubclass = function (attributes, options) {
	        this.className = adjustedClassName;
	        this._objCount = objectCount++; // Enable legacy initializers

	        if (typeof this.initialize === 'function') {
	          this.initialize.apply(this, arguments);
	        }

	        if (attributes && (0, _typeof2.default)(attributes) === 'object') {
	          if (!this.set(attributes || {}, options)) {
	            throw new Error("Can't create an invalid Parse Object");
	          }
	        }
	      };

	      ParseObjectSubclass.className = adjustedClassName;
	      ParseObjectSubclass.__super__ = parentProto;
	      ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {
	        constructor: {
	          value: ParseObjectSubclass,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });

	      if (protoProps) {
	        for (var prop in protoProps) {
	          if (prop !== 'className') {
	            (0, _defineProperty2.default)(ParseObjectSubclass.prototype, prop, {
	              value: protoProps[prop],
	              enumerable: false,
	              writable: true,
	              configurable: true
	            });
	          }
	        }
	      }

	      if (classProps) {
	        for (var _prop in classProps) {
	          if (_prop !== 'className') {
	            (0, _defineProperty2.default)(ParseObjectSubclass, _prop, {
	              value: classProps[_prop],
	              enumerable: false,
	              writable: true,
	              configurable: true
	            });
	          }
	        }
	      }

	      ParseObjectSubclass.extend = function (name, protoProps, classProps) {
	        if (typeof name === 'string') {
	          return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);
	        }

	        return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);
	      };

	      ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;
	      classMap[adjustedClassName] = ParseObjectSubclass;
	      return ParseObjectSubclass;
	    }
	    /**
	     * Enable single instance objects, where any local objects with the same Id
	     * share the same attributes, and stay synchronized with each other.
	     * This is disabled by default in server environments, since it can lead to
	     * security issues.
	     *
	     * @static
	     */

	  }, {
	    key: "enableSingleInstance",
	    value: function () {
	      singleInstance = true;

	      _CoreManager.default.setObjectStateController(SingleInstanceStateController$1);
	    }
	    /**
	     * Disable single instance objects, where any local objects with the same Id
	     * share the same attributes, and stay synchronized with each other.
	     * When disabled, you can have two instances of the same object in memory
	     * without them sharing attributes.
	     *
	     * @static
	     */

	  }, {
	    key: "disableSingleInstance",
	    value: function () {
	      singleInstance = false;

	      _CoreManager.default.setObjectStateController(UniqueInstanceStateController$1);
	    }
	    /**
	     * Asynchronously stores the objects and every object they point to in the local datastore,
	     * recursively, using a default pin name: _default.
	     *
	     * If those other objects have not been fetched from Parse, they will not be stored.
	     * However, if they have changed data, all the changes will be retained.
	     *
	     * <pre>
	     * await Parse.Object.pinAll([...]);
	     * </pre>
	     *
	     * To retrieve object:
	     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>
	     *
	     * @param {Array} objects A list of <code>Parse.Object</code>.
	     * @returns {Promise} A promise that is fulfilled when the pin completes.
	     * @static
	     */

	  }, {
	    key: "pinAll",
	    value: function (objects
	    /*: Array<ParseObject>*/
	    )
	    /*: Promise<void>*/
	    {
	      var localDatastore = _CoreManager.default.getLocalDatastore();

	      if (!localDatastore.isEnabled) {
	        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');
	      }

	      return ParseObject.pinAllWithName(LocalDatastoreUtils.DEFAULT_PIN, objects);
	    }
	    /**
	     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.
	     *
	     * If those other objects have not been fetched from Parse, they will not be stored.
	     * However, if they have changed data, all the changes will be retained.
	     *
	     * <pre>
	     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);
	     * </pre>
	     *
	     * To retrieve object:
	     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>
	     *
	     * @param {string} name Name of Pin.
	     * @param {Array} objects A list of <code>Parse.Object</code>.
	     * @returns {Promise} A promise that is fulfilled when the pin completes.
	     * @static
	     */

	  }, {
	    key: "pinAllWithName",
	    value: function (name
	    /*: string*/
	    , objects
	    /*: Array<ParseObject>*/
	    )
	    /*: Promise<void>*/
	    {
	      var localDatastore = _CoreManager.default.getLocalDatastore();

	      if (!localDatastore.isEnabled) {
	        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');
	      }

	      return localDatastore._handlePinAllWithName(name, objects);
	    }
	    /**
	     * Asynchronously removes the objects and every object they point to in the local datastore,
	     * recursively, using a default pin name: _default.
	     *
	     * <pre>
	     * await Parse.Object.unPinAll([...]);
	     * </pre>
	     *
	     * @param {Array} objects A list of <code>Parse.Object</code>.
	     * @returns {Promise} A promise that is fulfilled when the unPin completes.
	     * @static
	     */

	  }, {
	    key: "unPinAll",
	    value: function (objects
	    /*: Array<ParseObject>*/
	    )
	    /*: Promise<void>*/
	    {
	      var localDatastore = _CoreManager.default.getLocalDatastore();

	      if (!localDatastore.isEnabled) {
	        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');
	      }

	      return ParseObject.unPinAllWithName(LocalDatastoreUtils.DEFAULT_PIN, objects);
	    }
	    /**
	     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.
	     *
	     * <pre>
	     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);
	     * </pre>
	     *
	     * @param {string} name Name of Pin.
	     * @param {Array} objects A list of <code>Parse.Object</code>.
	     * @returns {Promise} A promise that is fulfilled when the unPin completes.
	     * @static
	     */

	  }, {
	    key: "unPinAllWithName",
	    value: function (name
	    /*: string*/
	    , objects
	    /*: Array<ParseObject>*/
	    )
	    /*: Promise<void>*/
	    {
	      var localDatastore = _CoreManager.default.getLocalDatastore();

	      if (!localDatastore.isEnabled) {
	        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');
	      }

	      return localDatastore._handleUnPinAllWithName(name, objects);
	    }
	    /**
	     * Asynchronously removes all objects in the local datastore using a default pin name: _default.
	     *
	     * <pre>
	     * await Parse.Object.unPinAllObjects();
	     * </pre>
	     *
	     * @returns {Promise} A promise that is fulfilled when the unPin completes.
	     * @static
	     */

	  }, {
	    key: "unPinAllObjects",
	    value: function ()
	    /*: Promise<void>*/
	    {
	      var localDatastore = _CoreManager.default.getLocalDatastore();

	      if (!localDatastore.isEnabled) {
	        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');
	      }

	      return localDatastore.unPinWithName(LocalDatastoreUtils.DEFAULT_PIN);
	    }
	    /**
	     * Asynchronously removes all objects with the specified pin name.
	     * Deletes the pin name also.
	     *
	     * <pre>
	     * await Parse.Object.unPinAllObjectsWithName(name);
	     * </pre>
	     *
	     * @param {string} name Name of Pin.
	     * @returns {Promise} A promise that is fulfilled when the unPin completes.
	     * @static
	     */

	  }, {
	    key: "unPinAllObjectsWithName",
	    value: function (name
	    /*: string*/
	    )
	    /*: Promise<void>*/
	    {
	      var localDatastore = _CoreManager.default.getLocalDatastore();

	      if (!localDatastore.isEnabled) {
	        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');
	      }

	      return localDatastore.unPinWithName(LocalDatastoreUtils.PIN_PREFIX + name);
	    }
	  }]);
	  return ParseObject;
	}();

	var DefaultController = {
	  fetch: function (target
	  /*: ParseObject | Array<ParseObject>*/
	  , forceFetch
	  /*: boolean*/
	  , options
	  /*: RequestOptions*/
	  )
	  /*: Promise<Array<void> | ParseObject>*/
	  {
	    var localDatastore = _CoreManager.default.getLocalDatastore();

	    if ((0, _isArray.default)(target)) {
	      if (target.length < 1) {
	        return _promise.default.resolve([]);
	      }

	      var objs = [];
	      var ids = [];
	      var className = null;
	      var results = [];
	      var error = null;
	      (0, _forEach.default)(target).call(target, function (el) {
	        if (error) {
	          return;
	        }

	        if (!className) {
	          className = el.className;
	        }

	        if (className !== el.className) {
	          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');
	        }

	        if (!el.id) {
	          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');
	        }

	        if (forceFetch || !el.isDataAvailable()) {
	          ids.push(el.id);
	          objs.push(el);
	        }

	        results.push(el);
	      });

	      if (error) {
	        return _promise.default.reject(error);
	      }

	      var query = new _ParseQuery.default(className);
	      query.containedIn('objectId', ids);

	      if (options && options.include) {
	        query.include(options.include);
	      }

	      query._limit = ids.length;
	      return (0, _find.default)(query).call(query, options).then( /*#__PURE__*/function () {
	        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(objects) {
	          var idMap, i, obj, _i, _obj, id, _iterator2, _step2, object;

	          return _regenerator.default.wrap(function (_context9) {
	            while (1) {
	              switch (_context9.prev = _context9.next) {
	                case 0:
	                  idMap = {};
	                  (0, _forEach.default)(objects).call(objects, function (o) {
	                    idMap[o.id] = o;
	                  });
	                  i = 0;

	                case 3:
	                  if (!(i < objs.length)) {
	                    _context9.next = 11;
	                    break;
	                  }

	                  obj = objs[i];

	                  if (!(!obj || !obj.id || !idMap[obj.id])) {
	                    _context9.next = 8;
	                    break;
	                  }

	                  if (!forceFetch) {
	                    _context9.next = 8;
	                    break;
	                  }

	                  return _context9.abrupt("return", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));

	                case 8:
	                  i++;
	                  _context9.next = 3;
	                  break;

	                case 11:
	                  if (!singleInstance) {
	                    // If single instance objects are disabled, we need to replace the
	                    for (_i = 0; _i < results.length; _i++) {
	                      _obj = results[_i];

	                      if (_obj && _obj.id && idMap[_obj.id]) {
	                        id = _obj.id;

	                        _obj._finishFetch(idMap[id].toJSON());

	                        results[_i] = idMap[id];
	                      }
	                    }
	                  }

	                  _iterator2 = _createForOfIteratorHelper(results);
	                  _context9.prev = 13;

	                  _iterator2.s();

	                case 15:
	                  if ((_step2 = _iterator2.n()).done) {
	                    _context9.next = 21;
	                    break;
	                  }

	                  object = _step2.value;
	                  _context9.next = 19;
	                  return localDatastore._updateObjectIfPinned(object);

	                case 19:
	                  _context9.next = 15;
	                  break;

	                case 21:
	                  _context9.next = 26;
	                  break;

	                case 23:
	                  _context9.prev = 23;
	                  _context9.t0 = _context9["catch"](13);

	                  _iterator2.e(_context9.t0);

	                case 26:
	                  _context9.prev = 26;

	                  _iterator2.f();

	                  return _context9.finish(26);

	                case 29:
	                  return _context9.abrupt("return", _promise.default.resolve(results));

	                case 30:
	                case "end":
	                  return _context9.stop();
	              }
	            }
	          }, _callee6, null, [[13, 23, 26, 29]]);
	        }));

	        return function () {
	          return _ref.apply(this, arguments);
	        };
	      }());
	    } else if (target instanceof ParseObject) {
	      if (!target.id) {
	        return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'Object does not have an ID'));
	      }

	      var RESTController = _CoreManager.default.getRESTController();

	      var params = {};

	      if (options && options.include) {
	        params.include = options.include.join();
	      }

	      return RESTController.request('GET', 'classes/' + target.className + '/' + target._getId(), params, options).then( /*#__PURE__*/function () {
	        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(response) {
	          return _regenerator.default.wrap(function (_context10) {
	            while (1) {
	              switch (_context10.prev = _context10.next) {
	                case 0:
	                  target._clearPendingOps();

	                  target._clearServerData();

	                  target._finishFetch(response);

	                  _context10.next = 5;
	                  return localDatastore._updateObjectIfPinned(target);

	                case 5:
	                  return _context10.abrupt("return", target);

	                case 6:
	                case "end":
	                  return _context10.stop();
	              }
	            }
	          }, _callee7);
	        }));

	        return function () {
	          return _ref2.apply(this, arguments);
	        };
	      }());
	    }

	    return _promise.default.resolve();
	  },
	  destroy: function (target
	  /*: ParseObject | Array<ParseObject>*/
	  , options
	  /*: RequestOptions*/
	  )
	  /*: Promise<Array<void> | ParseObject>*/
	  {
	    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {
	      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors;
	      return _regenerator.default.wrap(function (_context13) {
	        while (1) {
	          switch (_context13.prev = _context13.next) {
	            case 0:
	              batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');
	              localDatastore = _CoreManager.default.getLocalDatastore();
	              RESTController = _CoreManager.default.getRESTController();

	              if (!(0, _isArray.default)(target)) {
	                _context13.next = 15;
	                break;
	              }

	              if (!(target.length < 1)) {
	                _context13.next = 6;
	                break;
	              }

	              return _context13.abrupt("return", _promise.default.resolve([]));

	            case 6:
	              batches = [[]];
	              (0, _forEach.default)(target).call(target, function (obj) {
	                if (!obj.id) {
	                  return;
	                }

	                batches[batches.length - 1].push(obj);

	                if (batches[batches.length - 1].length >= batchSize) {
	                  batches.push([]);
	                }
	              });

	              if (batches[batches.length - 1].length === 0) {
	                // If the last batch is empty, remove it
	                batches.pop();
	              }

	              deleteCompleted = _promise.default.resolve();
	              errors = [];
	              (0, _forEach.default)(batches).call(batches, function (batch) {
	                deleteCompleted = deleteCompleted.then(function () {
	                  return RESTController.request('POST', 'batch', {
	                    requests: (0, _map.default)(batch).call(batch, function (obj) {
	                      return {
	                        method: 'DELETE',
	                        path: getServerUrlPath() + 'classes/' + obj.className + '/' + obj._getId(),
	                        body: {}
	                      };
	                    })
	                  }, options).then(function (results) {
	                    for (var i = 0; i < results.length; i++) {
	                      if (results[i] && results[i].hasOwnProperty('error')) {
	                        var err = new _ParseError.default(results[i].error.code, results[i].error.error);
	                        err.object = batch[i];
	                        errors.push(err);
	                      }
	                    }
	                  });
	                });
	              });
	              return _context13.abrupt("return", deleteCompleted.then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {
	                var aggregate, _iterator3, _step3, object;

	                return _regenerator.default.wrap(function (_context11) {
	                  while (1) {
	                    switch (_context11.prev = _context11.next) {
	                      case 0:
	                        if (!errors.length) {
	                          _context11.next = 4;
	                          break;
	                        }

	                        aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);
	                        aggregate.errors = errors;
	                        return _context11.abrupt("return", _promise.default.reject(aggregate));

	                      case 4:
	                        _iterator3 = _createForOfIteratorHelper(target);
	                        _context11.prev = 5;

	                        _iterator3.s();

	                      case 7:
	                        if ((_step3 = _iterator3.n()).done) {
	                          _context11.next = 13;
	                          break;
	                        }

	                        object = _step3.value;
	                        _context11.next = 11;
	                        return localDatastore._destroyObjectIfPinned(object);

	                      case 11:
	                        _context11.next = 7;
	                        break;

	                      case 13:
	                        _context11.next = 18;
	                        break;

	                      case 15:
	                        _context11.prev = 15;
	                        _context11.t0 = _context11["catch"](5);

	                        _iterator3.e(_context11.t0);

	                      case 18:
	                        _context11.prev = 18;

	                        _iterator3.f();

	                        return _context11.finish(18);

	                      case 21:
	                        return _context11.abrupt("return", _promise.default.resolve(target));

	                      case 22:
	                      case "end":
	                        return _context11.stop();
	                    }
	                  }
	                }, _callee8, null, [[5, 15, 18, 21]]);
	              }))));

	            case 15:
	              if (!(target instanceof ParseObject)) {
	                _context13.next = 17;
	                break;
	              }

	              return _context13.abrupt("return", RESTController.request('DELETE', 'classes/' + target.className + '/' + target._getId(), {}, options).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {
	                return _regenerator.default.wrap(function (_context12) {
	                  while (1) {
	                    switch (_context12.prev = _context12.next) {
	                      case 0:
	                        _context12.next = 2;
	                        return localDatastore._destroyObjectIfPinned(target);

	                      case 2:
	                        return _context12.abrupt("return", _promise.default.resolve(target));

	                      case 3:
	                      case "end":
	                        return _context12.stop();
	                    }
	                  }
	                }, _callee9);
	              }))));

	            case 17:
	              return _context13.abrupt("return", _promise.default.resolve(target));

	            case 18:
	            case "end":
	              return _context13.stop();
	          }
	        }
	      }, _callee10);
	    }))();
	  },
	  save: function (target
	  /*: ParseObject | Array<ParseObject | ParseFile>*/
	  , options
	  /*: RequestOptions*/
	  ) {
	    var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');

	    var localDatastore = _CoreManager.default.getLocalDatastore();

	    var mapIdForPin = {};

	    var RESTController = _CoreManager.default.getRESTController();

	    var stateController = _CoreManager.default.getObjectStateController();

	    var allowCustomObjectId = _CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID');

	    options = options || {};
	    options.returnStatus = options.returnStatus || true;

	    if ((0, _isArray.default)(target)) {
	      if (target.length < 1) {
	        return _promise.default.resolve([]);
	      }

	      var unsaved = (0, _concat.default)(target).call(target);

	      for (var i = 0; i < target.length; i++) {
	        if (target[i] instanceof ParseObject) {
	          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));
	        }
	      }

	      unsaved = (0, _unique.default)(unsaved);
	      var filesSaved
	      /*: Array<ParseFile>*/
	      = [];
	      var pending
	      /*: Array<ParseObject>*/
	      = [];
	      (0, _forEach.default)(unsaved).call(unsaved, function (el) {
	        if (el instanceof _ParseFile.default) {
	          filesSaved.push(el.save(options));
	        } else if (el instanceof ParseObject) {
	          if (allowCustomObjectId && !el.id) {
	            throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty, null or undefined');
	          }

	          pending.push(el);
	        }
	      });
	      return _promise.default.all(filesSaved).then(function () {
	        var objectError = null;
	        return (0, promiseUtils.continueWhile)(function () {
	          return pending.length > 0;
	        }, function () {
	          var batch = [];
	          var nextPending = [];
	          (0, _forEach.default)(pending).call(pending, function (el) {
	            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {
	              batch.push(el);
	            } else {
	              nextPending.push(el);
	            }
	          });
	          pending = nextPending;

	          if (batch.length < 1) {
	            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));
	          } // Queue up tasks for each object in the batch.
	          // When every task is ready, the API request will execute


	          var batchReturned = new promiseUtils.resolvingPromise();
	          var batchReady = [];
	          var batchTasks = [];
	          (0, _forEach.default)(batch).call(batch, function (obj, index) {
	            var ready = new promiseUtils.resolvingPromise();
	            batchReady.push(ready);
	            stateController.pushPendingState(obj._getStateIdentifier());
	            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function () {
	              ready.resolve();
	              return batchReturned.then(function (responses) {
	                if (responses[index].hasOwnProperty('success')) {
	                  var objectId = responses[index].success.objectId;
	                  var status = responses[index]._status;
	                  delete responses[index]._status;
	                  mapIdForPin[objectId] = obj._localId;

	                  obj._handleSaveResponse(responses[index].success, status);
	                } else {
	                  if (!objectError && responses[index].hasOwnProperty('error')) {
	                    var serverError = responses[index].error;
	                    objectError = new _ParseError.default(serverError.code, serverError.error); // Cancel the rest of the save

	                    pending = [];
	                  }

	                  obj._handleSaveError();
	                }
	              });
	            }));
	          });
	          (0, promiseUtils.when)(batchReady).then(function () {
	            // Kick off the batch request
	            return RESTController.request('POST', 'batch', {
	              requests: (0, _map.default)(batch).call(batch, function (obj) {
	                var params = obj._getSaveParams();

	                params.path = getServerUrlPath() + params.path;
	                return params;
	              })
	            }, options);
	          }).then(batchReturned.resolve, function (error) {
	            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));
	          });
	          return (0, promiseUtils.when)(batchTasks);
	        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11() {
	          var _iterator4, _step4, object;

	          return _regenerator.default.wrap(function (_context14) {
	            while (1) {
	              switch (_context14.prev = _context14.next) {
	                case 0:
	                  if (!objectError) {
	                    _context14.next = 2;
	                    break;
	                  }

	                  return _context14.abrupt("return", _promise.default.reject(objectError));

	                case 2:
	                  _iterator4 = _createForOfIteratorHelper(target);
	                  _context14.prev = 3;

	                  _iterator4.s();

	                case 5:
	                  if ((_step4 = _iterator4.n()).done) {
	                    _context14.next = 13;
	                    break;
	                  }

	                  object = _step4.value;
	                  _context14.next = 9;
	                  return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);

	                case 9:
	                  _context14.next = 11;
	                  return localDatastore._updateObjectIfPinned(object);

	                case 11:
	                  _context14.next = 5;
	                  break;

	                case 13:
	                  _context14.next = 18;
	                  break;

	                case 15:
	                  _context14.prev = 15;
	                  _context14.t0 = _context14["catch"](3);

	                  _iterator4.e(_context14.t0);

	                case 18:
	                  _context14.prev = 18;

	                  _iterator4.f();

	                  return _context14.finish(18);

	                case 21:
	                  return _context14.abrupt("return", _promise.default.resolve(target));

	                case 22:
	                case "end":
	                  return _context14.stop();
	              }
	            }
	          }, _callee11, null, [[3, 15, 18, 21]]);
	        })));
	      });
	    } else if (target instanceof ParseObject) {
	      if (allowCustomObjectId && !target.id) {
	        throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty, null or undefined');
	      } // generate _localId in case if cascadeSave=false


	      target._getId();

	      var localId = target._localId; // copying target lets Flow guarantee the pointer isn't modified elsewhere

	      var targetCopy = target;

	      var task = function () {
	        var params = targetCopy._getSaveParams();

	        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {
	          var status = response._status;
	          delete response._status;

	          targetCopy._handleSaveResponse(response, status);
	        }, function (error) {
	          targetCopy._handleSaveError();

	          return _promise.default.reject(error);
	        });
	      };

	      stateController.pushPendingState(target._getStateIdentifier());
	      return stateController.enqueueTask(target._getStateIdentifier(), task).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12() {
	        return _regenerator.default.wrap(function (_context15) {
	          while (1) {
	            switch (_context15.prev = _context15.next) {
	              case 0:
	                _context15.next = 2;
	                return localDatastore._updateLocalIdForObject(localId, target);

	              case 2:
	                _context15.next = 4;
	                return localDatastore._updateObjectIfPinned(target);

	              case 4:
	                return _context15.abrupt("return", target);

	              case 5:
	              case "end":
	                return _context15.stop();
	            }
	          }
	        }, _callee12);
	      })), function (error) {
	        return _promise.default.reject(error);
	      });
	    }

	    return _promise.default.resolve();
	  }
	};

	_CoreManager.default.setObjectController(DefaultController);

	var _default = ParseObject;
	exports.default = _default;
	});

	var ParseRole_1 = createCommonjsModule(function (module, exports) {







	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _get2 = interopRequireDefault(get$8);

	var _inherits2 = interopRequireDefault(inherits);

	var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

	var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf$6);

	var _ParseACL = interopRequireDefault(ParseACL_1);

	var _ParseError = interopRequireDefault(ParseError_1);

	var _ParseObject2 = interopRequireDefault(ParseObject_1);

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();

	  return function () {
	    var Super = (0, _getPrototypeOf2.default)(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
	      result = construct$4(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return (0, _possibleConstructorReturn2.default)(this, result);
	  };
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !construct$4) return false;
	  if (construct$4.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(construct$4(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}
	/**
	 * Represents a Role on the Parse server. Roles represent groupings of
	 * Users for the purposes of granting permissions (e.g. specifying an ACL
	 * for an Object). Roles are specified by their sets of child users and
	 * child roles, all of which are granted any permissions that the parent
	 * role has.
	 *
	 * <p>Roles must have a name (which cannot be changed after creation of the
	 * role), and must specify an ACL.</p>
	 *
	 * @alias Parse.Role
	 * @augments Parse.Object
	 */


	var ParseRole = /*#__PURE__*/function (_ParseObject) {
	  (0, _inherits2.default)(ParseRole, _ParseObject);

	  var _super = _createSuper(ParseRole);
	  /**
	   * @param {string} name The name of the Role to create.
	   * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.
	   * A Parse.Role is a local representation of a role persisted to the Parse
	   * cloud.
	   */


	  function ParseRole(name
	  /*: string*/
	  , acl
	  /*: ParseACL*/
	  ) {
	    var _this;

	    (0, _classCallCheck2.default)(this, ParseRole);
	    _this = _super.call(this, '_Role');

	    if (typeof name === 'string' && acl instanceof _ParseACL.default) {
	      _this.setName(name);

	      _this.setACL(acl);
	    }

	    return _this;
	  }
	  /**
	   * Gets the name of the role.  You can alternatively call role.get("name")
	   *
	   * @returns {string} the name of the role.
	   */


	  (0, _createClass2.default)(ParseRole, [{
	    key: "getName",
	    value: function ()
	    /*: ?string*/
	    {
	      var name = this.get('name');

	      if (name == null || typeof name === 'string') {
	        return name;
	      }

	      return '';
	    }
	    /**
	     * Sets the name for a role. This value must be set before the role has
	     * been saved to the server, and cannot be set once the role has been
	     * saved.
	     *
	     * <p>
	     *   A role's name can only contain alphanumeric characters, _, -, and
	     *   spaces.
	     * </p>
	     *
	     * <p>This is equivalent to calling role.set("name", name)</p>
	     *
	     * @param {string} name The name of the role.
	     * @param {object} options Standard options object with success and error
	     *     callbacks.
	     * @returns {(ParseObject|boolean)} true if the set succeeded.
	     */

	  }, {
	    key: "setName",
	    value: function (name
	    /*: string*/
	    , options
	    /*:: ?: mixed*/
	    )
	    /*: ParseObject | boolean*/
	    {
	      return this.set('name', name, options);
	    }
	    /**
	     * Gets the Parse.Relation for the Parse.Users that are direct
	     * children of this role. These users are granted any privileges that this
	     * role has been granted (e.g. read or write access through ACLs). You can
	     * add or remove users from the role through this relation.
	     *
	     * <p>This is equivalent to calling role.relation("users")</p>
	     *
	     * @returns {Parse.Relation} the relation for the users belonging to this
	     *     role.
	     */

	  }, {
	    key: "getUsers",
	    value: function ()
	    /*: ParseRelation*/
	    {
	      return this.relation('users');
	    }
	    /**
	     * Gets the Parse.Relation for the Parse.Roles that are direct
	     * children of this role. These roles' users are granted any privileges that
	     * this role has been granted (e.g. read or write access through ACLs). You
	     * can add or remove child roles from this role through this relation.
	     *
	     * <p>This is equivalent to calling role.relation("roles")</p>
	     *
	     * @returns {Parse.Relation} the relation for the roles belonging to this
	     *     role.
	     */

	  }, {
	    key: "getRoles",
	    value: function ()
	    /*: ParseRelation*/
	    {
	      return this.relation('roles');
	    }
	  }, {
	    key: "validate",
	    value: function (attrs
	    /*: AttributeMap*/
	    , options
	    /*:: ?: mixed*/
	    )
	    /*: ParseError | boolean*/
	    {
	      var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole.prototype), "validate", this).call(this, attrs, options);

	      if (isInvalid) {
	        return isInvalid;
	      }

	      if ('name' in attrs && attrs.name !== this.getName()) {
	        var newName = attrs.name;

	        if (this.id && this.id !== attrs.objectId) {
	          // Check to see if the objectId being set matches this.id
	          // This happens during a fetch -- the id is set before calling fetch
	          // Let the name be set in this case
	          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "A role's name can only be set before it has been saved.");
	        }

	        if (typeof newName !== 'string') {
	          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "A role's name must be a String.");
	        }

	        if (!/^[0-9a-zA-Z\-_ ]+$/.test(newName)) {
	          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "A role's name can be only contain alphanumeric characters, _, " + '-, and spaces.');
	        }
	      }

	      return false;
	    }
	  }]);
	  return ParseRole;
	}(_ParseObject2.default);

	_ParseObject2.default.registerSubclass('_Role', ParseRole);

	var _default = ParseRole;
	exports.default = _default;
	});

	var isRevocableSession_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = isRevocableSession;

	var _indexOf = interopRequireDefault(indexOf$8);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */


	function isRevocableSession(token
	/*: string*/
	)
	/*: boolean*/
	{
	  return (0, _indexOf.default)(token).call(token, 'r:') > -1;
	}
	});

	var ParseSession_1 = createCommonjsModule(function (module, exports) {







	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _promise = interopRequireDefault(promise$3);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _inherits2 = interopRequireDefault(inherits);

	var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

	var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf$6);

	var _CoreManager = interopRequireDefault(CoreManager);

	var _isRevocableSession = interopRequireDefault(isRevocableSession_1);

	var _ParseObject2 = interopRequireDefault(ParseObject_1);

	var _ParseUser = interopRequireDefault(ParseUser_1);

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();

	  return function () {
	    var Super = (0, _getPrototypeOf2.default)(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
	      result = construct$4(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return (0, _possibleConstructorReturn2.default)(this, result);
	  };
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !construct$4) return false;
	  if (construct$4.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(construct$4(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}
	/**
	 * <p>A Parse.Session object is a local representation of a revocable session.
	 * This class is a subclass of a Parse.Object, and retains the same
	 * functionality of a Parse.Object.</p>
	 *
	 * @alias Parse.Session
	 * @augments Parse.Object
	 */


	var ParseSession = /*#__PURE__*/function (_ParseObject) {
	  (0, _inherits2.default)(ParseSession, _ParseObject);

	  var _super = _createSuper(ParseSession);
	  /**
	   * @param {object} attributes The initial set of data to store in the user.
	   */


	  function ParseSession(attributes
	  /*: ?AttributeMap*/
	  ) {
	    var _this;

	    (0, _classCallCheck2.default)(this, ParseSession);
	    _this = _super.call(this, '_Session');

	    if (attributes && (0, _typeof2.default)(attributes) === 'object') {
	      if (!_this.set(attributes || {})) {
	        throw new Error("Can't create an invalid Session");
	      }
	    }

	    return _this;
	  }
	  /**
	   * Returns the session token string.
	   *
	   * @returns {string}
	   */


	  (0, _createClass2.default)(ParseSession, [{
	    key: "getSessionToken",
	    value: function ()
	    /*: string*/
	    {
	      var token = this.get('sessionToken');

	      if (typeof token === 'string') {
	        return token;
	      }

	      return '';
	    }
	  }], [{
	    key: "readOnlyAttributes",
	    value: function () {
	      return ['createdWith', 'expiresAt', 'installationId', 'restricted', 'sessionToken', 'user'];
	    }
	    /**
	     * Retrieves the Session object for the currently logged in session.
	     *
	     * @param {object} options useMasterKey
	     * @static
	     * @returns {Promise} A promise that is resolved with the Parse.Session
	     * object after it has been fetched. If there is no current user, the
	     * promise will be rejected.
	     */

	  }, {
	    key: "current",
	    value: function (options
	    /*: FullOptions*/
	    ) {
	      options = options || {};

	      var controller = _CoreManager.default.getSessionController();

	      var sessionOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        sessionOptions.useMasterKey = options.useMasterKey;
	      }

	      return _ParseUser.default.currentAsync().then(function (user) {
	        if (!user) {
	          return _promise.default.reject('There is no current user.');
	        }

	        sessionOptions.sessionToken = user.getSessionToken();
	        return controller.getSession(sessionOptions);
	      });
	    }
	    /**
	     * Determines whether the current session token is revocable.
	     * This method is useful for migrating Express.js or Node.js web apps to
	     * use revocable sessions. If you are migrating an app that uses the Parse
	     * SDK in the browser only, please use Parse.User.enableRevocableSession()
	     * instead, so that sessions can be automatically upgraded.
	     *
	     * @static
	     * @returns {boolean}
	     */

	  }, {
	    key: "isCurrentSessionRevocable",
	    value: function ()
	    /*: boolean*/
	    {
	      var currentUser = _ParseUser.default.current();

	      if (currentUser) {
	        return (0, _isRevocableSession.default)(currentUser.getSessionToken() || '');
	      }

	      return false;
	    }
	  }]);
	  return ParseSession;
	}(_ParseObject2.default);

	_ParseObject2.default.registerSubclass('_Session', ParseSession);

	var DefaultController = {
	  getSession: function (options
	  /*: RequestOptions*/
	  )
	  /*: Promise<ParseSession>*/
	  {
	    var RESTController = _CoreManager.default.getRESTController();

	    var session = new ParseSession();
	    return RESTController.request('GET', 'sessions/me', {}, options).then(function (sessionData) {
	      session._finishFetch(sessionData);

	      session._setExisted(true);

	      return session;
	    });
	  }
	};

	_CoreManager.default.setSessionController(DefaultController);

	var _default = ParseSession;
	exports.default = _default;
	});

	var ParseUser_1 = createCommonjsModule(function (module, exports) {







	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _stringify = interopRequireDefault(stringify$2);

	var _defineProperty = interopRequireDefault(defineProperty$3);

	var _regenerator = interopRequireDefault(regenerator);

	var _asyncToGenerator2 = interopRequireDefault(asyncToGenerator);

	var _promise = interopRequireDefault(promise$3);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _get2 = interopRequireDefault(get$8);

	var _inherits2 = interopRequireDefault(inherits);

	var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

	var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf$6);

	var _CoreManager = interopRequireDefault(CoreManager);

	var _isRevocableSession = interopRequireDefault(isRevocableSession_1);

	var _ParseError = interopRequireDefault(ParseError_1);

	var _ParseObject2 = interopRequireDefault(ParseObject_1);

	var _ParseSession = interopRequireDefault(ParseSession_1);

	var _Storage = interopRequireDefault(Storage_1);

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();

	  return function () {
	    var Super = (0, _getPrototypeOf2.default)(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
	      result = construct$4(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return (0, _possibleConstructorReturn2.default)(this, result);
	  };
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !construct$4) return false;
	  if (construct$4.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(construct$4(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	var CURRENT_USER_KEY = 'currentUser';
	var canUseCurrentUser = !_CoreManager.default.get('IS_NODE');
	var currentUserCacheMatchesDisk = false;
	var currentUserCache = null;
	var authProviders = {};
	/**
	 * <p>A Parse.User object is a local representation of a user persisted to the
	 * Parse cloud. This class is a subclass of a Parse.Object, and retains the
	 * same functionality of a Parse.Object, but also extends it with various
	 * user specific methods, like authentication, signing up, and validation of
	 * uniqueness.</p>
	 *
	 * @alias Parse.User
	 * @augments Parse.Object
	 */

	var ParseUser = /*#__PURE__*/function (_ParseObject) {
	  (0, _inherits2.default)(ParseUser, _ParseObject);

	  var _super = _createSuper(ParseUser);
	  /**
	   * @param {object} attributes The initial set of data to store in the user.
	   */


	  function ParseUser(attributes
	  /*: ?AttributeMap*/
	  ) {
	    var _this;

	    (0, _classCallCheck2.default)(this, ParseUser);
	    _this = _super.call(this, '_User');

	    if (attributes && (0, _typeof2.default)(attributes) === 'object') {
	      if (!_this.set(attributes || {})) {
	        throw new Error("Can't create an invalid Parse User");
	      }
	    }

	    return _this;
	  }
	  /**
	   * Request a revocable session token to replace the older style of token.
	   *
	   * @param {object} options
	   * @returns {Promise} A promise that is resolved when the replacement
	   *   token has been fetched.
	   */


	  (0, _createClass2.default)(ParseUser, [{
	    key: "_upgradeToRevocableSession",
	    value: function (options
	    /*: RequestOptions*/
	    )
	    /*: Promise<void>*/
	    {
	      options = options || {};
	      var upgradeOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        upgradeOptions.useMasterKey = options.useMasterKey;
	      }

	      var controller = _CoreManager.default.getUserController();

	      return controller.upgradeToRevocableSession(this, upgradeOptions);
	    }
	    /**
	     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling
	     * your users to sign up or log into your application using their existing identities.
	     * Since 2.9.0
	     *
	     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}
	     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}
	     * @param {object} options
	     * <ul>
	     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}
	     *   <li>If provider is AuthProvider, options is saveOpts
	     * </ul>
	     * @param {object} saveOpts useMasterKey / sessionToken
	     * @returns {Promise} A promise that is fulfilled with the user is linked
	     */

	  }, {
	    key: "linkWith",
	    value: function (provider
	    /*: any*/
	    , options
	    /*: { authData?: AuthData }*/
	    )
	    /*: Promise<ParseUser>*/
	    {
	      var _this2 = this;

	      var saveOpts
	      /*:: ?: FullOptions*/
	      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';
	      var authType;

	      if (typeof provider === 'string') {
	        authType = provider;

	        if (authProviders[provider]) {
	          provider = authProviders[provider];
	        } else {
	          var authProvider = {
	            restoreAuthentication: function () {
	              return true;
	            },
	            getAuthType: function () {
	              return authType;
	            }
	          };
	          authProviders[authProvider.getAuthType()] = authProvider;
	          provider = authProvider;
	        }
	      } else {
	        authType = provider.getAuthType();
	      }

	      if (options && options.hasOwnProperty('authData')) {
	        var authData = this.get('authData') || {};

	        if ((0, _typeof2.default)(authData) !== 'object') {
	          throw new Error('Invalid type: authData field should be an object');
	        }

	        authData[authType] = options.authData;

	        var controller = _CoreManager.default.getUserController();

	        return controller.linkWith(this, authData, saveOpts);
	      } else {
	        return new _promise.default(function (resolve, reject) {
	          provider.authenticate({
	            success: function (provider, result) {
	              var opts = {};
	              opts.authData = result;

	              _this2.linkWith(provider, opts, saveOpts).then(function () {
	                resolve(_this2);
	              }, function (error) {
	                reject(error);
	              });
	            },
	            error: function (provider, _error) {
	              reject(_error);
	            }
	          });
	        });
	      }
	    }
	    /**
	     * @param provider
	     * @param options
	     * @param saveOpts
	     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}
	     * @returns {Promise}
	     */

	  }, {
	    key: "_linkWith",
	    value: function (provider
	    /*: any*/
	    , options
	    /*: { authData?: AuthData }*/
	    )
	    /*: Promise<ParseUser>*/
	    {
	      var saveOpts
	      /*:: ?: FullOptions*/
	      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      return this.linkWith(provider, options, saveOpts);
	    }
	    /**
	     * Synchronizes auth data for a provider (e.g. puts the access token in the
	     * right place to be used by the Facebook SDK).
	     *
	     * @param provider
	     */

	  }, {
	    key: "_synchronizeAuthData",
	    value: function (provider
	    /*: string*/
	    ) {
	      if (!this.isCurrent() || !provider) {
	        return;
	      }

	      var authType;

	      if (typeof provider === 'string') {
	        authType = provider;
	        provider = authProviders[authType];
	      } else {
	        authType = provider.getAuthType();
	      }

	      var authData = this.get('authData');

	      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {
	        return;
	      }

	      var success = provider.restoreAuthentication(authData[authType]);

	      if (!success) {
	        this._unlinkFrom(provider);
	      }
	    }
	    /**
	     * Synchronizes authData for all providers.
	     */

	  }, {
	    key: "_synchronizeAllAuthData",
	    value: function () {
	      var authData = this.get('authData');

	      if ((0, _typeof2.default)(authData) !== 'object') {
	        return;
	      }

	      for (var _key in authData) {
	        this._synchronizeAuthData(_key);
	      }
	    }
	    /**
	     * Removes null values from authData (which exist temporarily for unlinking)
	     */

	  }, {
	    key: "_cleanupAuthData",
	    value: function () {
	      if (!this.isCurrent()) {
	        return;
	      }

	      var authData = this.get('authData');

	      if ((0, _typeof2.default)(authData) !== 'object') {
	        return;
	      }

	      for (var _key2 in authData) {
	        if (!authData[_key2]) {
	          delete authData[_key2];
	        }
	      }
	    }
	    /**
	     * Unlinks a user from a service.
	     *
	     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}
	     * @param {object} options MasterKey / SessionToken
	     * @returns {Promise} A promise that is fulfilled when the unlinking
	     *     finishes.
	     */

	  }, {
	    key: "_unlinkFrom",
	    value: function (provider
	    /*: any*/
	    , options
	    /*:: ?: FullOptions*/
	    )
	    /*: Promise<ParseUser>*/
	    {
	      var _this3 = this;

	      return this.linkWith(provider, {
	        authData: null
	      }, options).then(function () {
	        _this3._synchronizeAuthData(provider);

	        return _promise.default.resolve(_this3);
	      });
	    }
	    /**
	     * Checks whether a user is linked to a service.
	     *
	     * @param {object} provider service to link to
	     * @returns {boolean} true if link was successful
	     */

	  }, {
	    key: "_isLinked",
	    value: function (provider
	    /*: any*/
	    )
	    /*: boolean*/
	    {
	      var authType;

	      if (typeof provider === 'string') {
	        authType = provider;
	      } else {
	        authType = provider.getAuthType();
	      }

	      var authData = this.get('authData') || {};

	      if ((0, _typeof2.default)(authData) !== 'object') {
	        return false;
	      }

	      return !!authData[authType];
	    }
	    /**
	     * Deauthenticates all providers.
	     */

	  }, {
	    key: "_logOutWithAll",
	    value: function () {
	      var authData = this.get('authData');

	      if ((0, _typeof2.default)(authData) !== 'object') {
	        return;
	      }

	      for (var _key3 in authData) {
	        this._logOutWith(_key3);
	      }
	    }
	    /**
	     * Deauthenticates a single provider (e.g. removing access tokens from the
	     * Facebook SDK).
	     *
	     * @param {object} provider service to logout of
	     */

	  }, {
	    key: "_logOutWith",
	    value: function (provider
	    /*: any*/
	    ) {
	      if (!this.isCurrent()) {
	        return;
	      }

	      if (typeof provider === 'string') {
	        provider = authProviders[provider];
	      }

	      if (provider && provider.deauthenticate) {
	        provider.deauthenticate();
	      }
	    }
	    /**
	     * Class instance method used to maintain specific keys when a fetch occurs.
	     * Used to ensure that the session token is not lost.
	     *
	     * @returns {object} sessionToken
	     */

	  }, {
	    key: "_preserveFieldsOnFetch",
	    value: function ()
	    /*: AttributeMap*/
	    {
	      return {
	        sessionToken: this.get('sessionToken')
	      };
	    }
	    /**
	     * Returns true if <code>current</code> would return this user.
	     *
	     * @returns {boolean} true if user is cached on disk
	     */

	  }, {
	    key: "isCurrent",
	    value: function ()
	    /*: boolean*/
	    {
	      var current = ParseUser.current();
	      return !!current && current.id === this.id;
	    }
	    /**
	     * Returns true if <code>current</code> would return this user.
	     *
	     * @returns {Promise<boolean>} true if user is cached on disk
	     */

	  }, {
	    key: "isCurrentAsync",
	    value: function () {
	      var _isCurrentAsync = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
	        var current;
	        return _regenerator.default.wrap(function (_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return ParseUser.currentAsync();

	              case 2:
	                current = _context.sent;
	                return _context.abrupt("return", !!current && current.id === this.id);

	              case 4:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      return function () {
	        return _isCurrentAsync.apply(this, arguments);
	      };
	    }()
	    /**
	     * Returns get("username").
	     *
	     * @returns {string}
	     */

	  }, {
	    key: "getUsername",
	    value: function ()
	    /*: ?string*/
	    {
	      var username = this.get('username');

	      if (username == null || typeof username === 'string') {
	        return username;
	      }

	      return '';
	    }
	    /**
	     * Calls set("username", username, options) and returns the result.
	     *
	     * @param {string} username
	     */

	  }, {
	    key: "setUsername",
	    value: function (username
	    /*: string*/
	    ) {
	      // Strip anonymity
	      var authData = this.get('authData');

	      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {
	        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.
	        authData.anonymous = null;
	      }

	      this.set('username', username);
	    }
	    /**
	     * Calls set("password", password, options) and returns the result.
	     *
	     * @param {string} password User's Password
	     */

	  }, {
	    key: "setPassword",
	    value: function (password
	    /*: string*/
	    ) {
	      this.set('password', password);
	    }
	    /**
	     * Returns get("email").
	     *
	     * @returns {string} User's Email
	     */

	  }, {
	    key: "getEmail",
	    value: function ()
	    /*: ?string*/
	    {
	      var email = this.get('email');

	      if (email == null || typeof email === 'string') {
	        return email;
	      }

	      return '';
	    }
	    /**
	     * Calls set("email", email) and returns the result.
	     *
	     * @param {string} email
	     * @returns {boolean}
	     */

	  }, {
	    key: "setEmail",
	    value: function (email
	    /*: string*/
	    ) {
	      return this.set('email', email);
	    }
	    /**
	     * Returns the session token for this user, if the user has been logged in,
	     * or if it is the result of a query with the master key. Otherwise, returns
	     * undefined.
	     *
	     * @returns {string} the session token, or undefined
	     */

	  }, {
	    key: "getSessionToken",
	    value: function ()
	    /*: ?string*/
	    {
	      var token = this.get('sessionToken');

	      if (token == null || typeof token === 'string') {
	        return token;
	      }

	      return '';
	    }
	    /**
	     * Checks whether this user is the current user and has been authenticated.
	     *
	     * @returns {boolean} whether this user is the current user and is logged in.
	     */

	  }, {
	    key: "authenticated",
	    value: function ()
	    /*: boolean*/
	    {
	      var current = ParseUser.current();
	      return !!this.get('sessionToken') && !!current && current.id === this.id;
	    }
	    /**
	     * Signs up a new user. You should call this instead of save for
	     * new Parse.Users. This will create a new Parse.User on the server, and
	     * also persist the session on disk so that you can access the user using
	     * <code>current</code>.
	     *
	     * <p>A username and password must be set before calling signUp.</p>
	     *
	     * @param {object} attrs Extra fields to set on the new user, or null.
	     * @param {object} options
	     * @returns {Promise} A promise that is fulfilled when the signup
	     *     finishes.
	     */

	  }, {
	    key: "signUp",
	    value: function (attrs
	    /*: AttributeMap*/
	    , options
	    /*:: ?: FullOptions*/
	    )
	    /*: Promise<ParseUser>*/
	    {
	      options = options || {};
	      var signupOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        signupOptions.useMasterKey = options.useMasterKey;
	      }

	      if (options.hasOwnProperty('installationId')) {
	        signupOptions.installationId = options.installationId;
	      }

	      var controller = _CoreManager.default.getUserController();

	      return controller.signUp(this, attrs, signupOptions);
	    }
	    /**
	     * Logs in a Parse.User. On success, this saves the session to disk,
	     * so you can retrieve the currently logged in user using
	     * <code>current</code>.
	     *
	     * <p>A username and password must be set before calling logIn.</p>
	     *
	     * @param {object} options
	     * @returns {Promise} A promise that is fulfilled with the user when
	     *     the login is complete.
	     */

	  }, {
	    key: "logIn",
	    value: function (options
	    /*:: ?: FullOptions*/
	    )
	    /*: Promise<ParseUser>*/
	    {
	      options = options || {};
	      var loginOptions = {
	        usePost: true
	      };

	      if (options.hasOwnProperty('useMasterKey')) {
	        loginOptions.useMasterKey = options.useMasterKey;
	      }

	      if (options.hasOwnProperty('installationId')) {
	        loginOptions.installationId = options.installationId;
	      }

	      if (options.hasOwnProperty('usePost')) {
	        loginOptions.usePost = options.usePost;
	      }

	      var controller = _CoreManager.default.getUserController();

	      return controller.logIn(this, loginOptions);
	    }
	    /**
	     * Wrap the default save behavior with functionality to save to local
	     * storage if this is current user.
	     *
	     * @param {...any} args
	     * @returns {Promise}
	     */

	  }, {
	    key: "save",
	    value: function () {
	      var _save = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
	        var _len,
	            args,
	            _key4,
	            current,
	            _args2 = arguments;

	        return _regenerator.default.wrap(function (_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                for (_len = _args2.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {
	                  args[_key4] = _args2[_key4];
	                }

	                _context2.next = 3;
	                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), "save", this).apply(this, args);

	              case 3:
	                _context2.next = 5;
	                return this.isCurrentAsync();

	              case 5:
	                current = _context2.sent;

	                if (!current) {
	                  _context2.next = 8;
	                  break;
	                }

	                return _context2.abrupt("return", _CoreManager.default.getUserController().updateUserOnDisk(this));

	              case 8:
	                return _context2.abrupt("return", this);

	              case 9:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      return function () {
	        return _save.apply(this, arguments);
	      };
	    }()
	    /**
	     * Wrap the default destroy behavior with functionality that logs out
	     * the current user when it is destroyed
	     *
	     * @param {...any} args
	     * @returns {Parse.User}
	     */

	  }, {
	    key: "destroy",
	    value: function () {
	      var _destroy = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
	        var _len2,
	            args,
	            _key5,
	            current,
	            _args3 = arguments;

	        return _regenerator.default.wrap(function (_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                for (_len2 = _args3.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {
	                  args[_key5] = _args3[_key5];
	                }

	                _context3.next = 3;
	                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), "destroy", this).apply(this, args);

	              case 3:
	                _context3.next = 5;
	                return this.isCurrentAsync();

	              case 5:
	                current = _context3.sent;

	                if (!current) {
	                  _context3.next = 8;
	                  break;
	                }

	                return _context3.abrupt("return", _CoreManager.default.getUserController().removeUserFromDisk());

	              case 8:
	                return _context3.abrupt("return", this);

	              case 9:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      return function () {
	        return _destroy.apply(this, arguments);
	      };
	    }()
	    /**
	     * Wrap the default fetch behavior with functionality to save to local
	     * storage if this is current user.
	     *
	     * @param {...any} args
	     * @returns {Parse.User}
	     */

	  }, {
	    key: "fetch",
	    value: function () {
	      var _fetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
	        var _len3,
	            args,
	            _key6,
	            current,
	            _args4 = arguments;

	        return _regenerator.default.wrap(function (_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                for (_len3 = _args4.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {
	                  args[_key6] = _args4[_key6];
	                }

	                _context4.next = 3;
	                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), "fetch", this).apply(this, args);

	              case 3:
	                _context4.next = 5;
	                return this.isCurrentAsync();

	              case 5:
	                current = _context4.sent;

	                if (!current) {
	                  _context4.next = 8;
	                  break;
	                }

	                return _context4.abrupt("return", _CoreManager.default.getUserController().updateUserOnDisk(this));

	              case 8:
	                return _context4.abrupt("return", this);

	              case 9:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      return function () {
	        return _fetch.apply(this, arguments);
	      };
	    }()
	    /**
	     * Wrap the default fetchWithInclude behavior with functionality to save to local
	     * storage if this is current user.
	     *
	     * @param {...any} args
	     * @returns {Parse.User}
	     */

	  }, {
	    key: "fetchWithInclude",
	    value: function () {
	      var _fetchWithInclude = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {
	        var _len4,
	            args,
	            _key7,
	            current,
	            _args5 = arguments;

	        return _regenerator.default.wrap(function (_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                for (_len4 = _args5.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {
	                  args[_key7] = _args5[_key7];
	                }

	                _context5.next = 3;
	                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), "fetchWithInclude", this).apply(this, args);

	              case 3:
	                _context5.next = 5;
	                return this.isCurrentAsync();

	              case 5:
	                current = _context5.sent;

	                if (!current) {
	                  _context5.next = 8;
	                  break;
	                }

	                return _context5.abrupt("return", _CoreManager.default.getUserController().updateUserOnDisk(this));

	              case 8:
	                return _context5.abrupt("return", this);

	              case 9:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));

	      return function () {
	        return _fetchWithInclude.apply(this, arguments);
	      };
	    }()
	    /**
	     * Verify whether a given password is the password of the current user.
	     *
	     * @param {string} password A password to be verified
	     * @param {object} options
	     * @returns {Promise} A promise that is fulfilled with a user
	     *  when the password is correct.
	     */

	  }, {
	    key: "verifyPassword",
	    value: function (password
	    /*: string*/
	    , options
	    /*:: ?: RequestOptions*/
	    )
	    /*: Promise<ParseUser>*/
	    {
	      var username = this.getUsername() || '';
	      return ParseUser.verifyPassword(username, password, options);
	    }
	  }], [{
	    key: "readOnlyAttributes",
	    value: function () {
	      return ['sessionToken'];
	    }
	    /**
	     * Adds functionality to the existing Parse.User class.
	     *
	     * @param {object} protoProps A set of properties to add to the prototype
	     * @param {object} classProps A set of static properties to add to the class
	     * @static
	     * @returns {Parse.User} The newly extended Parse.User class
	     */

	  }, {
	    key: "extend",
	    value: function (protoProps
	    /*: { [prop: string]: any }*/
	    , classProps
	    /*: { [prop: string]: any }*/
	    ) {
	      if (protoProps) {
	        for (var _prop in protoProps) {
	          if (_prop !== 'className') {
	            (0, _defineProperty.default)(ParseUser.prototype, _prop, {
	              value: protoProps[_prop],
	              enumerable: false,
	              writable: true,
	              configurable: true
	            });
	          }
	        }
	      }

	      if (classProps) {
	        for (var _prop2 in classProps) {
	          if (_prop2 !== 'className') {
	            (0, _defineProperty.default)(ParseUser, _prop2, {
	              value: classProps[_prop2],
	              enumerable: false,
	              writable: true,
	              configurable: true
	            });
	          }
	        }
	      }

	      return ParseUser;
	    }
	    /**
	     * Retrieves the currently logged in ParseUser with a valid session,
	     * either from memory or localStorage, if necessary.
	     *
	     * @static
	     * @returns {Parse.Object} The currently logged in Parse.User.
	     */

	  }, {
	    key: "current",
	    value: function ()
	    /*: ?ParseUser*/
	    {
	      if (!canUseCurrentUser) {
	        return null;
	      }

	      var controller = _CoreManager.default.getUserController();

	      return controller.currentUser();
	    }
	    /**
	     * Retrieves the currently logged in ParseUser from asynchronous Storage.
	     *
	     * @static
	     * @returns {Promise} A Promise that is resolved with the currently
	     *   logged in Parse User
	     */

	  }, {
	    key: "currentAsync",
	    value: function ()
	    /*: Promise<?ParseUser>*/
	    {
	      if (!canUseCurrentUser) {
	        return _promise.default.resolve(null);
	      }

	      var controller = _CoreManager.default.getUserController();

	      return controller.currentUserAsync();
	    }
	    /**
	     * Signs up a new user with a username (or email) and password.
	     * This will create a new Parse.User on the server, and also persist the
	     * session in localStorage so that you can access the user using
	     * {@link #current}.
	     *
	     * @param {string} username The username (or email) to sign up with.
	     * @param {string} password The password to sign up with.
	     * @param {object} attrs Extra fields to set on the new user.
	     * @param {object} options
	     * @static
	     * @returns {Promise} A promise that is fulfilled with the user when
	     *     the signup completes.
	     */

	  }, {
	    key: "signUp",
	    value: function (username
	    /*: string*/
	    , password
	    /*: string*/
	    , attrs
	    /*: AttributeMap*/
	    , options
	    /*:: ?: FullOptions*/
	    ) {
	      attrs = attrs || {};
	      attrs.username = username;
	      attrs.password = password;
	      var user = new this(attrs);
	      return user.signUp({}, options);
	    }
	    /**
	     * Logs in a user with a username (or email) and password. On success, this
	     * saves the session to disk, so you can retrieve the currently logged in
	     * user using <code>current</code>.
	     *
	     * @param {string} username The username (or email) to log in with.
	     * @param {string} password The password to log in with.
	     * @param {object} options
	     * @static
	     * @returns {Promise} A promise that is fulfilled with the user when
	     *     the login completes.
	     */

	  }, {
	    key: "logIn",
	    value: function (username
	    /*: string*/
	    , password
	    /*: string*/
	    , options
	    /*:: ?: FullOptions*/
	    ) {
	      if (typeof username !== 'string') {
	        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));
	      } else if (typeof password !== 'string') {
	        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));
	      }

	      var user = new this();

	      user._finishFetch({
	        username: username,
	        password: password
	      });

	      return user.logIn(options);
	    }
	    /**
	     * Logs in a user with a session token. On success, this saves the session
	     * to disk, so you can retrieve the currently logged in user using
	     * <code>current</code>.
	     *
	     * @param {string} sessionToken The sessionToken to log in with.
	     * @param {object} options
	     * @static
	     * @returns {Promise} A promise that is fulfilled with the user when
	     *     the login completes.
	     */

	  }, {
	    key: "become",
	    value: function (sessionToken
	    /*: string*/
	    , options
	    /*:: ?: RequestOptions*/
	    ) {
	      if (!canUseCurrentUser) {
	        throw new Error('It is not memory-safe to become a user in a server environment');
	      }

	      options = options || {};
	      var becomeOptions
	      /*: RequestOptions*/
	      = {
	        sessionToken: sessionToken
	      };

	      if (options.hasOwnProperty('useMasterKey')) {
	        becomeOptions.useMasterKey = options.useMasterKey;
	      }

	      var controller = _CoreManager.default.getUserController();

	      var user = new this();
	      return controller.become(user, becomeOptions);
	    }
	    /**
	     * Retrieves a user with a session token.
	     *
	     * @param {string} sessionToken The sessionToken to get user with.
	     * @param {object} options
	     * @static
	     * @returns {Promise} A promise that is fulfilled with the user is fetched.
	     */

	  }, {
	    key: "me",
	    value: function (sessionToken
	    /*: string*/
	    ) {
	      var options
	      /*:: ?: RequestOptions*/
	      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	      var controller = _CoreManager.default.getUserController();

	      var meOptions
	      /*: RequestOptions*/
	      = {
	        sessionToken: sessionToken
	      };

	      if (options.useMasterKey) {
	        meOptions.useMasterKey = options.useMasterKey;
	      }

	      var user = new this();
	      return controller.me(user, meOptions);
	    }
	    /**
	     * Logs in a user with a session token. On success, this saves the session
	     * to disk, so you can retrieve the currently logged in user using
	     * <code>current</code>. If there is no session token the user will not logged in.
	     *
	     * @param {object} userJSON The JSON map of the User's data
	     * @static
	     * @returns {Promise} A promise that is fulfilled with the user when
	     *     the login completes.
	     */

	  }, {
	    key: "hydrate",
	    value: function (userJSON
	    /*: AttributeMap*/
	    ) {
	      var controller = _CoreManager.default.getUserController();

	      var user = new this();
	      return controller.hydrate(user, userJSON);
	    }
	    /**
	     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}
	     *
	     * @param provider
	     * @param options
	     * @param saveOpts
	     * @static
	     * @returns {Promise}
	     */

	  }, {
	    key: "logInWith",
	    value: function (provider
	    /*: any*/
	    , options
	    /*: { authData?: AuthData }*/
	    , saveOpts
	    /*:: ?: FullOptions*/
	    )
	    /*: Promise<ParseUser>*/
	    {
	      var user = new this();
	      return user.linkWith(provider, options, saveOpts);
	    }
	    /**
	     * Logs out the currently logged in user session. This will remove the
	     * session from disk, log out of linked services, and future calls to
	     * <code>current</code> will return <code>null</code>.
	     *
	     * @param {object} options
	     * @static
	     * @returns {Promise} A promise that is resolved when the session is
	     *   destroyed on the server.
	     */

	  }, {
	    key: "logOut",
	    value: function () {
	      var options
	      /*: RequestOptions*/
	      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      var controller = _CoreManager.default.getUserController();

	      return controller.logOut(options);
	    }
	    /**
	     * Requests a password reset email to be sent to the specified email address
	     * associated with the user account. This email allows the user to securely
	     * reset their password on the Parse site.
	     *
	     * @param {string} email The email address associated with the user that
	     *     forgot their password.
	     * @param {object} options
	     * @static
	     * @returns {Promise}
	     */

	  }, {
	    key: "requestPasswordReset",
	    value: function (email
	    /*: string*/
	    , options
	    /*:: ?: RequestOptions*/
	    ) {
	      options = options || {};
	      var requestOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        requestOptions.useMasterKey = options.useMasterKey;
	      }

	      var controller = _CoreManager.default.getUserController();

	      return controller.requestPasswordReset(email, requestOptions);
	    }
	    /**
	     * Request an email verification.
	     *
	     * @param {string} email The email address associated with the user that
	     *     forgot their password.
	     * @param {object} options
	     * @static
	     * @returns {Promise}
	     */

	  }, {
	    key: "requestEmailVerification",
	    value: function (email
	    /*: string*/
	    , options
	    /*:: ?: RequestOptions*/
	    ) {
	      options = options || {};
	      var requestOptions = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        requestOptions.useMasterKey = options.useMasterKey;
	      }

	      var controller = _CoreManager.default.getUserController();

	      return controller.requestEmailVerification(email, requestOptions);
	    }
	    /**
	     * Verify whether a given password is the password of the current user.
	     *
	     * @param {string} username  A username to be used for identificaiton
	     * @param {string} password A password to be verified
	     * @param {object} options
	     * @static
	     * @returns {Promise} A promise that is fulfilled with a user
	     *  when the password is correct.
	     */

	  }, {
	    key: "verifyPassword",
	    value: function (username
	    /*: string*/
	    , password
	    /*: string*/
	    , options
	    /*:: ?: RequestOptions*/
	    ) {
	      if (typeof username !== 'string') {
	        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));
	      }

	      if (typeof password !== 'string') {
	        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));
	      }

	      options = options || {};
	      var verificationOption = {};

	      if (options.hasOwnProperty('useMasterKey')) {
	        verificationOption.useMasterKey = options.useMasterKey;
	      }

	      var controller = _CoreManager.default.getUserController();

	      return controller.verifyPassword(username, password, verificationOption);
	    }
	    /**
	     * Allow someone to define a custom User class without className
	     * being rewritten to _User. The default behavior is to rewrite
	     * User to _User for legacy reasons. This allows developers to
	     * override that behavior.
	     *
	     * @param {boolean} isAllowed Whether or not to allow custom User class
	     * @static
	     */

	  }, {
	    key: "allowCustomUserClass",
	    value: function (isAllowed
	    /*: boolean*/
	    ) {
	      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);
	    }
	    /**
	     * Allows a legacy application to start using revocable sessions. If the
	     * current session token is not revocable, a request will be made for a new,
	     * revocable session.
	     * It is not necessary to call this method from cloud code unless you are
	     * handling user signup or login from the server side. In a cloud code call,
	     * this function will not attempt to upgrade the current token.
	     *
	     * @param {object} options
	     * @static
	     * @returns {Promise} A promise that is resolved when the process has
	     *   completed. If a replacement session token is requested, the promise
	     *   will be resolved after a new token has been fetched.
	     */

	  }, {
	    key: "enableRevocableSession",
	    value: function (options
	    /*:: ?: RequestOptions*/
	    ) {
	      options = options || {};

	      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);

	      if (canUseCurrentUser) {
	        var current = ParseUser.current();

	        if (current) {
	          return current._upgradeToRevocableSession(options);
	        }
	      }

	      return _promise.default.resolve();
	    }
	    /**
	     * Enables the use of become or the current user in a server
	     * environment. These features are disabled by default, since they depend on
	     * global objects that are not memory-safe for most servers.
	     *
	     * @static
	     */

	  }, {
	    key: "enableUnsafeCurrentUser",
	    value: function () {
	      canUseCurrentUser = true;
	    }
	    /**
	     * Disables the use of become or the current user in any environment.
	     * These features are disabled on servers by default, since they depend on
	     * global objects that are not memory-safe for most servers.
	     *
	     * @static
	     */

	  }, {
	    key: "disableUnsafeCurrentUser",
	    value: function () {
	      canUseCurrentUser = false;
	    }
	    /**
	     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider
	     * is automatically created for you.
	     *
	     * For advanced authentication, you can register an Auth provider to
	     * implement custom authentication, deauthentication.
	     *
	     * @param provider
	     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}
	     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}
	     * @static
	     */

	  }, {
	    key: "_registerAuthenticationProvider",
	    value: function (provider
	    /*: any*/
	    ) {
	      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.

	      ParseUser.currentAsync().then(function (current) {
	        if (current) {
	          current._synchronizeAuthData(provider.getAuthType());
	        }
	      });
	    }
	    /**
	     * @param provider
	     * @param options
	     * @param saveOpts
	     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}
	     * @static
	     * @returns {Promise}
	     */

	  }, {
	    key: "_logInWith",
	    value: function (provider
	    /*: any*/
	    , options
	    /*: { authData?: AuthData }*/
	    , saveOpts
	    /*:: ?: FullOptions*/
	    ) {
	      var user = new this();
	      return user.linkWith(provider, options, saveOpts);
	    }
	  }, {
	    key: "_clearCache",
	    value: function () {
	      currentUserCache = null;
	      currentUserCacheMatchesDisk = false;
	    }
	  }, {
	    key: "_setCurrentUserCache",
	    value: function (user
	    /*: ParseUser*/
	    ) {
	      currentUserCache = user;
	    }
	  }]);
	  return ParseUser;
	}(_ParseObject2.default);

	_ParseObject2.default.registerSubclass('_User', ParseUser);

	var DefaultController = {
	  updateUserOnDisk: function (user) {
	    var path = _Storage.default.generatePath(CURRENT_USER_KEY);

	    var json = user.toJSON();
	    delete json.password;
	    json.className = '_User';
	    var userData = (0, _stringify.default)(json);

	    if (_CoreManager.default.get('ENCRYPTED_USER')) {
	      var crypto = _CoreManager.default.getCryptoController();

	      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));
	    }

	    return _Storage.default.setItemAsync(path, userData).then(function () {
	      return user;
	    });
	  },
	  removeUserFromDisk: function () {
	    var path = _Storage.default.generatePath(CURRENT_USER_KEY);

	    currentUserCacheMatchesDisk = true;
	    currentUserCache = null;
	    return _Storage.default.removeItemAsync(path);
	  },
	  setCurrentUser: function (user) {
	    currentUserCache = user;

	    user._cleanupAuthData();

	    user._synchronizeAllAuthData();

	    return DefaultController.updateUserOnDisk(user);
	  },
	  currentUser: function ()
	  /*: ?ParseUser*/
	  {
	    if (currentUserCache) {
	      return currentUserCache;
	    }

	    if (currentUserCacheMatchesDisk) {
	      return null;
	    }

	    if (_Storage.default.async()) {
	      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');
	    }

	    var path = _Storage.default.generatePath(CURRENT_USER_KEY);

	    var userData = _Storage.default.getItem(path);

	    currentUserCacheMatchesDisk = true;

	    if (!userData) {
	      currentUserCache = null;
	      return null;
	    }

	    if (_CoreManager.default.get('ENCRYPTED_USER')) {
	      var crypto = _CoreManager.default.getCryptoController();

	      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));
	    }

	    userData = JSON.parse(userData);

	    if (!userData.className) {
	      userData.className = '_User';
	    }

	    if (userData._id) {
	      if (userData.objectId !== userData._id) {
	        userData.objectId = userData._id;
	      }

	      delete userData._id;
	    }

	    if (userData._sessionToken) {
	      userData.sessionToken = userData._sessionToken;
	      delete userData._sessionToken;
	    }

	    var current = _ParseObject2.default.fromJSON(userData);

	    currentUserCache = current;

	    current._synchronizeAllAuthData();

	    return current;
	  },
	  currentUserAsync: function ()
	  /*: Promise<?ParseUser>*/
	  {
	    if (currentUserCache) {
	      return _promise.default.resolve(currentUserCache);
	    }

	    if (currentUserCacheMatchesDisk) {
	      return _promise.default.resolve(null);
	    }

	    var path = _Storage.default.generatePath(CURRENT_USER_KEY);

	    return _Storage.default.getItemAsync(path).then(function (userData) {
	      currentUserCacheMatchesDisk = true;

	      if (!userData) {
	        currentUserCache = null;
	        return _promise.default.resolve(null);
	      }

	      if (_CoreManager.default.get('ENCRYPTED_USER')) {
	        var crypto = _CoreManager.default.getCryptoController();

	        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));
	      }

	      userData = JSON.parse(userData);

	      if (!userData.className) {
	        userData.className = '_User';
	      }

	      if (userData._id) {
	        if (userData.objectId !== userData._id) {
	          userData.objectId = userData._id;
	        }

	        delete userData._id;
	      }

	      if (userData._sessionToken) {
	        userData.sessionToken = userData._sessionToken;
	        delete userData._sessionToken;
	      }

	      var current = _ParseObject2.default.fromJSON(userData);

	      currentUserCache = current;

	      current._synchronizeAllAuthData();

	      return _promise.default.resolve(current);
	    });
	  },
	  signUp: function (user
	  /*: ParseUser*/
	  , attrs
	  /*: AttributeMap*/
	  , options
	  /*: RequestOptions*/
	  )
	  /*: Promise<ParseUser>*/
	  {
	    var username = attrs && attrs.username || user.get('username');
	    var password = attrs && attrs.password || user.get('password');

	    if (!username || !username.length) {
	      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));
	    }

	    if (!password || !password.length) {
	      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));
	    }

	    return user.save(attrs, options).then(function () {
	      // Clear the password field
	      user._finishFetch({
	        password: undefined
	      });

	      if (canUseCurrentUser) {
	        return DefaultController.setCurrentUser(user);
	      }

	      return user;
	    });
	  },
	  logIn: function (user
	  /*: ParseUser*/
	  , options
	  /*: RequestOptions*/
	  )
	  /*: Promise<ParseUser>*/
	  {
	    var RESTController = _CoreManager.default.getRESTController();

	    var stateController = _CoreManager.default.getObjectStateController();

	    var auth = {
	      username: user.get('username'),
	      password: user.get('password')
	    };
	    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {
	      user._migrateId(response.objectId);

	      user._setExisted(true);

	      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);
	      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);
	      response.password = undefined;

	      user._finishFetch(response);

	      if (!canUseCurrentUser) {
	        // We can't set the current user, so just return the one we logged in
	        return _promise.default.resolve(user);
	      }

	      return DefaultController.setCurrentUser(user);
	    });
	  },
	  become: function (user
	  /*: ParseUser*/
	  , options
	  /*: RequestOptions*/
	  )
	  /*: Promise<ParseUser>*/
	  {
	    var RESTController = _CoreManager.default.getRESTController();

	    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {
	      user._finishFetch(response);

	      user._setExisted(true);

	      return DefaultController.setCurrentUser(user);
	    });
	  },
	  hydrate: function (user
	  /*: ParseUser*/
	  , userJSON
	  /*: AttributeMap*/
	  )
	  /*: Promise<ParseUser>*/
	  {
	    user._finishFetch(userJSON);

	    user._setExisted(true);

	    if (userJSON.sessionToken && canUseCurrentUser) {
	      return DefaultController.setCurrentUser(user);
	    } else {
	      return _promise.default.resolve(user);
	    }
	  },
	  me: function (user
	  /*: ParseUser*/
	  , options
	  /*: RequestOptions*/
	  )
	  /*: Promise<ParseUser>*/
	  {
	    var RESTController = _CoreManager.default.getRESTController();

	    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {
	      user._finishFetch(response);

	      user._setExisted(true);

	      return user;
	    });
	  },
	  logOut: function (options
	  /*: RequestOptions*/
	  )
	  /*: Promise<ParseUser>*/
	  {
	    var RESTController = _CoreManager.default.getRESTController();

	    if (options.sessionToken) {
	      return RESTController.request('POST', 'logout', {}, options);
	    }

	    return DefaultController.currentUserAsync().then(function (currentUser) {
	      var path = _Storage.default.generatePath(CURRENT_USER_KEY);

	      var promise = _Storage.default.removeItemAsync(path);

	      if (currentUser !== null) {
	        var currentSession = currentUser.getSessionToken();

	        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {
	          promise = promise.then(function () {
	            return RESTController.request('POST', 'logout', {}, {
	              sessionToken: currentSession
	            });
	          });
	        }

	        currentUser._logOutWithAll();

	        currentUser._finishFetch({
	          sessionToken: undefined
	        });
	      }

	      currentUserCacheMatchesDisk = true;
	      currentUserCache = null;
	      return promise;
	    });
	  },
	  requestPasswordReset: function (email
	  /*: string*/
	  , options
	  /*: RequestOptions*/
	  ) {
	    var RESTController = _CoreManager.default.getRESTController();

	    return RESTController.request('POST', 'requestPasswordReset', {
	      email: email
	    }, options);
	  },
	  upgradeToRevocableSession: function (user
	  /*: ParseUser*/
	  , options
	  /*: RequestOptions*/
	  ) {
	    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
	      var token, RESTController, result, session, current;
	      return _regenerator.default.wrap(function (_context6) {
	        while (1) {
	          switch (_context6.prev = _context6.next) {
	            case 0:
	              token = user.getSessionToken();

	              if (token) {
	                _context6.next = 3;
	                break;
	              }

	              return _context6.abrupt("return", _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token')));

	            case 3:
	              options.sessionToken = token;
	              RESTController = _CoreManager.default.getRESTController();
	              _context6.next = 7;
	              return RESTController.request('POST', 'upgradeToRevocableSession', {}, options);

	            case 7:
	              result = _context6.sent;
	              session = new _ParseSession.default();

	              session._finishFetch(result);

	              user._finishFetch({
	                sessionToken: session.getSessionToken()
	              });

	              _context6.next = 13;
	              return user.isCurrentAsync();

	            case 13:
	              current = _context6.sent;

	              if (!current) {
	                _context6.next = 16;
	                break;
	              }

	              return _context6.abrupt("return", DefaultController.setCurrentUser(user));

	            case 16:
	              return _context6.abrupt("return", _promise.default.resolve(user));

	            case 17:
	            case "end":
	              return _context6.stop();
	          }
	        }
	      }, _callee6);
	    }))();
	  },
	  linkWith: function (user
	  /*: ParseUser*/
	  , authData
	  /*: AuthData*/
	  , options
	  /*: FullOptions*/
	  ) {
	    return user.save({
	      authData: authData
	    }, options).then(function () {
	      if (canUseCurrentUser) {
	        return DefaultController.setCurrentUser(user);
	      }

	      return user;
	    });
	  },
	  verifyPassword: function (username
	  /*: string*/
	  , password
	  /*: string*/
	  , options
	  /*: RequestOptions*/
	  ) {
	    var RESTController = _CoreManager.default.getRESTController();

	    return RESTController.request('GET', 'verifyPassword', {
	      username: username,
	      password: password
	    }, options);
	  },
	  requestEmailVerification: function (email
	  /*: string*/
	  , options
	  /*: RequestOptions*/
	  ) {
	    var RESTController = _CoreManager.default.getRESTController();

	    return RESTController.request('POST', 'verificationEmailRequest', {
	      email: email
	    }, options);
	  }
	};

	_CoreManager.default.setUserController(DefaultController);

	var _default = ParseUser;
	exports.default = _default;
	});

	var ParseACL_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _keys = interopRequireDefault(keys$3);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _defineProperty2 = interopRequireDefault(defineProperty$b);

	var _ParseRole = interopRequireDefault(ParseRole_1);

	var _ParseUser = interopRequireDefault(ParseUser_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */


	var PUBLIC_KEY = '*';
	/**
	 * Creates a new ACL.
	 * If no argument is given, the ACL has no permissions for anyone.
	 * If the argument is a Parse.User, the ACL will have read and write
	 *   permission for only that user.
	 * If the argument is any other JSON object, that object will be interpretted
	 *   as a serialized ACL created with toJSON().
	 *
	 * <p>An ACL, or Access Control List can be added to any
	 * <code>Parse.Object</code> to restrict access to only a subset of users
	 * of your application.</p>
	 *
	 * @alias Parse.ACL
	 */

	var ParseACL = /*#__PURE__*/function () {
	  /**
	   * @param {(Parse.User | object)} arg1 The user to initialize the ACL for
	   */
	  function ParseACL(arg1
	  /*: ParseUser | ByIdMap*/
	  ) {
	    (0, _classCallCheck2.default)(this, ParseACL);
	    (0, _defineProperty2.default)(this, "permissionsById", void 0);
	    this.permissionsById = {};

	    if (arg1 && (0, _typeof2.default)(arg1) === 'object') {
	      if (arg1 instanceof _ParseUser.default) {
	        this.setReadAccess(arg1, true);
	        this.setWriteAccess(arg1, true);
	      } else {
	        for (var _userId in arg1) {
	          var accessList = arg1[_userId];
	          this.permissionsById[_userId] = {};

	          for (var _permission in accessList) {
	            var allowed = accessList[_permission];

	            if (_permission !== 'read' && _permission !== 'write') {
	              throw new TypeError('Tried to create an ACL with an invalid permission type.');
	            }

	            if (typeof allowed !== 'boolean') {
	              throw new TypeError('Tried to create an ACL with an invalid permission value.');
	            }

	            this.permissionsById[_userId][_permission] = allowed;
	          }
	        }
	      }
	    } else if (typeof arg1 === 'function') {
	      throw new TypeError('ParseACL constructed with a function. Did you forget ()?');
	    }
	  }
	  /**
	   * Returns a JSON-encoded version of the ACL.
	   *
	   * @returns {object}
	   */


	  (0, _createClass2.default)(ParseACL, [{
	    key: "toJSON",
	    value: function ()
	    /*: ByIdMap*/
	    {
	      var permissions = {};

	      for (var p in this.permissionsById) {
	        permissions[p] = this.permissionsById[p];
	      }

	      return permissions;
	    }
	    /**
	     * Returns whether this ACL is equal to another object
	     *
	     * @param {ParseACL} other The other object's ACL to compare to
	     * @returns {boolean}
	     */

	  }, {
	    key: "equals",
	    value: function (other
	    /*: ParseACL*/
	    )
	    /*: boolean*/
	    {
	      if (!(other instanceof ParseACL)) {
	        return false;
	      }

	      var users = (0, _keys.default)(this.permissionsById);
	      var otherUsers = (0, _keys.default)(other.permissionsById);

	      if (users.length !== otherUsers.length) {
	        return false;
	      }

	      for (var u in this.permissionsById) {
	        if (!other.permissionsById[u]) {
	          return false;
	        }

	        if (this.permissionsById[u].read !== other.permissionsById[u].read) {
	          return false;
	        }

	        if (this.permissionsById[u].write !== other.permissionsById[u].write) {
	          return false;
	        }
	      }

	      return true;
	    }
	  }, {
	    key: "_setAccess",
	    value: function (accessType
	    /*: string*/
	    , userId
	    /*: ParseUser | ParseRole | string*/
	    , allowed
	    /*: boolean*/
	    ) {
	      if (userId instanceof _ParseUser.default) {
	        userId = userId.id;
	      } else if (userId instanceof _ParseRole.default) {
	        var name = userId.getName();

	        if (!name) {
	          throw new TypeError('Role must have a name');
	        }

	        userId = 'role:' + name;
	      }

	      if (typeof userId !== 'string') {
	        throw new TypeError('userId must be a string.');
	      }

	      if (typeof allowed !== 'boolean') {
	        throw new TypeError('allowed must be either true or false.');
	      }

	      var permissions = this.permissionsById[userId];

	      if (!permissions) {
	        if (!allowed) {
	          // The user already doesn't have this permission, so no action is needed
	          return;
	        } else {
	          permissions = {};
	          this.permissionsById[userId] = permissions;
	        }
	      }

	      if (allowed) {
	        this.permissionsById[userId][accessType] = true;
	      } else {
	        delete permissions[accessType];

	        if ((0, _keys.default)(permissions).length === 0) {
	          delete this.permissionsById[userId];
	        }
	      }
	    }
	  }, {
	    key: "_getAccess",
	    value: function (accessType
	    /*: string*/
	    , userId
	    /*: ParseUser | ParseRole | string*/
	    )
	    /*: boolean*/
	    {
	      if (userId instanceof _ParseUser.default) {
	        userId = userId.id;

	        if (!userId) {
	          throw new Error('Cannot get access for a ParseUser without an ID');
	        }
	      } else if (userId instanceof _ParseRole.default) {
	        var name = userId.getName();

	        if (!name) {
	          throw new TypeError('Role must have a name');
	        }

	        userId = 'role:' + name;
	      }

	      var permissions = this.permissionsById[userId];

	      if (!permissions) {
	        return false;
	      }

	      return !!permissions[accessType];
	    }
	    /**
	     * Sets whether the given user is allowed to read this object.
	     *
	     * @param userId An instance of Parse.User or its objectId.
	     * @param {boolean} allowed Whether that user should have read access.
	     */

	  }, {
	    key: "setReadAccess",
	    value: function (userId
	    /*: ParseUser | ParseRole | string*/
	    , allowed
	    /*: boolean*/
	    ) {
	      this._setAccess('read', userId, allowed);
	    }
	    /**
	     * Get whether the given user id is *explicitly* allowed to read this object.
	     * Even if this returns false, the user may still be able to access it if
	     * getPublicReadAccess returns true or a role that the user belongs to has
	     * write access.
	     *
	     * @param userId An instance of Parse.User or its objectId, or a Parse.Role.
	     * @returns {boolean}
	     */

	  }, {
	    key: "getReadAccess",
	    value: function (userId
	    /*: ParseUser | ParseRole | string*/
	    )
	    /*: boolean*/
	    {
	      return this._getAccess('read', userId);
	    }
	    /**
	     * Sets whether the given user id is allowed to write this object.
	     *
	     * @param userId An instance of Parse.User or its objectId, or a Parse.Role..
	     * @param {boolean} allowed Whether that user should have write access.
	     */

	  }, {
	    key: "setWriteAccess",
	    value: function (userId
	    /*: ParseUser | ParseRole | string*/
	    , allowed
	    /*: boolean*/
	    ) {
	      this._setAccess('write', userId, allowed);
	    }
	    /**
	     * Gets whether the given user id is *explicitly* allowed to write this object.
	     * Even if this returns false, the user may still be able to write it if
	     * getPublicWriteAccess returns true or a role that the user belongs to has
	     * write access.
	     *
	     * @param userId An instance of Parse.User or its objectId, or a Parse.Role.
	     * @returns {boolean}
	     */

	  }, {
	    key: "getWriteAccess",
	    value: function (userId
	    /*: ParseUser | ParseRole | string*/
	    )
	    /*: boolean*/
	    {
	      return this._getAccess('write', userId);
	    }
	    /**
	     * Sets whether the public is allowed to read this object.
	     *
	     * @param {boolean} allowed
	     */

	  }, {
	    key: "setPublicReadAccess",
	    value: function (allowed
	    /*: boolean*/
	    ) {
	      this.setReadAccess(PUBLIC_KEY, allowed);
	    }
	    /**
	     * Gets whether the public is allowed to read this object.
	     *
	     * @returns {boolean}
	     */

	  }, {
	    key: "getPublicReadAccess",
	    value: function ()
	    /*: boolean*/
	    {
	      return this.getReadAccess(PUBLIC_KEY);
	    }
	    /**
	     * Sets whether the public is allowed to write this object.
	     *
	     * @param {boolean} allowed
	     */

	  }, {
	    key: "setPublicWriteAccess",
	    value: function (allowed
	    /*: boolean*/
	    ) {
	      this.setWriteAccess(PUBLIC_KEY, allowed);
	    }
	    /**
	     * Gets whether the public is allowed to write this object.
	     *
	     * @returns {boolean}
	     */

	  }, {
	    key: "getPublicWriteAccess",
	    value: function ()
	    /*: boolean*/
	    {
	      return this.getWriteAccess(PUBLIC_KEY);
	    }
	    /**
	     * Gets whether users belonging to the given role are allowed
	     * to read this object. Even if this returns false, the role may
	     * still be able to write it if a parent role has read access.
	     *
	     * @param role The name of the role, or a Parse.Role object.
	     * @returns {boolean} true if the role has read access. false otherwise.
	     * @throws {TypeError} If role is neither a Parse.Role nor a String.
	     */

	  }, {
	    key: "getRoleReadAccess",
	    value: function (role
	    /*: ParseRole | string*/
	    )
	    /*: boolean*/
	    {
	      if (role instanceof _ParseRole.default) {
	        // Normalize to the String name
	        role = role.getName();
	      }

	      if (typeof role !== 'string') {
	        throw new TypeError('role must be a ParseRole or a String');
	      }

	      return this.getReadAccess('role:' + role);
	    }
	    /**
	     * Gets whether users belonging to the given role are allowed
	     * to write this object. Even if this returns false, the role may
	     * still be able to write it if a parent role has write access.
	     *
	     * @param role The name of the role, or a Parse.Role object.
	     * @returns {boolean} true if the role has write access. false otherwise.
	     * @throws {TypeError} If role is neither a Parse.Role nor a String.
	     */

	  }, {
	    key: "getRoleWriteAccess",
	    value: function (role
	    /*: ParseRole | string*/
	    )
	    /*: boolean*/
	    {
	      if (role instanceof _ParseRole.default) {
	        // Normalize to the String name
	        role = role.getName();
	      }

	      if (typeof role !== 'string') {
	        throw new TypeError('role must be a ParseRole or a String');
	      }

	      return this.getWriteAccess('role:' + role);
	    }
	    /**
	     * Sets whether users belonging to the given role are allowed
	     * to read this object.
	     *
	     * @param role The name of the role, or a Parse.Role object.
	     * @param {boolean} allowed Whether the given role can read this object.
	     * @throws {TypeError} If role is neither a Parse.Role nor a String.
	     */

	  }, {
	    key: "setRoleReadAccess",
	    value: function (role
	    /*: ParseRole | string*/
	    , allowed
	    /*: boolean*/
	    ) {
	      if (role instanceof _ParseRole.default) {
	        // Normalize to the String name
	        role = role.getName();
	      }

	      if (typeof role !== 'string') {
	        throw new TypeError('role must be a ParseRole or a String');
	      }

	      this.setReadAccess('role:' + role, allowed);
	    }
	    /**
	     * Sets whether users belonging to the given role are allowed
	     * to write this object.
	     *
	     * @param role The name of the role, or a Parse.Role object.
	     * @param {boolean} allowed Whether the given role can write this object.
	     * @throws {TypeError} If role is neither a Parse.Role nor a String.
	     */

	  }, {
	    key: "setRoleWriteAccess",
	    value: function (role
	    /*: ParseRole | string*/
	    , allowed
	    /*: boolean*/
	    ) {
	      if (role instanceof _ParseRole.default) {
	        // Normalize to the String name
	        role = role.getName();
	      }

	      if (typeof role !== 'string') {
	        throw new TypeError('role must be a ParseRole or a String');
	      }

	      this.setWriteAccess('role:' + role, allowed);
	    }
	  }]);
	  return ParseACL;
	}();

	var _default = ParseACL;
	exports.default = _default;
	});

	var decode_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = decode;

	var _forEach = interopRequireDefault(forEach$4);

	var _isArray = interopRequireDefault(isArray$3);

	var _typeof2 = interopRequireDefault(_typeof_1);

	interopRequireDefault(ParseACL_1);

	var _ParseFile = interopRequireDefault(ParseFile_1);

	var _ParseGeoPoint = interopRequireDefault(ParseGeoPoint_1);

	var _ParsePolygon = interopRequireDefault(ParsePolygon_1);

	var _ParseObject = interopRequireDefault(ParseObject_1);



	var _ParseRelation = interopRequireDefault(ParseRelation_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */
	// eslint-disable-line no-unused-vars


	function decode(value
	/*: any*/
	)
	/*: any*/
	{
	  if (value === null || (0, _typeof2.default)(value) !== 'object' || value instanceof Date) {
	    return value;
	  }

	  if ((0, _isArray.default)(value)) {
	    var dup = [];
	    (0, _forEach.default)(value).call(value, function (v, i) {
	      dup[i] = decode(v);
	    });
	    return dup;
	  }

	  if (typeof value.__op === 'string') {
	    return (0, ParseOp.opFromJSON)(value);
	  }

	  if (value.__type === 'Pointer' && value.className) {
	    return _ParseObject.default.fromJSON(value);
	  }

	  if (value.__type === 'Object' && value.className) {
	    return _ParseObject.default.fromJSON(value);
	  }

	  if (value.__type === 'Relation') {
	    // The parent and key fields will be populated by the parent
	    var relation = new _ParseRelation.default(null, null);
	    relation.targetClassName = value.className;
	    return relation;
	  }

	  if (value.__type === 'Date') {
	    return new Date(value.iso);
	  }

	  if (value.__type === 'File') {
	    return _ParseFile.default.fromJSON(value);
	  }

	  if (value.__type === 'GeoPoint') {
	    return new _ParseGeoPoint.default({
	      latitude: value.latitude,
	      longitude: value.longitude
	    });
	  }

	  if (value.__type === 'Polygon') {
	    return new _ParsePolygon.default(value.coordinates);
	  }

	  var copy = {};

	  for (var k in value) {
	    copy[k] = decode(value[k]);
	  }

	  return copy;
	}
	});

	var core = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory();
		}
	}(commonjsGlobal, function () {

		/*globals window, global, require*/

		/**
		 * CryptoJS core components.
		 */
		var CryptoJS = CryptoJS || (function (Math, undefined$1) {

		    var crypto;

		    // Native crypto from window (Browser)
		    if (typeof window !== 'undefined' && window.crypto) {
		        crypto = window.crypto;
		    }

		    // Native crypto in web worker (Browser)
		    if (typeof self !== 'undefined' && self.crypto) {
		        crypto = self.crypto;
		    }

		    // Native crypto from worker
		    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
		        crypto = globalThis.crypto;
		    }

		    // Native (experimental IE 11) crypto from window (Browser)
		    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
		        crypto = window.msCrypto;
		    }

		    // Native crypto from global (NodeJS)
		    if (!crypto && typeof commonjsGlobal !== 'undefined' && commonjsGlobal.crypto) {
		        crypto = commonjsGlobal.crypto;
		    }

		    // Native crypto import via require (NodeJS)
		    if (!crypto && typeof commonjsRequire === 'function') {
		        try {
		            crypto = crypto__default['default'];
		        } catch (err) {}
		    }

		    /*
		     * Cryptographically secure pseudorandom number generator
		     *
		     * As Math.random() is cryptographically not safe to use
		     */
		    var cryptoSecureRandomInt = function () {
		        if (crypto) {
		            // Use getRandomValues method (Browser)
		            if (typeof crypto.getRandomValues === 'function') {
		                try {
		                    return crypto.getRandomValues(new Uint32Array(1))[0];
		                } catch (err) {}
		            }

		            // Use randomBytes method (NodeJS)
		            if (typeof crypto.randomBytes === 'function') {
		                try {
		                    return crypto.randomBytes(4).readInt32LE();
		                } catch (err) {}
		            }
		        }

		        throw new Error('Native crypto module could not be used to get secure random number.');
		    };

		    /*
		     * Local polyfill of Object.create

		     */
		    var create = Object.create || (function () {
		        function F() {}

		        return function (obj) {
		            var subtype;

		            F.prototype = obj;

		            subtype = new F();

		            F.prototype = null;

		            return subtype;
		        };
		    }());

		    /**
		     * CryptoJS namespace.
		     */
		    var C = {};

		    /**
		     * Library namespace.
		     */
		    var C_lib = C.lib = {};

		    /**
		     * Base object for prototypal inheritance.
		     */
		    var Base = C_lib.Base = (function () {


		        return {
		            /**
		             * Creates a new object that inherits from this object.
		             *
		             * @param {Object} overrides Properties to copy into the new object.
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         field: 'value',
		             *
		             *         method: function () {
		             *         }
		             *     });
		             */
		            extend: function (overrides) {
		                // Spawn
		                var subtype = create(this);

		                // Augment
		                if (overrides) {
		                    subtype.mixIn(overrides);
		                }

		                // Create default initializer
		                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
		                    subtype.init = function () {
		                        subtype.$super.init.apply(this, arguments);
		                    };
		                }

		                // Initializer's prototype is the subtype object
		                subtype.init.prototype = subtype;

		                // Reference supertype
		                subtype.$super = this;

		                return subtype;
		            },

		            /**
		             * Extends this object and runs the init method.
		             * Arguments to create() will be passed to init().
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var instance = MyType.create();
		             */
		            create: function () {
		                var instance = this.extend();
		                instance.init.apply(instance, arguments);

		                return instance;
		            },

		            /**
		             * Initializes a newly created object.
		             * Override this method to add some logic when your objects are created.
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         init: function () {
		             *             // ...
		             *         }
		             *     });
		             */
		            init: function () {
		            },

		            /**
		             * Copies properties into this object.
		             *
		             * @param {Object} properties The properties to mix in.
		             *
		             * @example
		             *
		             *     MyType.mixIn({
		             *         field: 'value'
		             *     });
		             */
		            mixIn: function (properties) {
		                for (var propertyName in properties) {
		                    if (properties.hasOwnProperty(propertyName)) {
		                        this[propertyName] = properties[propertyName];
		                    }
		                }

		                // IE won't copy toString using the loop above
		                if (properties.hasOwnProperty('toString')) {
		                    this.toString = properties.toString;
		                }
		            },

		            /**
		             * Creates a copy of this object.
		             *
		             * @return {Object} The clone.
		             *
		             * @example
		             *
		             *     var clone = instance.clone();
		             */
		            clone: function () {
		                return this.init.prototype.extend(this);
		            }
		        };
		    }());

		    /**
		     * An array of 32-bit words.
		     *
		     * @property {Array} words The array of 32-bit words.
		     * @property {number} sigBytes The number of significant bytes in this word array.
		     */
		    var WordArray = C_lib.WordArray = Base.extend({
		        /**
		         * Initializes a newly created word array.
		         *
		         * @param {Array} words (Optional) An array of 32-bit words.
		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.create();
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
		         */
		        init: function (words, sigBytes) {
		            words = this.words = words || [];

		            if (sigBytes != undefined$1) {
		                this.sigBytes = sigBytes;
		            } else {
		                this.sigBytes = words.length * 4;
		            }
		        },

		        /**
		         * Converts this word array to a string.
		         *
		         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
		         *
		         * @return {string} The stringified word array.
		         *
		         * @example
		         *
		         *     var string = wordArray + '';
		         *     var string = wordArray.toString();
		         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
		         */
		        toString: function (encoder) {
		            return (encoder || Hex).stringify(this);
		        },

		        /**
		         * Concatenates a word array to this word array.
		         *
		         * @param {WordArray} wordArray The word array to append.
		         *
		         * @return {WordArray} This word array.
		         *
		         * @example
		         *
		         *     wordArray1.concat(wordArray2);
		         */
		        concat: function (wordArray) {
		            // Shortcuts
		            var thisWords = this.words;
		            var thatWords = wordArray.words;
		            var thisSigBytes = this.sigBytes;
		            var thatSigBytes = wordArray.sigBytes;

		            // Clamp excess bits
		            this.clamp();

		            // Concat
		            if (thisSigBytes % 4) {
		                // Copy one byte at a time
		                for (var i = 0; i < thatSigBytes; i++) {
		                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
		                }
		            } else {
		                // Copy one word at a time
		                for (var j = 0; j < thatSigBytes; j += 4) {
		                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];
		                }
		            }
		            this.sigBytes += thatSigBytes;

		            // Chainable
		            return this;
		        },

		        /**
		         * Removes insignificant bits.
		         *
		         * @example
		         *
		         *     wordArray.clamp();
		         */
		        clamp: function () {
		            // Shortcuts
		            var words = this.words;
		            var sigBytes = this.sigBytes;

		            // Clamp
		            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
		            words.length = Math.ceil(sigBytes / 4);
		        },

		        /**
		         * Creates a copy of this word array.
		         *
		         * @return {WordArray} The clone.
		         *
		         * @example
		         *
		         *     var clone = wordArray.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);
		            clone.words = this.words.slice(0);

		            return clone;
		        },

		        /**
		         * Creates a word array filled with random bytes.
		         *
		         * @param {number} nBytes The number of random bytes to generate.
		         *
		         * @return {WordArray} The random word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.random(16);
		         */
		        random: function (nBytes) {
		            var words = [];

		            for (var i = 0; i < nBytes; i += 4) {
		                words.push(cryptoSecureRandomInt());
		            }

		            return new WordArray.init(words, nBytes);
		        }
		    });

		    /**
		     * Encoder namespace.
		     */
		    var C_enc = C.enc = {};

		    /**
		     * Hex encoding strategy.
		     */
		    var Hex = C_enc.Hex = {
		        /**
		         * Converts a word array to a hex string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The hex string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var hexChars = [];
		            for (var i = 0; i < sigBytes; i++) {
		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                hexChars.push((bite >>> 4).toString(16));
		                hexChars.push((bite & 0x0f).toString(16));
		            }

		            return hexChars.join('');
		        },

		        /**
		         * Converts a hex string to a word array.
		         *
		         * @param {string} hexStr The hex string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
		         */
		        parse: function (hexStr) {
		            // Shortcut
		            var hexStrLength = hexStr.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < hexStrLength; i += 2) {
		                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
		            }

		            return new WordArray.init(words, hexStrLength / 2);
		        }
		    };

		    /**
		     * Latin1 encoding strategy.
		     */
		    var Latin1 = C_enc.Latin1 = {
		        /**
		         * Converts a word array to a Latin1 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The Latin1 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var latin1Chars = [];
		            for (var i = 0; i < sigBytes; i++) {
		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                latin1Chars.push(String.fromCharCode(bite));
		            }

		            return latin1Chars.join('');
		        },

		        /**
		         * Converts a Latin1 string to a word array.
		         *
		         * @param {string} latin1Str The Latin1 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
		         */
		        parse: function (latin1Str) {
		            // Shortcut
		            var latin1StrLength = latin1Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < latin1StrLength; i++) {
		                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
		            }

		            return new WordArray.init(words, latin1StrLength);
		        }
		    };

		    /**
		     * UTF-8 encoding strategy.
		     */
		    var Utf8 = C_enc.Utf8 = {
		        /**
		         * Converts a word array to a UTF-8 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-8 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            try {
		                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
		            } catch (e) {
		                throw new Error('Malformed UTF-8 data');
		            }
		        },

		        /**
		         * Converts a UTF-8 string to a word array.
		         *
		         * @param {string} utf8Str The UTF-8 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
		         */
		        parse: function (utf8Str) {
		            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
		        }
		    };

		    /**
		     * Abstract buffered block algorithm template.
		     *
		     * The property blockSize must be implemented in a concrete subtype.
		     *
		     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
		     */
		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
		        /**
		         * Resets this block algorithm's data buffer to its initial state.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm.reset();
		         */
		        reset: function () {
		            // Initial values
		            this._data = new WordArray.init();
		            this._nDataBytes = 0;
		        },

		        /**
		         * Adds new data to this block algorithm's buffer.
		         *
		         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm._append('data');
		         *     bufferedBlockAlgorithm._append(wordArray);
		         */
		        _append: function (data) {
		            // Convert string to WordArray, else assume WordArray already
		            if (typeof data == 'string') {
		                data = Utf8.parse(data);
		            }

		            // Append
		            this._data.concat(data);
		            this._nDataBytes += data.sigBytes;
		        },

		        /**
		         * Processes available data blocks.
		         *
		         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
		         *
		         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
		         *
		         * @return {WordArray} The processed data.
		         *
		         * @example
		         *
		         *     var processedData = bufferedBlockAlgorithm._process();
		         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
		         */
		        _process: function (doFlush) {
		            var processedWords;

		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;
		            var dataSigBytes = data.sigBytes;
		            var blockSize = this.blockSize;
		            var blockSizeBytes = blockSize * 4;

		            // Count blocks ready
		            var nBlocksReady = dataSigBytes / blockSizeBytes;
		            if (doFlush) {
		                // Round up to include partial blocks
		                nBlocksReady = Math.ceil(nBlocksReady);
		            } else {
		                // Round down to include only full blocks,
		                // less the number of blocks that must remain in the buffer
		                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
		            }

		            // Count words ready
		            var nWordsReady = nBlocksReady * blockSize;

		            // Count bytes ready
		            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

		            // Process blocks
		            if (nWordsReady) {
		                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
		                    // Perform concrete-algorithm logic
		                    this._doProcessBlock(dataWords, offset);
		                }

		                // Remove processed words
		                processedWords = dataWords.splice(0, nWordsReady);
		                data.sigBytes -= nBytesReady;
		            }

		            // Return processed words
		            return new WordArray.init(processedWords, nBytesReady);
		        },

		        /**
		         * Creates a copy of this object.
		         *
		         * @return {Object} The clone.
		         *
		         * @example
		         *
		         *     var clone = bufferedBlockAlgorithm.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);
		            clone._data = this._data.clone();

		            return clone;
		        },

		        _minBufferSize: 0
		    });

		    /**
		     * Abstract hasher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
		     */
		    C_lib.Hasher = BufferedBlockAlgorithm.extend({
		        /**
		         * Configuration options.
		         */
		        cfg: Base.extend(),

		        /**
		         * Initializes a newly created hasher.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
		         *
		         * @example
		         *
		         *     var hasher = CryptoJS.algo.SHA256.create();
		         */
		        init: function (cfg) {
		            // Apply config defaults
		            this.cfg = this.cfg.extend(cfg);

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this hasher to its initial state.
		         *
		         * @example
		         *
		         *     hasher.reset();
		         */
		        reset: function () {
		            // Reset data buffer
		            BufferedBlockAlgorithm.reset.call(this);

		            // Perform concrete-hasher logic
		            this._doReset();
		        },

		        /**
		         * Updates this hasher with a message.
		         *
		         * @param {WordArray|string} messageUpdate The message to append.
		         *
		         * @return {Hasher} This hasher.
		         *
		         * @example
		         *
		         *     hasher.update('message');
		         *     hasher.update(wordArray);
		         */
		        update: function (messageUpdate) {
		            // Append
		            this._append(messageUpdate);

		            // Update the hash
		            this._process();

		            // Chainable
		            return this;
		        },

		        /**
		         * Finalizes the hash computation.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
		         *
		         * @return {WordArray} The hash.
		         *
		         * @example
		         *
		         *     var hash = hasher.finalize();
		         *     var hash = hasher.finalize('message');
		         *     var hash = hasher.finalize(wordArray);
		         */
		        finalize: function (messageUpdate) {
		            // Final message update
		            if (messageUpdate) {
		                this._append(messageUpdate);
		            }

		            // Perform concrete-hasher logic
		            var hash = this._doFinalize();

		            return hash;
		        },

		        blockSize: 512/32,

		        /**
		         * Creates a shortcut function to a hasher's object interface.
		         *
		         * @param {Hasher} hasher The hasher to create a helper for.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
		         */
		        _createHelper: function (hasher) {
		            return function (message, cfg) {
		                return new hasher.init(cfg).finalize(message);
		            };
		        },

		        /**
		         * Creates a shortcut function to the HMAC's object interface.
		         *
		         * @param {Hasher} hasher The hasher to use in this HMAC helper.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
		         */
		        _createHmacHelper: function (hasher) {
		            return function (message, key) {
		                return new C_algo.HMAC.init(hasher, key).finalize(message);
		            };
		        }
		    });

		    /**
		     * Algorithm namespace.
		     */
		    var C_algo = C.algo = {};

		    return C;
		}(Math));


		return CryptoJS;

	}));
	});

	var encBase64 = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_enc = C.enc;

		    /**
		     * Base64 encoding strategy.
		     */
		    C_enc.Base64 = {
		        /**
		         * Converts a word array to a Base64 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The Base64 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;
		            var map = this._map;

		            // Clamp excess bits
		            wordArray.clamp();

		            // Convert
		            var base64Chars = [];
		            for (var i = 0; i < sigBytes; i += 3) {
		                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
		                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
		                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

		                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

		                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
		                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
		                }
		            }

		            // Add padding
		            var paddingChar = map.charAt(64);
		            if (paddingChar) {
		                while (base64Chars.length % 4) {
		                    base64Chars.push(paddingChar);
		                }
		            }

		            return base64Chars.join('');
		        },

		        /**
		         * Converts a Base64 string to a word array.
		         *
		         * @param {string} base64Str The Base64 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
		         */
		        parse: function (base64Str) {
		            // Shortcuts
		            var base64StrLength = base64Str.length;
		            var map = this._map;
		            var reverseMap = this._reverseMap;

		            if (!reverseMap) {
		                    reverseMap = this._reverseMap = [];
		                    for (var j = 0; j < map.length; j++) {
		                        reverseMap[map.charCodeAt(j)] = j;
		                    }
		            }

		            // Ignore padding
		            var paddingChar = map.charAt(64);
		            if (paddingChar) {
		                var paddingIndex = base64Str.indexOf(paddingChar);
		                if (paddingIndex !== -1) {
		                    base64StrLength = paddingIndex;
		                }
		            }

		            // Convert
		            return parseLoop(base64Str, base64StrLength, reverseMap);

		        },

		        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
		    };

		    function parseLoop(base64Str, base64StrLength, reverseMap) {
		      var words = [];
		      var nBytes = 0;
		      for (var i = 0; i < base64StrLength; i++) {
		          if (i % 4) {
		              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
		              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
		              var bitsCombined = bits1 | bits2;
		              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
		              nBytes++;
		          }
		      }
		      return WordArray.create(words, nBytes);
		    }
		}());


		return CryptoJS.enc.Base64;

	}));
	});

	var md5 = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Constants table
		    var T = [];

		    // Compute constants
		    (function () {
		        for (var i = 0; i < 64; i++) {
		            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
		        }
		    }());

		    /**
		     * MD5 hash algorithm.
		     */
		    var MD5 = C_algo.MD5 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0x67452301, 0xefcdab89,
		                0x98badcfe, 0x10325476
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Swap endian
		            for (var i = 0; i < 16; i++) {
		                // Shortcuts
		                var offset_i = offset + i;
		                var M_offset_i = M[offset_i];

		                M[offset_i] = (
		                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
		                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
		                );
		            }

		            // Shortcuts
		            var H = this._hash.words;

		            var M_offset_0  = M[offset + 0];
		            var M_offset_1  = M[offset + 1];
		            var M_offset_2  = M[offset + 2];
		            var M_offset_3  = M[offset + 3];
		            var M_offset_4  = M[offset + 4];
		            var M_offset_5  = M[offset + 5];
		            var M_offset_6  = M[offset + 6];
		            var M_offset_7  = M[offset + 7];
		            var M_offset_8  = M[offset + 8];
		            var M_offset_9  = M[offset + 9];
		            var M_offset_10 = M[offset + 10];
		            var M_offset_11 = M[offset + 11];
		            var M_offset_12 = M[offset + 12];
		            var M_offset_13 = M[offset + 13];
		            var M_offset_14 = M[offset + 14];
		            var M_offset_15 = M[offset + 15];

		            // Working varialbes
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];

		            // Computation
		            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
		            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
		            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
		            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
		            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
		            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
		            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
		            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
		            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
		            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
		            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
		            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
		            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
		            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
		            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
		            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

		            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
		            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
		            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
		            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
		            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
		            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
		            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
		            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
		            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
		            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
		            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
		            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
		            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
		            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
		            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
		            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

		            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
		            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
		            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
		            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
		            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
		            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
		            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
		            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
		            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
		            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
		            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
		            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
		            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
		            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
		            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
		            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

		            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
		            d = II(d, a, b, c, M_offset_7,  10, T[49]);
		            c = II(c, d, a, b, M_offset_14, 15, T[50]);
		            b = II(b, c, d, a, M_offset_5,  21, T[51]);
		            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
		            d = II(d, a, b, c, M_offset_3,  10, T[53]);
		            c = II(c, d, a, b, M_offset_10, 15, T[54]);
		            b = II(b, c, d, a, M_offset_1,  21, T[55]);
		            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
		            d = II(d, a, b, c, M_offset_15, 10, T[57]);
		            c = II(c, d, a, b, M_offset_6,  15, T[58]);
		            b = II(b, c, d, a, M_offset_13, 21, T[59]);
		            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
		            d = II(d, a, b, c, M_offset_11, 10, T[61]);
		            c = II(c, d, a, b, M_offset_2,  15, T[62]);
		            b = II(b, c, d, a, M_offset_9,  21, T[63]);

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

		            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
		            var nBitsTotalL = nBitsTotal;
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
		                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
		            );
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
		                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
		            );

		            data.sigBytes = (dataWords.length + 1) * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var hash = this._hash;
		            var H = hash.words;

		            // Swap endian
		            for (var i = 0; i < 4; i++) {
		                // Shortcut
		                var H_i = H[i];

		                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
		                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
		            }

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    function FF(a, b, c, d, x, s, t) {
		        var n = a + ((b & c) | (~b & d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function GG(a, b, c, d, x, s, t) {
		        var n = a + ((b & d) | (c & ~d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function HH(a, b, c, d, x, s, t) {
		        var n = a + (b ^ c ^ d) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function II(a, b, c, d, x, s, t) {
		        var n = a + (c ^ (b | ~d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.MD5('message');
		     *     var hash = CryptoJS.MD5(wordArray);
		     */
		    C.MD5 = Hasher._createHelper(MD5);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacMD5(message, key);
		     */
		    C.HmacMD5 = Hasher._createHmacHelper(MD5);
		}(Math));


		return CryptoJS.MD5;

	}));
	});

	var sha1 = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Reusable object
		    var W = [];

		    /**
		     * SHA-1 hash algorithm.
		     */
		    var SHA1 = C_algo.SHA1 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0x67452301, 0xefcdab89,
		                0x98badcfe, 0x10325476,
		                0xc3d2e1f0
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var H = this._hash.words;

		            // Working variables
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];
		            var e = H[4];

		            // Computation
		            for (var i = 0; i < 80; i++) {
		                if (i < 16) {
		                    W[i] = M[offset + i] | 0;
		                } else {
		                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
		                    W[i] = (n << 1) | (n >>> 31);
		                }

		                var t = ((a << 5) | (a >>> 27)) + e + W[i];
		                if (i < 20) {
		                    t += ((b & c) | (~b & d)) + 0x5a827999;
		                } else if (i < 40) {
		                    t += (b ^ c ^ d) + 0x6ed9eba1;
		                } else if (i < 60) {
		                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
		                } else /* if (i < 80) */ {
		                    t += (b ^ c ^ d) - 0x359d3e2a;
		                }

		                e = d;
		                d = c;
		                c = (b << 30) | (b >>> 2);
		                b = a;
		                a = t;
		            }

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		            H[4] = (H[4] + e) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Return final computed hash
		            return this._hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA1('message');
		     *     var hash = CryptoJS.SHA1(wordArray);
		     */
		    C.SHA1 = Hasher._createHelper(SHA1);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA1(message, key);
		     */
		    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
		}());


		return CryptoJS.SHA1;

	}));
	});

	var hmac = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var C_enc = C.enc;
		    var Utf8 = C_enc.Utf8;
		    var C_algo = C.algo;

		    /**
		     * HMAC algorithm.
		     */
		    C_algo.HMAC = Base.extend({
		        /**
		         * Initializes a newly created HMAC.
		         *
		         * @param {Hasher} hasher The hash algorithm to use.
		         * @param {WordArray|string} key The secret key.
		         *
		         * @example
		         *
		         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
		         */
		        init: function (hasher, key) {
		            // Init hasher
		            hasher = this._hasher = new hasher.init();

		            // Convert string to WordArray, else assume WordArray already
		            if (typeof key == 'string') {
		                key = Utf8.parse(key);
		            }

		            // Shortcuts
		            var hasherBlockSize = hasher.blockSize;
		            var hasherBlockSizeBytes = hasherBlockSize * 4;

		            // Allow arbitrary length keys
		            if (key.sigBytes > hasherBlockSizeBytes) {
		                key = hasher.finalize(key);
		            }

		            // Clamp excess bits
		            key.clamp();

		            // Clone key for inner and outer pads
		            var oKey = this._oKey = key.clone();
		            var iKey = this._iKey = key.clone();

		            // Shortcuts
		            var oKeyWords = oKey.words;
		            var iKeyWords = iKey.words;

		            // XOR keys with pad constants
		            for (var i = 0; i < hasherBlockSize; i++) {
		                oKeyWords[i] ^= 0x5c5c5c5c;
		                iKeyWords[i] ^= 0x36363636;
		            }
		            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this HMAC to its initial state.
		         *
		         * @example
		         *
		         *     hmacHasher.reset();
		         */
		        reset: function () {
		            // Shortcut
		            var hasher = this._hasher;

		            // Reset
		            hasher.reset();
		            hasher.update(this._iKey);
		        },

		        /**
		         * Updates this HMAC with a message.
		         *
		         * @param {WordArray|string} messageUpdate The message to append.
		         *
		         * @return {HMAC} This HMAC instance.
		         *
		         * @example
		         *
		         *     hmacHasher.update('message');
		         *     hmacHasher.update(wordArray);
		         */
		        update: function (messageUpdate) {
		            this._hasher.update(messageUpdate);

		            // Chainable
		            return this;
		        },

		        /**
		         * Finalizes the HMAC computation.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
		         *
		         * @return {WordArray} The HMAC.
		         *
		         * @example
		         *
		         *     var hmac = hmacHasher.finalize();
		         *     var hmac = hmacHasher.finalize('message');
		         *     var hmac = hmacHasher.finalize(wordArray);
		         */
		        finalize: function (messageUpdate) {
		            // Shortcut
		            var hasher = this._hasher;

		            // Compute HMAC
		            var innerHash = hasher.finalize(messageUpdate);
		            hasher.reset();
		            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

		            return hmac;
		        }
		    });
		}());


	}));
	});

	var evpkdf = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, sha1, hmac);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var MD5 = C_algo.MD5;

		    /**
		     * This key derivation function is meant to conform with EVP_BytesToKey.
		     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
		     */
		    var EvpKDF = C_algo.EvpKDF = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
		         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
		         * @property {number} iterations The number of iterations to perform. Default: 1
		         */
		        cfg: Base.extend({
		            keySize: 128/32,
		            hasher: MD5,
		            iterations: 1
		        }),

		        /**
		         * Initializes a newly created key derivation function.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
		         *
		         * @example
		         *
		         *     var kdf = CryptoJS.algo.EvpKDF.create();
		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
		         */
		        init: function (cfg) {
		            this.cfg = this.cfg.extend(cfg);
		        },

		        /**
		         * Derives a key from a password.
		         *
		         * @param {WordArray|string} password The password.
		         * @param {WordArray|string} salt A salt.
		         *
		         * @return {WordArray} The derived key.
		         *
		         * @example
		         *
		         *     var key = kdf.compute(password, salt);
		         */
		        compute: function (password, salt) {
		            var block;

		            // Shortcut
		            var cfg = this.cfg;

		            // Init hasher
		            var hasher = cfg.hasher.create();

		            // Initial values
		            var derivedKey = WordArray.create();

		            // Shortcuts
		            var derivedKeyWords = derivedKey.words;
		            var keySize = cfg.keySize;
		            var iterations = cfg.iterations;

		            // Generate key
		            while (derivedKeyWords.length < keySize) {
		                if (block) {
		                    hasher.update(block);
		                }
		                block = hasher.update(password).finalize(salt);
		                hasher.reset();

		                // Iterations
		                for (var i = 1; i < iterations; i++) {
		                    block = hasher.finalize(block);
		                    hasher.reset();
		                }

		                derivedKey.concat(block);
		            }
		            derivedKey.sigBytes = keySize * 4;

		            return derivedKey;
		        }
		    });

		    /**
		     * Derives a key from a password.
		     *
		     * @param {WordArray|string} password The password.
		     * @param {WordArray|string} salt A salt.
		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
		     *
		     * @return {WordArray} The derived key.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var key = CryptoJS.EvpKDF(password, salt);
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
		     */
		    C.EvpKDF = function (password, salt, cfg) {
		        return EvpKDF.create(cfg).compute(password, salt);
		    };
		}());


		return CryptoJS.EvpKDF;

	}));
	});

	var cipherCore = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, evpkdf);
		}
	}(commonjsGlobal, function (CryptoJS) {

		/**
		 * Cipher core components.
		 */
		CryptoJS.lib.Cipher || (function (undefined$1) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
		    var C_enc = C.enc;
		    C_enc.Utf8;
		    var Base64 = C_enc.Base64;
		    var C_algo = C.algo;
		    var EvpKDF = C_algo.EvpKDF;

		    /**
		     * Abstract base cipher template.
		     *
		     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
		     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
		     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
		     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
		     */
		    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {WordArray} iv The IV to use for this operation.
		         */
		        cfg: Base.extend(),

		        /**
		         * Creates this cipher in encryption mode.
		         *
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {Cipher} A cipher instance.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
		         */
		        createEncryptor: function (key, cfg) {
		            return this.create(this._ENC_XFORM_MODE, key, cfg);
		        },

		        /**
		         * Creates this cipher in decryption mode.
		         *
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {Cipher} A cipher instance.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
		         */
		        createDecryptor: function (key, cfg) {
		            return this.create(this._DEC_XFORM_MODE, key, cfg);
		        },

		        /**
		         * Initializes a newly created cipher.
		         *
		         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
		         */
		        init: function (xformMode, key, cfg) {
		            // Apply config defaults
		            this.cfg = this.cfg.extend(cfg);

		            // Store transform mode and key
		            this._xformMode = xformMode;
		            this._key = key;

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this cipher to its initial state.
		         *
		         * @example
		         *
		         *     cipher.reset();
		         */
		        reset: function () {
		            // Reset data buffer
		            BufferedBlockAlgorithm.reset.call(this);

		            // Perform concrete-cipher logic
		            this._doReset();
		        },

		        /**
		         * Adds data to be encrypted or decrypted.
		         *
		         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
		         *
		         * @return {WordArray} The data after processing.
		         *
		         * @example
		         *
		         *     var encrypted = cipher.process('data');
		         *     var encrypted = cipher.process(wordArray);
		         */
		        process: function (dataUpdate) {
		            // Append
		            this._append(dataUpdate);

		            // Process available blocks
		            return this._process();
		        },

		        /**
		         * Finalizes the encryption or decryption process.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
		         *
		         * @return {WordArray} The data after final processing.
		         *
		         * @example
		         *
		         *     var encrypted = cipher.finalize();
		         *     var encrypted = cipher.finalize('data');
		         *     var encrypted = cipher.finalize(wordArray);
		         */
		        finalize: function (dataUpdate) {
		            // Final data update
		            if (dataUpdate) {
		                this._append(dataUpdate);
		            }

		            // Perform concrete-cipher logic
		            var finalProcessedData = this._doFinalize();

		            return finalProcessedData;
		        },

		        keySize: 128/32,

		        ivSize: 128/32,

		        _ENC_XFORM_MODE: 1,

		        _DEC_XFORM_MODE: 2,

		        /**
		         * Creates shortcut functions to a cipher's object interface.
		         *
		         * @param {Cipher} cipher The cipher to create a helper for.
		         *
		         * @return {Object} An object with encrypt and decrypt shortcut functions.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
		         */
		        _createHelper: (function () {
		            function selectCipherStrategy(key) {
		                if (typeof key == 'string') {
		                    return PasswordBasedCipher;
		                } else {
		                    return SerializableCipher;
		                }
		            }

		            return function (cipher) {
		                return {
		                    encrypt: function (message, key, cfg) {
		                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
		                    },

		                    decrypt: function (ciphertext, key, cfg) {
		                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
		                    }
		                };
		            };
		        }())
		    });

		    /**
		     * Abstract base stream cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
		     */
		    C_lib.StreamCipher = Cipher.extend({
		        _doFinalize: function () {
		            // Process partial blocks
		            var finalProcessedBlocks = this._process(!!'flush');

		            return finalProcessedBlocks;
		        },

		        blockSize: 1
		    });

		    /**
		     * Mode namespace.
		     */
		    var C_mode = C.mode = {};

		    /**
		     * Abstract base block cipher mode template.
		     */
		    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
		        /**
		         * Creates this mode for encryption.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
		         */
		        createEncryptor: function (cipher, iv) {
		            return this.Encryptor.create(cipher, iv);
		        },

		        /**
		         * Creates this mode for decryption.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
		         */
		        createDecryptor: function (cipher, iv) {
		            return this.Decryptor.create(cipher, iv);
		        },

		        /**
		         * Initializes a newly created mode.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
		         */
		        init: function (cipher, iv) {
		            this._cipher = cipher;
		            this._iv = iv;
		        }
		    });

		    /**
		     * Cipher Block Chaining mode.
		     */
		    var CBC = C_mode.CBC = (function () {
		        /**
		         * Abstract base CBC mode.
		         */
		        var CBC = BlockCipherMode.extend();

		        /**
		         * CBC encryptor.
		         */
		        CBC.Encryptor = CBC.extend({
		            /**
		             * Processes the data block at offset.
		             *
		             * @param {Array} words The data words to operate on.
		             * @param {number} offset The offset where the block starts.
		             *
		             * @example
		             *
		             *     mode.processBlock(data.words, offset);
		             */
		            processBlock: function (words, offset) {
		                // Shortcuts
		                var cipher = this._cipher;
		                var blockSize = cipher.blockSize;

		                // XOR and encrypt
		                xorBlock.call(this, words, offset, blockSize);
		                cipher.encryptBlock(words, offset);

		                // Remember this block to use with next block
		                this._prevBlock = words.slice(offset, offset + blockSize);
		            }
		        });

		        /**
		         * CBC decryptor.
		         */
		        CBC.Decryptor = CBC.extend({
		            /**
		             * Processes the data block at offset.
		             *
		             * @param {Array} words The data words to operate on.
		             * @param {number} offset The offset where the block starts.
		             *
		             * @example
		             *
		             *     mode.processBlock(data.words, offset);
		             */
		            processBlock: function (words, offset) {
		                // Shortcuts
		                var cipher = this._cipher;
		                var blockSize = cipher.blockSize;

		                // Remember this block to use with next block
		                var thisBlock = words.slice(offset, offset + blockSize);

		                // Decrypt and XOR
		                cipher.decryptBlock(words, offset);
		                xorBlock.call(this, words, offset, blockSize);

		                // This block becomes the previous block
		                this._prevBlock = thisBlock;
		            }
		        });

		        function xorBlock(words, offset, blockSize) {
		            var block;

		            // Shortcut
		            var iv = this._iv;

		            // Choose mixing block
		            if (iv) {
		                block = iv;

		                // Remove IV for subsequent blocks
		                this._iv = undefined$1;
		            } else {
		                block = this._prevBlock;
		            }

		            // XOR blocks
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= block[i];
		            }
		        }

		        return CBC;
		    }());

		    /**
		     * Padding namespace.
		     */
		    var C_pad = C.pad = {};

		    /**
		     * PKCS #5/7 padding strategy.
		     */
		    var Pkcs7 = C_pad.Pkcs7 = {
		        /**
		         * Pads data using the algorithm defined in PKCS #5/7.
		         *
		         * @param {WordArray} data The data to pad.
		         * @param {number} blockSize The multiple that the data should be padded to.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
		         */
		        pad: function (data, blockSize) {
		            // Shortcut
		            var blockSizeBytes = blockSize * 4;

		            // Count padding bytes
		            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

		            // Create padding word
		            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

		            // Create padding
		            var paddingWords = [];
		            for (var i = 0; i < nPaddingBytes; i += 4) {
		                paddingWords.push(paddingWord);
		            }
		            var padding = WordArray.create(paddingWords, nPaddingBytes);

		            // Add padding
		            data.concat(padding);
		        },

		        /**
		         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
		         *
		         * @param {WordArray} data The data to unpad.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
		         */
		        unpad: function (data) {
		            // Get number of padding bytes from last byte
		            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

		            // Remove padding
		            data.sigBytes -= nPaddingBytes;
		        }
		    };

		    /**
		     * Abstract base block cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
		     */
		    C_lib.BlockCipher = Cipher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {Mode} mode The block mode to use. Default: CBC
		         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
		         */
		        cfg: Cipher.cfg.extend({
		            mode: CBC,
		            padding: Pkcs7
		        }),

		        reset: function () {
		            var modeCreator;

		            // Reset cipher
		            Cipher.reset.call(this);

		            // Shortcuts
		            var cfg = this.cfg;
		            var iv = cfg.iv;
		            var mode = cfg.mode;

		            // Reset block mode
		            if (this._xformMode == this._ENC_XFORM_MODE) {
		                modeCreator = mode.createEncryptor;
		            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
		                modeCreator = mode.createDecryptor;
		                // Keep at least one block in the buffer for unpadding
		                this._minBufferSize = 1;
		            }

		            if (this._mode && this._mode.__creator == modeCreator) {
		                this._mode.init(this, iv && iv.words);
		            } else {
		                this._mode = modeCreator.call(mode, this, iv && iv.words);
		                this._mode.__creator = modeCreator;
		            }
		        },

		        _doProcessBlock: function (words, offset) {
		            this._mode.processBlock(words, offset);
		        },

		        _doFinalize: function () {
		            var finalProcessedBlocks;

		            // Shortcut
		            var padding = this.cfg.padding;

		            // Finalize
		            if (this._xformMode == this._ENC_XFORM_MODE) {
		                // Pad data
		                padding.pad(this._data, this.blockSize);

		                // Process final blocks
		                finalProcessedBlocks = this._process(!!'flush');
		            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
		                // Process final blocks
		                finalProcessedBlocks = this._process(!!'flush');

		                // Unpad data
		                padding.unpad(finalProcessedBlocks);
		            }

		            return finalProcessedBlocks;
		        },

		        blockSize: 128/32
		    });

		    /**
		     * A collection of cipher parameters.
		     *
		     * @property {WordArray} ciphertext The raw ciphertext.
		     * @property {WordArray} key The key to this ciphertext.
		     * @property {WordArray} iv The IV used in the ciphering operation.
		     * @property {WordArray} salt The salt used with a key derivation function.
		     * @property {Cipher} algorithm The cipher algorithm.
		     * @property {Mode} mode The block mode used in the ciphering operation.
		     * @property {Padding} padding The padding scheme used in the ciphering operation.
		     * @property {number} blockSize The block size of the cipher.
		     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
		     */
		    var CipherParams = C_lib.CipherParams = Base.extend({
		        /**
		         * Initializes a newly created cipher params object.
		         *
		         * @param {Object} cipherParams An object with any of the possible cipher parameters.
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.lib.CipherParams.create({
		         *         ciphertext: ciphertextWordArray,
		         *         key: keyWordArray,
		         *         iv: ivWordArray,
		         *         salt: saltWordArray,
		         *         algorithm: CryptoJS.algo.AES,
		         *         mode: CryptoJS.mode.CBC,
		         *         padding: CryptoJS.pad.PKCS7,
		         *         blockSize: 4,
		         *         formatter: CryptoJS.format.OpenSSL
		         *     });
		         */
		        init: function (cipherParams) {
		            this.mixIn(cipherParams);
		        },

		        /**
		         * Converts this cipher params object to a string.
		         *
		         * @param {Format} formatter (Optional) The formatting strategy to use.
		         *
		         * @return {string} The stringified cipher params.
		         *
		         * @throws Error If neither the formatter nor the default formatter is set.
		         *
		         * @example
		         *
		         *     var string = cipherParams + '';
		         *     var string = cipherParams.toString();
		         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
		         */
		        toString: function (formatter) {
		            return (formatter || this.formatter).stringify(this);
		        }
		    });

		    /**
		     * Format namespace.
		     */
		    var C_format = C.format = {};

		    /**
		     * OpenSSL formatting strategy.
		     */
		    var OpenSSLFormatter = C_format.OpenSSL = {
		        /**
		         * Converts a cipher params object to an OpenSSL-compatible string.
		         *
		         * @param {CipherParams} cipherParams The cipher params object.
		         *
		         * @return {string} The OpenSSL-compatible string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
		         */
		        stringify: function (cipherParams) {
		            var wordArray;

		            // Shortcuts
		            var ciphertext = cipherParams.ciphertext;
		            var salt = cipherParams.salt;

		            // Format
		            if (salt) {
		                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
		            } else {
		                wordArray = ciphertext;
		            }

		            return wordArray.toString(Base64);
		        },

		        /**
		         * Converts an OpenSSL-compatible string to a cipher params object.
		         *
		         * @param {string} openSSLStr The OpenSSL-compatible string.
		         *
		         * @return {CipherParams} The cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
		         */
		        parse: function (openSSLStr) {
		            var salt;

		            // Parse base64
		            var ciphertext = Base64.parse(openSSLStr);

		            // Shortcut
		            var ciphertextWords = ciphertext.words;

		            // Test for salt
		            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
		                // Extract salt
		                salt = WordArray.create(ciphertextWords.slice(2, 4));

		                // Remove salt from ciphertext
		                ciphertextWords.splice(0, 4);
		                ciphertext.sigBytes -= 16;
		            }

		            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
		        }
		    };

		    /**
		     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
		     */
		    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
		         */
		        cfg: Base.extend({
		            format: OpenSSLFormatter
		        }),

		        /**
		         * Encrypts a message.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {WordArray|string} message The message to encrypt.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {CipherParams} A cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         */
		        encrypt: function (cipher, message, key, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Encrypt
		            var encryptor = cipher.createEncryptor(key, cfg);
		            var ciphertext = encryptor.finalize(message);

		            // Shortcut
		            var cipherCfg = encryptor.cfg;

		            // Create and return serializable cipher params
		            return CipherParams.create({
		                ciphertext: ciphertext,
		                key: key,
		                iv: cipherCfg.iv,
		                algorithm: cipher,
		                mode: cipherCfg.mode,
		                padding: cipherCfg.padding,
		                blockSize: cipher.blockSize,
		                formatter: cfg.format
		            });
		        },

		        /**
		         * Decrypts serialized ciphertext.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {WordArray} The plaintext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         */
		        decrypt: function (cipher, ciphertext, key, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Convert string to CipherParams
		            ciphertext = this._parse(ciphertext, cfg.format);

		            // Decrypt
		            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

		            return plaintext;
		        },

		        /**
		         * Converts serialized ciphertext to CipherParams,
		         * else assumed CipherParams already and returns ciphertext unchanged.
		         *
		         * @param {CipherParams|string} ciphertext The ciphertext.
		         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
		         *
		         * @return {CipherParams} The unserialized ciphertext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
		         */
		        _parse: function (ciphertext, format) {
		            if (typeof ciphertext == 'string') {
		                return format.parse(ciphertext, this);
		            } else {
		                return ciphertext;
		            }
		        }
		    });

		    /**
		     * Key derivation function namespace.
		     */
		    var C_kdf = C.kdf = {};

		    /**
		     * OpenSSL key derivation function.
		     */
		    var OpenSSLKdf = C_kdf.OpenSSL = {
		        /**
		         * Derives a key and IV from a password.
		         *
		         * @param {string} password The password to derive from.
		         * @param {number} keySize The size in words of the key to generate.
		         * @param {number} ivSize The size in words of the IV to generate.
		         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
		         *
		         * @return {CipherParams} A cipher params object with the key, IV, and salt.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
		         */
		        execute: function (password, keySize, ivSize, salt) {
		            // Generate random salt
		            if (!salt) {
		                salt = WordArray.random(64/8);
		            }

		            // Derive key and IV
		            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

		            // Separate key and IV
		            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
		            key.sigBytes = keySize * 4;

		            // Return params
		            return CipherParams.create({ key: key, iv: iv, salt: salt });
		        }
		    };

		    /**
		     * A serializable cipher wrapper that derives the key from a password,
		     * and returns ciphertext as a serializable cipher params object.
		     */
		    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
		         */
		        cfg: SerializableCipher.cfg.extend({
		            kdf: OpenSSLKdf
		        }),

		        /**
		         * Encrypts a message using a password.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {WordArray|string} message The message to encrypt.
		         * @param {string} password The password.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {CipherParams} A cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
		         */
		        encrypt: function (cipher, message, password, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Derive key and other params
		            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

		            // Add IV to config
		            cfg.iv = derivedParams.iv;

		            // Encrypt
		            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

		            // Mix in derived params
		            ciphertext.mixIn(derivedParams);

		            return ciphertext;
		        },

		        /**
		         * Decrypts serialized ciphertext using a password.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		         * @param {string} password The password.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {WordArray} The plaintext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
		         */
		        decrypt: function (cipher, ciphertext, password, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Convert string to CipherParams
		            ciphertext = this._parse(ciphertext, cfg.format);

		            // Derive key and other params
		            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

		            // Add IV to config
		            cfg.iv = derivedParams.iv;

		            // Decrypt
		            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

		            return plaintext;
		        }
		    });
		}());


	}));
	});

	var aes = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, encBase64, md5, evpkdf, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var BlockCipher = C_lib.BlockCipher;
		    var C_algo = C.algo;

		    // Lookup tables
		    var SBOX = [];
		    var INV_SBOX = [];
		    var SUB_MIX_0 = [];
		    var SUB_MIX_1 = [];
		    var SUB_MIX_2 = [];
		    var SUB_MIX_3 = [];
		    var INV_SUB_MIX_0 = [];
		    var INV_SUB_MIX_1 = [];
		    var INV_SUB_MIX_2 = [];
		    var INV_SUB_MIX_3 = [];

		    // Compute lookup tables
		    (function () {
		        // Compute double table
		        var d = [];
		        for (var i = 0; i < 256; i++) {
		            if (i < 128) {
		                d[i] = i << 1;
		            } else {
		                d[i] = (i << 1) ^ 0x11b;
		            }
		        }

		        // Walk GF(2^8)
		        var x = 0;
		        var xi = 0;
		        for (var i = 0; i < 256; i++) {
		            // Compute sbox
		            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
		            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
		            SBOX[x] = sx;
		            INV_SBOX[sx] = x;

		            // Compute multiplication
		            var x2 = d[x];
		            var x4 = d[x2];
		            var x8 = d[x4];

		            // Compute sub bytes, mix columns tables
		            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
		            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
		            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
		            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
		            SUB_MIX_3[x] = t;

		            // Compute inv sub bytes, inv mix columns tables
		            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
		            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
		            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
		            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
		            INV_SUB_MIX_3[sx] = t;

		            // Compute next counter
		            if (!x) {
		                x = xi = 1;
		            } else {
		                x = x2 ^ d[d[d[x8 ^ x2]]];
		                xi ^= d[d[xi]];
		            }
		        }
		    }());

		    // Precomputed Rcon lookup
		    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

		    /**
		     * AES block cipher algorithm.
		     */
		    var AES = C_algo.AES = BlockCipher.extend({
		        _doReset: function () {
		            var t;

		            // Skip reset of nRounds has been set before and key did not change
		            if (this._nRounds && this._keyPriorReset === this._key) {
		                return;
		            }

		            // Shortcuts
		            var key = this._keyPriorReset = this._key;
		            var keyWords = key.words;
		            var keySize = key.sigBytes / 4;

		            // Compute number of rounds
		            var nRounds = this._nRounds = keySize + 6;

		            // Compute number of key schedule rows
		            var ksRows = (nRounds + 1) * 4;

		            // Compute key schedule
		            var keySchedule = this._keySchedule = [];
		            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
		                if (ksRow < keySize) {
		                    keySchedule[ksRow] = keyWords[ksRow];
		                } else {
		                    t = keySchedule[ksRow - 1];

		                    if (!(ksRow % keySize)) {
		                        // Rot word
		                        t = (t << 8) | (t >>> 24);

		                        // Sub word
		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

		                        // Mix Rcon
		                        t ^= RCON[(ksRow / keySize) | 0] << 24;
		                    } else if (keySize > 6 && ksRow % keySize == 4) {
		                        // Sub word
		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
		                    }

		                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
		                }
		            }

		            // Compute inv key schedule
		            var invKeySchedule = this._invKeySchedule = [];
		            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
		                var ksRow = ksRows - invKsRow;

		                if (invKsRow % 4) {
		                    var t = keySchedule[ksRow];
		                } else {
		                    var t = keySchedule[ksRow - 4];
		                }

		                if (invKsRow < 4 || ksRow <= 4) {
		                    invKeySchedule[invKsRow] = t;
		                } else {
		                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
		                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
		                }
		            }
		        },

		        encryptBlock: function (M, offset) {
		            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
		        },

		        decryptBlock: function (M, offset) {
		            // Swap 2nd and 4th rows
		            var t = M[offset + 1];
		            M[offset + 1] = M[offset + 3];
		            M[offset + 3] = t;

		            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

		            // Inv swap 2nd and 4th rows
		            var t = M[offset + 1];
		            M[offset + 1] = M[offset + 3];
		            M[offset + 3] = t;
		        },

		        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
		            // Shortcut
		            var nRounds = this._nRounds;

		            // Get input, add round key
		            var s0 = M[offset]     ^ keySchedule[0];
		            var s1 = M[offset + 1] ^ keySchedule[1];
		            var s2 = M[offset + 2] ^ keySchedule[2];
		            var s3 = M[offset + 3] ^ keySchedule[3];

		            // Key schedule row counter
		            var ksRow = 4;

		            // Rounds
		            for (var round = 1; round < nRounds; round++) {
		                // Shift rows, sub bytes, mix columns, add round key
		                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
		                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
		                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
		                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

		                // Update state
		                s0 = t0;
		                s1 = t1;
		                s2 = t2;
		                s3 = t3;
		            }

		            // Shift rows, sub bytes, add round key
		            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
		            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
		            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
		            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

		            // Set output
		            M[offset]     = t0;
		            M[offset + 1] = t1;
		            M[offset + 2] = t2;
		            M[offset + 3] = t3;
		        },

		        keySize: 256/32
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
		     */
		    C.AES = BlockCipher._createHelper(AES);
		}());


		return CryptoJS.AES;

	}));
	});

	var encUtf8 = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		return CryptoJS.enc.Utf8;

	}));
	});

	var _stringify$1 = interopRequireDefault(stringify$2);

	var AES;
	var ENC;
	AES = aes;
	ENC = encUtf8;
	var CryptoController = {
	  encrypt: function (obj
	  /*: any*/
	  , secretKey
	  /*: string*/
	  )
	  /*: ?string*/
	  {
	    var encrypted = AES.encrypt((0, _stringify$1.default)(obj), secretKey);
	    return encrypted.toString();
	  },
	  decrypt: function (encryptedText
	  /*: string*/
	  , secretKey
	  /*: string*/
	  )
	  /*: ?string*/
	  {
	    var decryptedStr = AES.decrypt(encryptedText, secretKey).toString(ENC);
	    return decryptedStr;
	  }
	};
	var CryptoController_1 = CryptoController;

	var _promise$1 = interopRequireDefault(promise$3);

	var _Storage$1 = interopRequireDefault(Storage_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */




	var iidCache = null;
	var InstallationController = {
	  currentInstallationId: function ()
	  /*: Promise<string>*/
	  {
	    if (typeof iidCache === 'string') {
	      return _promise$1.default.resolve(iidCache);
	    }

	    var path = _Storage$1.default.generatePath('installationId');

	    return _Storage$1.default.getItemAsync(path).then(function (iid) {
	      if (!iid) {
	        iid = uuid_1();
	        return _Storage$1.default.setItemAsync(path, iid).then(function () {
	          iidCache = iid;
	          return iid;
	        });
	      }

	      iidCache = iid;
	      return iid;
	    });
	  },
	  _clearCache: function () {
	    iidCache = null;
	  },
	  _setInstallationIdCache: function (iid
	  /*: string*/
	  ) {
	    iidCache = iid;
	  }
	};
	var InstallationController_1 = InstallationController;

	var setTimeout$2 = path.setTimeout;

	var setTimeout$3 = setTimeout$2;

	var _defineProperty2$1 = interopRequireDefault(defineProperty$b);

	var _typeof2$1 = interopRequireDefault(_typeof_1);

	var _setTimeout2 = interopRequireDefault(setTimeout$3);

	var _includes = interopRequireDefault(includes$4);

	var _stringify$2 = interopRequireDefault(stringify$2);

	var _promise$2 = interopRequireDefault(promise$3);

	var _CoreManager$2 = interopRequireDefault(CoreManager);

	var _ParseError = interopRequireDefault(ParseError_1);



	function ownKeys$1(object, enumerableOnly) {
	  var keys = keys$3(object);

	  if (getOwnPropertySymbols$2) {
	    var symbols = getOwnPropertySymbols$2(object);

	    enumerableOnly && (symbols = filter$3(symbols).call(symbols, function (sym) {
	      return getOwnPropertyDescriptor$3(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var _context4, _context5;

	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? forEach$4(_context4 = ownKeys$1(Object(source), !0)).call(_context4, function (key) {
	      (0, _defineProperty2$1.default)(target, key, source[key]);
	    }) : getOwnPropertyDescriptors$2 ? defineProperties$2(target, getOwnPropertyDescriptors$2(source)) : forEach$4(_context5 = ownKeys$1(Object(source))).call(_context5, function (key) {
	      defineProperty$3(target, key, getOwnPropertyDescriptor$3(source, key));
	    });
	  }

	  return target;
	}
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */

	/* global XMLHttpRequest, XDomainRequest */




	var XHR = null;

	if (typeof XMLHttpRequest !== 'undefined') {
	  XHR = XMLHttpRequest;
	}

	var useXDomainRequest = false;

	if (typeof XDomainRequest !== 'undefined' && !('withCredentials' in new XMLHttpRequest())) {
	  useXDomainRequest = true;
	}

	function ajaxIE9(method
	/*: string*/
	, url
	/*: string*/
	, data
	/*: any*/
	, headers
	/*:: ?: any*/
	, options
	/*:: ?: FullOptions*/
	) {
	  return new _promise$2.default(function (resolve, reject) {
	    var xdr = new XDomainRequest();

	    xdr.onload = function () {
	      var response;

	      try {
	        response = JSON.parse(xdr.responseText);
	      } catch (e) {
	        reject(e);
	      }

	      if (response) {
	        resolve({
	          response: response
	        });
	      }
	    };

	    xdr.onerror = xdr.ontimeout = function () {
	      // Let's fake a real error message.
	      var fakeResponse = {
	        responseText: (0, _stringify$2.default)({
	          code: _ParseError.default.X_DOMAIN_REQUEST,
	          error: "IE's XDomainRequest does not supply error info."
	        })
	      };
	      reject(fakeResponse);
	    };

	    xdr.onprogress = function () {
	      if (options && typeof options.progress === 'function') {
	        options.progress(xdr.responseText);
	      }
	    };

	    xdr.open(method, url);
	    xdr.send(data);

	    if (options && typeof options.requestTask === 'function') {
	      options.requestTask(xdr);
	    }
	  });
	}

	var RESTController = {
	  ajax: function (method
	  /*: string*/
	  , url
	  /*: string*/
	  , data
	  /*: any*/
	  , headers
	  /*:: ?: any*/
	  , options
	  /*:: ?: FullOptions*/
	  ) {
	    var _context;

	    if (useXDomainRequest) {
	      return ajaxIE9(method, url, data, headers, options);
	    }

	    var promise = (0, promiseUtils.resolvingPromise)();
	    var isIdempotent = _CoreManager$2.default.get('IDEMPOTENCY') && (0, _includes.default)(_context = ['POST', 'PUT']).call(_context, method);
	    var requestId = isIdempotent ? uuid_1() : '';
	    var attempts = 0;

	    var dispatch = function dispatch() {
	      if (XHR == null) {
	        throw new Error('Cannot make a request: No definition of XMLHttpRequest was found.');
	      }

	      var handled = false;
	      var xhr = new XHR();

	      xhr.onreadystatechange = function () {
	        if (xhr.readyState !== 4 || handled || xhr._aborted) {
	          return;
	        }

	        handled = true;

	        if (xhr.status >= 200 && xhr.status < 300) {
	          var response;

	          try {
	            response = JSON.parse(xhr.responseText);

	            if (typeof xhr.getResponseHeader === 'function') {
	              var _context2, _context3;

	              if ((0, _includes.default)(_context2 = xhr.getAllResponseHeaders() || '').call(_context2, 'x-parse-job-status-id: ')) {
	                response = xhr.getResponseHeader('x-parse-job-status-id');
	              }

	              if ((0, _includes.default)(_context3 = xhr.getAllResponseHeaders() || '').call(_context3, 'x-parse-push-status-id: ')) {
	                response = xhr.getResponseHeader('x-parse-push-status-id');
	              }
	            }
	          } catch (e) {
	            promise.reject(e.toString());
	          }

	          if (response) {
	            promise.resolve({
	              response: response,
	              status: xhr.status,
	              xhr: xhr
	            });
	          }
	        } else if (xhr.status >= 500 || xhr.status === 0) {
	          // retry on 5XX or node-xmlhttprequest error
	          if (++attempts < _CoreManager$2.default.get('REQUEST_ATTEMPT_LIMIT')) {
	            // Exponentially-growing random delay
	            var delay = Math.round(Math.random() * 125 * Math.pow(2, attempts));
	            (0, _setTimeout2.default)(dispatch, delay);
	          } else if (xhr.status === 0) {
	            promise.reject('Unable to connect to the Parse API');
	          } else {
	            // After the retry limit is reached, fail
	            promise.reject(xhr);
	          }
	        } else {
	          promise.reject(xhr);
	        }
	      };

	      headers = headers || {};

	      if (typeof headers['Content-Type'] !== 'string') {
	        headers['Content-Type'] = 'text/plain'; // Avoid pre-flight
	      }

	      if (_CoreManager$2.default.get('IS_NODE')) {
	        headers['User-Agent'] = 'Parse/' + _CoreManager$2.default.get('VERSION') + ' (NodeJS ' + process.versions.node + ')';
	      }

	      if (isIdempotent) {
	        headers['X-Parse-Request-Id'] = requestId;
	      }

	      if (_CoreManager$2.default.get('SERVER_AUTH_TYPE') && _CoreManager$2.default.get('SERVER_AUTH_TOKEN')) {
	        headers['Authorization'] = _CoreManager$2.default.get('SERVER_AUTH_TYPE') + ' ' + _CoreManager$2.default.get('SERVER_AUTH_TOKEN');
	      }

	      var customHeaders = _CoreManager$2.default.get('REQUEST_HEADERS');

	      for (var key in customHeaders) {
	        headers[key] = customHeaders[key];
	      }

	      function handleProgress(type, event) {
	        if (options && typeof options.progress === 'function') {
	          if (event.lengthComputable) {
	            options.progress(event.loaded / event.total, event.loaded, event.total, {
	              type: type
	            });
	          } else {
	            options.progress(null, null, null, {
	              type: type
	            });
	          }
	        }
	      }

	      xhr.onprogress = function (event) {
	        handleProgress('download', event);
	      };

	      if (xhr.upload) {
	        xhr.upload.onprogress = function (event) {
	          handleProgress('upload', event);
	        };
	      }

	      xhr.open(method, url, true);

	      for (var h in headers) {
	        xhr.setRequestHeader(h, headers[h]);
	      }

	      xhr.onabort = function () {
	        promise.resolve({
	          response: {
	            results: []
	          },
	          status: 0,
	          xhr: xhr
	        });
	      };

	      xhr.send(data);

	      if (options && typeof options.requestTask === 'function') {
	        options.requestTask(xhr);
	      }
	    };

	    dispatch();
	    return promise;
	  },
	  request: function (method
	  /*: string*/
	  , path
	  /*: string*/
	  , data
	  /*: mixed*/
	  , options
	  /*:: ?: RequestOptions*/
	  ) {
	    options = options || {};

	    var url = _CoreManager$2.default.get('SERVER_URL');

	    if (url[url.length - 1] !== '/') {
	      url += '/';
	    }

	    url += path;
	    var payload = {};

	    if (data && (0, _typeof2$1.default)(data) === 'object') {
	      for (var k in data) {
	        payload[k] = data[k];
	      }
	    } // Add context


	    var context = options.context;

	    if (context !== undefined) {
	      payload._context = context;
	    }

	    if (method !== 'POST') {
	      payload._method = method;
	      method = 'POST';
	    }

	    payload._ApplicationId = _CoreManager$2.default.get('APPLICATION_ID');

	    var jsKey = _CoreManager$2.default.get('JAVASCRIPT_KEY');

	    if (jsKey) {
	      payload._JavaScriptKey = jsKey;
	    }

	    payload._ClientVersion = _CoreManager$2.default.get('VERSION');
	    var useMasterKey = options.useMasterKey;

	    if (typeof useMasterKey === 'undefined') {
	      useMasterKey = _CoreManager$2.default.get('USE_MASTER_KEY');
	    }

	    if (useMasterKey) {
	      if (_CoreManager$2.default.get('MASTER_KEY')) {
	        delete payload._JavaScriptKey;
	        payload._MasterKey = _CoreManager$2.default.get('MASTER_KEY');
	      } else {
	        throw new Error('Cannot use the Master Key, it has not been provided.');
	      }
	    }

	    if (_CoreManager$2.default.get('FORCE_REVOCABLE_SESSION')) {
	      payload._RevocableSession = '1';
	    }

	    var installationId = options.installationId;
	    var installationIdPromise;

	    if (installationId && typeof installationId === 'string') {
	      installationIdPromise = _promise$2.default.resolve(installationId);
	    } else {
	      var installationController = _CoreManager$2.default.getInstallationController();

	      installationIdPromise = installationController.currentInstallationId();
	    }

	    return installationIdPromise.then(function (iid) {
	      payload._InstallationId = iid;

	      var userController = _CoreManager$2.default.getUserController();

	      if (options && typeof options.sessionToken === 'string') {
	        return _promise$2.default.resolve(options.sessionToken);
	      } else if (userController) {
	        return userController.currentUserAsync().then(function (user) {
	          if (user) {
	            return _promise$2.default.resolve(user.getSessionToken());
	          }

	          return _promise$2.default.resolve(null);
	        });
	      }

	      return _promise$2.default.resolve(null);
	    }).then(function (token) {
	      if (token) {
	        payload._SessionToken = token;
	      }

	      var payloadString = (0, _stringify$2.default)(payload);
	      return RESTController.ajax(method, url, payloadString, {}, options).then(function (_ref) {
	        var response = _ref.response,
	            status = _ref.status;

	        if (options.returnStatus) {
	          return _objectSpread(_objectSpread({}, response), {}, {
	            _status: status
	          });
	        } else {
	          return response;
	        }
	      });
	    }).catch(RESTController.handleError);
	  },
	  handleError: function (response) {
	    // Transform the error into an instance of ParseError by trying to parse
	    // the error string as JSON
	    var error;

	    if (response && response.responseText) {
	      try {
	        var errorJSON = JSON.parse(response.responseText);
	        error = new _ParseError.default(errorJSON.code, errorJSON.error);
	      } catch (e) {
	        // If we fail to parse the error text, that's okay.
	        error = new _ParseError.default(_ParseError.default.INVALID_JSON, 'Received an error with invalid JSON from Parse: ' + response.responseText);
	      }
	    } else {
	      var message = response.message ? response.message : response;
	      error = new _ParseError.default(_ParseError.default.CONNECTION_FAILED, 'XMLHttpRequest failed: ' + (0, _stringify$2.default)(message));
	    }

	    return _promise$2.default.reject(error);
	  },
	  _setXHR: function (xhr
	  /*: any*/
	  ) {
	    XHR = xhr;
	  },
	  _getXHR: function () {
	    return XHR;
	  }
	};
	var RESTController_1 = RESTController;

	var Analytics = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.track = track;

	var _CoreManager = interopRequireDefault(CoreManager);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */

	/**
	 * Parse.Analytics provides an interface to Parse's logging and analytics
	 * backend.
	 *
	 * @class Parse.Analytics
	 * @static
	 * @hideconstructor
	 */

	/**
	 * Tracks the occurrence of a custom event with additional dimensions.
	 * Parse will store a data point at the time of invocation with the given
	 * event name.
	 *
	 * Dimensions will allow segmentation of the occurrences of this custom
	 * event. Keys and values should be {@code String}s, and will throw
	 * otherwise.
	 *
	 * To track a user signup along with additional metadata, consider the
	 * following:
	 * <pre>
	 * var dimensions = {
	 *  gender: 'm',
	 *  source: 'web',
	 *  dayType: 'weekend'
	 * };
	 * Parse.Analytics.track('signup', dimensions);
	 * </pre>
	 *
	 * There is a default limit of 8 dimensions per event tracked.
	 *
	 * @function track
	 * @name Parse.Analytics.track
	 * @param {string} name The name of the custom event to report to Parse as
	 * having happened.
	 * @param {object} dimensions The dictionary of information by which to
	 * segment this event.
	 * @returns {Promise} A promise that is resolved when the round-trip
	 * to the server completes.
	 */


	function track(name
	/*: string*/
	, dimensions
	/*: { [key: string]: string }*/
	)
	/*: Promise*/
	{
	  name = name || '';
	  name = name.replace(/^\s*/, '');
	  name = name.replace(/\s*$/, '');

	  if (name.length === 0) {
	    throw new TypeError('A name for the custom event must be provided');
	  }

	  for (var _key in dimensions) {
	    if (typeof _key !== 'string' || typeof dimensions[_key] !== 'string') {
	      throw new TypeError('track() dimensions expects keys and values of type "string".');
	    }
	  }

	  return _CoreManager.default.getAnalyticsController().track(name, dimensions);
	}

	var DefaultController = {
	  track: function (name, dimensions) {
	    var RESTController = _CoreManager.default.getRESTController();

	    return RESTController.request('POST', 'events/' + name, {
	      dimensions: dimensions
	    });
	  }
	};

	_CoreManager.default.setAnalyticsController(DefaultController);
	});

	var AnonymousUtils_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _ParseUser = interopRequireDefault(ParseUser_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow-weak
	 */




	var registered = false;
	/**
	 * Provides utility functions for working with Anonymously logged-in users. <br />
	 * Anonymous users have some unique characteristics:
	 * <ul>
	 *  <li>Anonymous users don't need a user name or password.</li>
	 *  <ul>
	 *    <li>Once logged out, an anonymous user cannot be recovered.</li>
	 *  </ul>
	 *  <li>signUp converts an anonymous user to a standard user with the given username and password.</li>
	 *  <ul>
	 *    <li>Data associated with the anonymous user is retained.</li>
	 *  </ul>
	 *  <li>logIn switches users without converting the anonymous user.</li>
	 *  <ul>
	 *    <li>Data associated with the anonymous user will be lost.</li>
	 *  </ul>
	 *  <li>Service logIn (e.g. Facebook, Twitter) will attempt to convert
	 *  the anonymous user into a standard user by linking it to the service.</li>
	 *  <ul>
	 *    <li>If a user already exists that is linked to the service, it will instead switch to the existing user.</li>
	 *  </ul>
	 *  <li>Service linking (e.g. Facebook, Twitter) will convert the anonymous user
	 *  into a standard user by linking it to the service.</li>
	 * </ul>
	 *
	 * @class Parse.AnonymousUtils
	 * @static
	 */

	var AnonymousUtils = {
	  /**
	   * Gets whether the user has their account linked to anonymous user.
	   *
	   * @function isLinked
	   * @name Parse.AnonymousUtils.isLinked
	   * @param {Parse.User} user User to check for.
	   *     The user must be logged in on this device.
	   * @returns {boolean} <code>true</code> if the user has their account
	   *     linked to an anonymous user.
	   * @static
	   */
	  isLinked: function (user
	  /*: ParseUser*/
	  ) {
	    var provider = this._getAuthProvider();

	    return user._isLinked(provider.getAuthType());
	  },

	  /**
	   * Logs in a user Anonymously.
	   *
	   * @function logIn
	   * @name Parse.AnonymousUtils.logIn
	   * @param {object} options MasterKey / SessionToken.
	   * @returns {Promise} Logged in user
	   * @static
	   */
	  logIn: function (options
	  /*:: ?: RequestOptions*/
	  )
	  /*: Promise<ParseUser>*/
	  {
	    var provider = this._getAuthProvider();

	    return _ParseUser.default.logInWith(provider.getAuthType(), provider.getAuthData(), options);
	  },

	  /**
	   * Links Anonymous User to an existing PFUser.
	   *
	   * @function link
	   * @name Parse.AnonymousUtils.link
	   * @param {Parse.User} user User to link. This must be the current user.
	   * @param {object} options MasterKey / SessionToken.
	   * @returns {Promise} Linked with User
	   * @static
	   */
	  link: function (user
	  /*: ParseUser*/
	  , options
	  /*:: ?: RequestOptions*/
	  )
	  /*: Promise<ParseUser>*/
	  {
	    var provider = this._getAuthProvider();

	    return user.linkWith(provider.getAuthType(), provider.getAuthData(), options);
	  },

	  /**
	   * Returns true if Authentication Provider has been registered for use.
	   *
	   * @function isRegistered
	   * @name Parse.AnonymousUtils.isRegistered
	   * @returns {boolean}
	   * @static
	   */
	  isRegistered: function ()
	  /*: boolean*/
	  {
	    return registered;
	  },
	  _getAuthProvider: function () {
	    var provider = {
	      restoreAuthentication: function () {
	        return true;
	      },
	      getAuthType: function () {
	        return 'anonymous';
	      },
	      getAuthData: function () {
	        return {
	          authData: {
	            id: uuid_1()
	          }
	        };
	      }
	    };

	    if (!registered) {
	      _ParseUser.default._registerAuthenticationProvider(provider);

	      registered = true;
	    }

	    return provider;
	  }
	};
	var _default = AnonymousUtils;
	exports.default = _default;
	});

	var Cloud = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.getJobStatus = getJobStatus;
	exports.getJobsData = getJobsData;
	exports.run = run;
	exports.startJob = startJob;

	var _promise = interopRequireDefault(promise$3);

	var _keys = interopRequireDefault(keys$3);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _CoreManager = interopRequireDefault(CoreManager);

	var _decode = interopRequireDefault(decode_1);

	var _encode = interopRequireDefault(encode_1);

	var _ParseError = interopRequireDefault(ParseError_1);

	var _ParseQuery = interopRequireDefault(ParseQuery_1);

	interopRequireDefault(ParseObject_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */

	/**
	 * Contains functions for calling and declaring
	 * <a href="/docs/cloud_code_guide#functions">cloud functions</a>.
	 * <p><strong><em>
	 *   Some functions are only available from Cloud Code.
	 * </em></strong></p>
	 *
	 * @class Parse.Cloud
	 * @static
	 * @hideconstructor
	 */

	/**
	 * Makes a call to a cloud function.
	 *
	 * @function run
	 * @name Parse.Cloud.run
	 * @param {string} name The function name.
	 * @param {object} data The parameters to send to the cloud function.
	 * @param {object} options
	 * @returns {Promise} A promise that will be resolved with the result
	 * of the function.
	 */


	function run(name
	/*: string*/
	, data
	/*: mixed*/
	, options
	/*: RequestOptions*/
	)
	/*: Promise<mixed>*/
	{
	  options = options || {};

	  if (typeof name !== 'string' || name.length === 0) {
	    throw new TypeError('Cloud function name must be a string.');
	  }

	  var requestOptions = {};

	  if (options.useMasterKey) {
	    requestOptions.useMasterKey = options.useMasterKey;
	  }

	  if (options.sessionToken) {
	    requestOptions.sessionToken = options.sessionToken;
	  }

	  if (options.context && (0, _typeof2.default)(options.context) === 'object') {
	    requestOptions.context = options.context;
	  }

	  return _CoreManager.default.getCloudController().run(name, data, requestOptions);
	}
	/**
	 * Gets data for the current set of cloud jobs.
	 *
	 * @function getJobsData
	 * @name Parse.Cloud.getJobsData
	 * @returns {Promise} A promise that will be resolved with the result
	 * of the function.
	 */


	function getJobsData()
	/*: Promise<Object>*/
	{
	  return _CoreManager.default.getCloudController().getJobsData({
	    useMasterKey: true
	  });
	}
	/**
	 * Starts a given cloud job, which will process asynchronously.
	 *
	 * @function startJob
	 * @name Parse.Cloud.startJob
	 * @param {string} name The function name.
	 * @param {object} data The parameters to send to the cloud function.
	 * @returns {Promise} A promise that will be resolved with the jobStatusId
	 * of the job.
	 */


	function startJob(name
	/*: string*/
	, data
	/*: mixed*/
	)
	/*: Promise<string>*/
	{
	  if (typeof name !== 'string' || name.length === 0) {
	    throw new TypeError('Cloud job name must be a string.');
	  }

	  return _CoreManager.default.getCloudController().startJob(name, data, {
	    useMasterKey: true
	  });
	}
	/**
	 * Gets job status by Id
	 *
	 * @function getJobStatus
	 * @name Parse.Cloud.getJobStatus
	 * @param {string} jobStatusId The Id of Job Status.
	 * @returns {Parse.Object} Status of Job.
	 */


	function getJobStatus(jobStatusId
	/*: string*/
	)
	/*: Promise<ParseObject>*/
	{
	  var query = new _ParseQuery.default('_JobStatus');
	  return query.get(jobStatusId, {
	    useMasterKey: true
	  });
	}

	var DefaultController = {
	  run: function (name, data, options
	  /*: RequestOptions*/
	  ) {
	    var RESTController = _CoreManager.default.getRESTController();

	    var payload = (0, _encode.default)(data, true);
	    var request = RESTController.request('POST', 'functions/' + name, payload, options);
	    return request.then(function (res) {
	      if ((0, _typeof2.default)(res) === 'object' && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty('result')) {
	        throw new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.');
	      }

	      var decoded = (0, _decode.default)(res);

	      if (decoded && decoded.hasOwnProperty('result')) {
	        return _promise.default.resolve(decoded.result);
	      }

	      return _promise.default.resolve(undefined);
	    });
	  },
	  getJobsData: function (options
	  /*: RequestOptions*/
	  ) {
	    var RESTController = _CoreManager.default.getRESTController();

	    return RESTController.request('GET', 'cloud_code/jobs/data', null, options);
	  },
	  startJob: function (name, data, options
	  /*: RequestOptions*/
	  ) {
	    var RESTController = _CoreManager.default.getRESTController();

	    var payload = (0, _encode.default)(data, true);
	    return RESTController.request('POST', 'jobs/' + name, payload, options);
	  }
	};

	_CoreManager.default.setCloudController(DefaultController);
	});

	// eslint-disable-next-line es-x/no-object-assign -- safe
	var $assign = Object.assign;
	// eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
	var defineProperty$d = Object.defineProperty;
	var concat$6 = functionUncurryThis([].concat);

	// `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign
	var objectAssign = !$assign || fails(function () {
	  // should have correct order of operations (Edge bug)
	  if (descriptors && $assign({ b: 1 }, $assign(defineProperty$d({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty$d(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line es-x/no-symbol -- safe
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable.f;
	  while (argumentsLength > index) {
	    var S = indexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? concat$6(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors || functionCall(propertyIsEnumerable, S, key)) T[key] = S[key];
	    }
	  } return T;
	} : $assign;

	// `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign
	// eslint-disable-next-line es-x/no-object-assign -- required for testing
	_export({ target: 'Object', stat: true, arity: 2, forced: Object.assign !== objectAssign }, {
	  assign: objectAssign
	});

	var assign = path.Object.assign;

	var assign$1 = assign;

	var assign$2 = assign$1;

	var entries$3 = entryVirtual('Array').entries;

	var entries$4 = entries$3;

	var ArrayPrototype$d = Array.prototype;

	var DOMIterables$2 = {
	  DOMTokenList: true,
	  NodeList: true
	};

	var entries$5 = function (it) {
	  var own = it.entries;
	  return it === ArrayPrototype$d || (objectIsPrototypeOf(ArrayPrototype$d, it) && own === ArrayPrototype$d.entries)
	    || hasOwnProperty_1(DOMIterables$2, classof(it)) ? entries$4 : own;
	};

	var entries$6 = entries$5;

	var $every = arrayIteration.every;


	var STRICT_METHOD$3 = arrayMethodIsStrict('every');

	// `Array.prototype.every` method
	// https://tc39.es/ecma262/#sec-array.prototype.every
	_export({ target: 'Array', proto: true, forced: !STRICT_METHOD$3 }, {
	  every: function every(callbackfn /* , thisArg */) {
	    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var every = entryVirtual('Array').every;

	var ArrayPrototype$e = Array.prototype;

	var every$1 = function (it) {
	  var own = it.every;
	  return it === ArrayPrototype$e || (objectIsPrototypeOf(ArrayPrototype$e, it) && own === ArrayPrototype$e.every) ? every : own;
	};

	var every$2 = every$1;

	var every$3 = every$2;

	var map$a = map$1;

	var ParseCLP_1 = createCommonjsModule(function (module, exports) {





























	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _isArray = interopRequireDefault(isArray$3);

	var _keys = interopRequireDefault(keys$3);

	var _slice = interopRequireDefault(slice$3);

	var _assign = interopRequireDefault(assign$2);

	var _slicedToArray2 = interopRequireDefault(slicedToArray);

	var _entries = interopRequireDefault(entries$6);

	var _every = interopRequireDefault(every$3);

	var _includes = interopRequireDefault(includes$4);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _defineProperty2 = interopRequireDefault(defineProperty$b);

	var _map = interopRequireDefault(map$a);

	var _ParseRole = interopRequireDefault(ParseRole_1);

	var _ParseUser = interopRequireDefault(ParseUser_1);

	function ownKeys(object, enumerableOnly) {
	  var keys = keys$3(object);

	  if (getOwnPropertySymbols$2) {
	    var symbols = getOwnPropertySymbols$2(object);

	    enumerableOnly && (symbols = filter$3(symbols).call(symbols, function (sym) {
	      return getOwnPropertyDescriptor$3(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var _context3, _context4;

	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? forEach$4(_context3 = ownKeys(Object(source), !0)).call(_context3, function (key) {
	      (0, _defineProperty2.default)(target, key, source[key]);
	    }) : getOwnPropertyDescriptors$2 ? defineProperties$2(target, getOwnPropertyDescriptors$2(source)) : forEach$4(_context4 = ownKeys(Object(source))).call(_context4, function (key) {
	      defineProperty$3(target, key, getOwnPropertyDescriptor$3(source, key));
	    });
	  }

	  return target;
	}

	function _createForOfIteratorHelper(o, allowArrayLike) {
	  var it = typeof symbol$6 !== "undefined" && getIteratorMethod$5(o) || o["@@iterator"];

	  if (!it) {
	    if (isArray$3(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function () {};

	      return {
	        s: F,
	        n: function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function (_e) {
	          throw _e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function () {
	      it = it.call(o);
	    },
	    n: function () {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function (_e2) {
	      didErr = true;
	      err = _e2;
	    },
	    f: function () {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	function _unsupportedIterableToArray(o, minLen) {
	  var _context2;

	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);

	  var n = slice$3(_context2 = Object.prototype.toString.call(o)).call(_context2, 8, -1);

	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return from$3(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	var PUBLIC_KEY = '*';
	var VALID_PERMISSIONS
	/*: Map<string, UsersMap>*/
	= new _map.default();
	VALID_PERMISSIONS.set('get', {});
	VALID_PERMISSIONS.set('find', {});
	VALID_PERMISSIONS.set('count', {});
	VALID_PERMISSIONS.set('create', {});
	VALID_PERMISSIONS.set('update', {});
	VALID_PERMISSIONS.set('delete', {});
	VALID_PERMISSIONS.set('addField', {});
	var VALID_PERMISSIONS_EXTENDED
	/*: Map<string, UsersMap>*/
	= new _map.default();
	VALID_PERMISSIONS_EXTENDED.set('protectedFields', {});
	/**
	 * Creates a new CLP.
	 * If no argument is given, the CLP has no permissions for anyone.
	 * If the argument is a Parse.User or Parse.Role, the CLP will have read and write
	 *   permission for only that user or role.
	 * If the argument is any other JSON object, that object will be interpretted
	 *   as a serialized CLP created with toJSON().
	 *
	 * <p>A CLP, or Class Level Permissions can be added to any
	 * <code>Parse.Schema</code> to restrict access to only a subset of users
	 * of your application.</p>
	 *
	 * <p>
	 * For get/count/find/create/update/delete/addField using the following functions:
	 *
	 * Entity is type Parse.User or Parse.Role or string
	 * Role is type Parse.Role or Name of Parse.Role
	 *
	 * getGetRequiresAuthentication()
	 * setGetRequiresAuthentication(allowed: boolean)
	 * getGetPointerFields()
	 * setGetPointerFields(pointerFields: string[])
	 * getGetAccess(entity: Entity)
	 * setGetAccess(entity: Entity, allowed: boolean)
	 * getPublicGetAccess()
	 * setPublicGetAccess(allowed: boolean)
	 * getRoleGetAccess(role: Role)
	 * setRoleGetAccess(role: Role, allowed: boolean)
	 * getFindRequiresAuthentication()
	 * setFindRequiresAuthentication(allowed: boolean)
	 * getFindPointerFields()
	 * setFindPointerFields(pointerFields: string[])
	 * getFindAccess(entity: Entity)
	 * setFindAccess(entity: Entity, allowed: boolean)
	 * getPublicFindAccess()
	 * setPublicFindAccess(allowed: boolean)
	 * getRoleFindAccess(role: Role)
	 * setRoleFindAccess(role: Role, allowed: boolean)
	 * getCountRequiresAuthentication()
	 * setCountRequiresAuthentication(allowed: boolean)
	 * getCountPointerFields()
	 * setCountPointerFields(pointerFields: string[])
	 * getCountAccess(entity: Entity)
	 * setCountAccess(entity: Entity, allowed: boolean)
	 * getPublicCountAccess()
	 * setPublicCountAccess(allowed: boolean)
	 * getRoleCountAccess(role: Role)
	 * setRoleCountAccess(role: Role, allowed: boolean)
	 * getCreateRequiresAuthentication()
	 * setCreateRequiresAuthentication(allowed: boolean)
	 * getCreatePointerFields()
	 * setCreatePointerFields(pointerFields: string[])
	 * getCreateAccess(entity: Entity)
	 * setCreateAccess(entity: Entity, allowed: boolean)
	 * getPublicCreateAccess()
	 * setPublicCreateAccess(allowed: Boolean)
	 * getRoleCreateAccess(role: Role)
	 * setRoleCreateAccess(role: Role, allowed: boolean)
	 * getUpdateRequiresAuthentication()
	 * setUpdateRequiresAuthentication(allowed: boolean)
	 * getUpdatePointerFields()
	 * setUpdatePointerFields(pointerFields: string[])
	 * getUpdateAccess(entity: Entity)
	 * setUpdateAccess(entity: Entity, allowed: boolean)
	 * getPublicUpdateAccess()
	 * setPublicUpdateAccess(allowed: boolean)
	 * getRoleUpdateAccess(role: Role)
	 * setRoleUpdateAccess(role: Role, allowed: boolean)
	 * getDeleteRequiresAuthentication()
	 * setDeleteRequiresAuthentication(allowed: boolean)
	 * getDeletePointerFields()
	 * setDeletePointerFields(pointerFields: string[])
	 * getDeleteAccess(entity: Entity)
	 * setDeleteAccess(entity: Entity, allowed: boolean)
	 * getPublicDeleteAccess()
	 * setPublicDeleteAccess(allowed: boolean)
	 * getRoleDeleteAccess(role: Role)
	 * setRoleDeleteAccess(role: Role, allowed: boolean)
	 * getAddFieldRequiresAuthentication()
	 * setAddFieldRequiresAuthentication(allowed: boolean)
	 * getAddFieldPointerFields()
	 * setAddFieldPointerFields(pointerFields: string[])
	 * getAddFieldAccess(entity: Entity)
	 * setAddFieldAccess(entity: Entity, allowed: boolean)
	 * getPublicAddFieldAccess()
	 * setPublicAddFieldAccess(allowed: boolean)
	 * getRoleAddFieldAccess(role: Role)
	 * setRoleAddFieldAccess(role: Role, allowed: boolean)
	 * </p>
	 *
	 * @alias Parse.CLP
	 */

	var ParseCLP = /*#__PURE__*/function () {
	  /**
	   * @param {(Parse.User | Parse.Role | object)} userId The user to initialize the CLP for
	   */
	  function ParseCLP(userId
	  /*: ParseUser | ParseRole | PermissionsMap*/
	  ) {
	    var _this = this;

	    (0, _classCallCheck2.default)(this, ParseCLP);
	    (0, _defineProperty2.default)(this, "permissionsMap", void 0);
	    this.permissionsMap = {}; // Initialize permissions Map with default permissions

	    var _iterator = _createForOfIteratorHelper((0, _entries.default)(VALID_PERMISSIONS).call(VALID_PERMISSIONS)),
	        _step;

	    try {
	      var _loop = function () {
	        var _step$value = (0, _slicedToArray2.default)(_step.value, 2),
	            operation = _step$value[0],
	            group = _step$value[1];

	        _this.permissionsMap[operation] = (0, _assign.default)({}, group);
	        var action = operation.charAt(0).toUpperCase() + (0, _slice.default)(operation).call(operation, 1);

	        _this["get".concat(action, "RequiresAuthentication")] = function () {
	          return this._getAccess(operation, 'requiresAuthentication');
	        };

	        _this["set".concat(action, "RequiresAuthentication")] = function (allowed) {
	          this._setAccess(operation, 'requiresAuthentication', allowed);
	        };

	        _this["get".concat(action, "PointerFields")] = function () {
	          return this._getAccess(operation, 'pointerFields', false);
	        };

	        _this["set".concat(action, "PointerFields")] = function (pointerFields) {
	          this._setArrayAccess(operation, 'pointerFields', pointerFields);
	        };

	        _this["get".concat(action, "Access")] = function (entity) {
	          return this._getAccess(operation, entity);
	        };

	        _this["set".concat(action, "Access")] = function (entity, allowed) {
	          this._setAccess(operation, entity, allowed);
	        };

	        _this["getPublic".concat(action, "Access")] = function () {
	          return this["get".concat(action, "Access")](PUBLIC_KEY);
	        };

	        _this["setPublic".concat(action, "Access")] = function (allowed) {
	          this["set".concat(action, "Access")](PUBLIC_KEY, allowed);
	        };

	        _this["getRole".concat(action, "Access")] = function (role) {
	          return this["get".concat(action, "Access")](this._getRoleName(role));
	        };

	        _this["setRole".concat(action, "Access")] = function (role, allowed) {
	          this["set".concat(action, "Access")](this._getRoleName(role), allowed);
	        };
	      };

	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        _loop();
	      } // Initialize permissions Map with default extended permissions

	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }

	    var _iterator2 = _createForOfIteratorHelper((0, _entries.default)(VALID_PERMISSIONS_EXTENDED).call(VALID_PERMISSIONS_EXTENDED)),
	        _step2;

	    try {
	      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	        var _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
	            operation = _step2$value[0],
	            group = _step2$value[1];

	        this.permissionsMap[operation] = (0, _assign.default)({}, group);
	      }
	    } catch (err) {
	      _iterator2.e(err);
	    } finally {
	      _iterator2.f();
	    }

	    if (userId && (0, _typeof2.default)(userId) === 'object') {
	      if (userId instanceof _ParseUser.default) {
	        this.setReadAccess(userId, true);
	        this.setWriteAccess(userId, true);
	      } else if (userId instanceof _ParseRole.default) {
	        this.setRoleReadAccess(userId, true);
	        this.setRoleWriteAccess(userId, true);
	      } else {
	        for (var _permission in userId) {
	          var _context;

	          var users = userId[_permission];
	          var isValidPermission = !!VALID_PERMISSIONS.get(_permission);
	          var isValidPermissionExtended = !!VALID_PERMISSIONS_EXTENDED.get(_permission);
	          var isValidGroupPermission = (0, _includes.default)(_context = ['readUserFields', 'writeUserFields']).call(_context, _permission);

	          if (typeof _permission !== 'string' || !(isValidPermission || isValidPermissionExtended || isValidGroupPermission)) {
	            throw new TypeError('Tried to create an CLP with an invalid permission type.');
	          }

	          if (isValidGroupPermission) {
	            if ((0, _every.default)(users).call(users, function (pointer) {
	              return typeof pointer === 'string';
	            })) {
	              this.permissionsMap[_permission] = users;
	              continue;
	            } else {
	              throw new TypeError('Tried to create an CLP with an invalid permission value.');
	            }
	          }

	          for (var user in users) {
	            var allowed = users[user];

	            if (typeof allowed !== 'boolean' && !isValidPermissionExtended && user !== 'pointerFields') {
	              throw new TypeError('Tried to create an CLP with an invalid permission value.');
	            }

	            this.permissionsMap[_permission][user] = allowed;
	          }
	        }
	      }
	    } else if (typeof userId === 'function') {
	      throw new TypeError('ParseCLP constructed with a function. Did you forget ()?');
	    }
	  }
	  /**
	   * Returns a JSON-encoded version of the CLP.
	   *
	   * @returns {object}
	   */


	  (0, _createClass2.default)(ParseCLP, [{
	    key: "toJSON",
	    value: function ()
	    /*: PermissionsMap*/
	    {
	      return _objectSpread({}, this.permissionsMap);
	    }
	    /**
	     * Returns whether this CLP is equal to another object
	     *
	     * @param other The other object to compare to
	     * @returns {boolean}
	     */

	  }, {
	    key: "equals",
	    value: function (other
	    /*: ParseCLP*/
	    )
	    /*: boolean*/
	    {
	      if (!(other instanceof ParseCLP)) {
	        return false;
	      }

	      var permissions = (0, _keys.default)(this.permissionsMap);
	      var otherPermissions = (0, _keys.default)(other.permissionsMap);

	      if (permissions.length !== otherPermissions.length) {
	        return false;
	      }

	      for (var _permission2 in this.permissionsMap) {
	        if (!other.permissionsMap[_permission2]) {
	          return false;
	        }

	        var users = (0, _keys.default)(this.permissionsMap[_permission2]);
	        var otherUsers = (0, _keys.default)(other.permissionsMap[_permission2]);

	        if (users.length !== otherUsers.length) {
	          return false;
	        }

	        for (var user in this.permissionsMap[_permission2]) {
	          if (!other.permissionsMap[_permission2][user]) {
	            return false;
	          }

	          if (this.permissionsMap[_permission2][user] !== other.permissionsMap[_permission2][user]) {
	            return false;
	          }
	        }
	      }

	      return true;
	    }
	  }, {
	    key: "_getRoleName",
	    value: function (role
	    /*: ParseRole | string*/
	    )
	    /*: string*/
	    {
	      var name = role;

	      if (role instanceof _ParseRole.default) {
	        // Normalize to the String name
	        name = role.getName();
	      }

	      if (typeof name !== 'string') {
	        throw new TypeError('role must be a Parse.Role or a String');
	      }

	      return "role:".concat(name);
	    }
	  }, {
	    key: "_parseEntity",
	    value: function (entity
	    /*: Entity*/
	    ) {
	      var userId = entity;

	      if (userId instanceof _ParseUser.default) {
	        userId = userId.id;

	        if (!userId) {
	          throw new Error('Cannot get access for a Parse.User without an id.');
	        }
	      } else if (userId instanceof _ParseRole.default) {
	        userId = this._getRoleName(userId);
	      }

	      if (typeof userId !== 'string') {
	        throw new TypeError('userId must be a string.');
	      }

	      return userId;
	    }
	  }, {
	    key: "_setAccess",
	    value: function (permission
	    /*: string*/
	    , userId
	    /*: Entity*/
	    , allowed
	    /*: boolean*/
	    ) {
	      userId = this._parseEntity(userId);

	      if (typeof allowed !== 'boolean') {
	        throw new TypeError('allowed must be either true or false.');
	      }

	      var permissions = this.permissionsMap[permission][userId];

	      if (!permissions) {
	        if (!allowed) {
	          // The user already doesn't have this permission, so no action is needed
	          return;
	        } else {
	          this.permissionsMap[permission][userId] = {};
	        }
	      }

	      if (allowed) {
	        this.permissionsMap[permission][userId] = true;
	      } else {
	        delete this.permissionsMap[permission][userId];
	      }
	    }
	  }, {
	    key: "_getAccess",
	    value: function (permission
	    /*: string*/
	    , userId
	    /*: Entity*/
	    )
	    /*: boolean | string[]*/
	    {
	      var returnBoolean = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	      userId = this._parseEntity(userId);
	      var permissions = this.permissionsMap[permission][userId];

	      if (returnBoolean) {
	        if (!permissions) {
	          return false;
	        }

	        return !!this.permissionsMap[permission][userId];
	      }

	      return permissions;
	    }
	  }, {
	    key: "_setArrayAccess",
	    value: function (permission
	    /*: string*/
	    , userId
	    /*: Entity*/
	    , fields
	    /*: string*/
	    ) {
	      userId = this._parseEntity(userId);
	      var permissions = this.permissionsMap[permission][userId];

	      if (!permissions) {
	        this.permissionsMap[permission][userId] = [];
	      }

	      if (!fields || (0, _isArray.default)(fields) && fields.length === 0) {
	        delete this.permissionsMap[permission][userId];
	      } else if ((0, _isArray.default)(fields) && (0, _every.default)(fields).call(fields, function (field) {
	        return typeof field === 'string';
	      })) {
	        this.permissionsMap[permission][userId] = fields;
	      } else {
	        throw new TypeError('fields must be an array of strings or undefined.');
	      }
	    }
	  }, {
	    key: "_setGroupPointerPermission",
	    value: function (operation
	    /*: string*/
	    , pointerFields
	    /*: string[]*/
	    ) {
	      var fields = this.permissionsMap[operation];

	      if (!fields) {
	        this.permissionsMap[operation] = [];
	      }

	      if (!pointerFields || (0, _isArray.default)(pointerFields) && pointerFields.length === 0) {
	        delete this.permissionsMap[operation];
	      } else if ((0, _isArray.default)(pointerFields) && (0, _every.default)(pointerFields).call(pointerFields, function (field) {
	        return typeof field === 'string';
	      })) {
	        this.permissionsMap[operation] = pointerFields;
	      } else {
	        throw new TypeError("".concat(operation, ".pointerFields must be an array of strings or undefined."));
	      }
	    }
	  }, {
	    key: "_getGroupPointerPermissions",
	    value: function (operation
	    /*: string*/
	    )
	    /*: string[]*/
	    {
	      return this.permissionsMap[operation];
	    }
	    /**
	     * Sets user pointer fields to allow permission for get/count/find operations.
	     *
	     * @param {string[]} pointerFields User pointer fields
	     */

	  }, {
	    key: "setReadUserFields",
	    value: function (pointerFields
	    /*: string[]*/
	    ) {
	      this._setGroupPointerPermission('readUserFields', pointerFields);
	    }
	    /**
	     * @returns {string[]} User pointer fields
	     */

	  }, {
	    key: "getReadUserFields",
	    value: function ()
	    /*: string[]*/
	    {
	      return this._getGroupPointerPermissions('readUserFields');
	    }
	    /**
	     * Sets user pointer fields to allow permission for create/delete/update/addField operations
	     *
	     * @param {string[]} pointerFields User pointer fields
	     */

	  }, {
	    key: "setWriteUserFields",
	    value: function (pointerFields
	    /*: string[]*/
	    ) {
	      this._setGroupPointerPermission('writeUserFields', pointerFields);
	    }
	    /**
	     * @returns {string[]} User pointer fields
	     */

	  }, {
	    key: "getWriteUserFields",
	    value: function ()
	    /*: string[]*/
	    {
	      return this._getGroupPointerPermissions('writeUserFields');
	    }
	    /**
	     * Sets whether the given user is allowed to retrieve fields from this class.
	     *
	     * @param userId An instance of Parse.User or its objectId.
	     * @param {string[]} fields fields to be protected
	     */

	  }, {
	    key: "setProtectedFields",
	    value: function (userId
	    /*: Entity*/
	    , fields
	    /*: string[]*/
	    ) {
	      this._setArrayAccess('protectedFields', userId, fields);
	    }
	    /**
	     * Returns array of fields are accessable to this user.
	     *
	     * @param userId An instance of Parse.User or its objectId, or a Parse.Role.
	     * @returns {string[]}
	     */

	  }, {
	    key: "getProtectedFields",
	    value: function (userId
	    /*: Entity*/
	    )
	    /*: string[]*/
	    {
	      return this._getAccess('protectedFields', userId, false);
	    }
	    /**
	     * Sets whether the given user is allowed to read from this class.
	     *
	     * @param userId An instance of Parse.User or its objectId.
	     * @param {boolean} allowed whether that user should have read access.
	     */

	  }, {
	    key: "setReadAccess",
	    value: function (userId
	    /*: Entity*/
	    , allowed
	    /*: boolean*/
	    ) {
	      this._setAccess('find', userId, allowed);

	      this._setAccess('get', userId, allowed);

	      this._setAccess('count', userId, allowed);
	    }
	    /**
	     * Get whether the given user id is *explicitly* allowed to read from this class.
	     * Even if this returns false, the user may still be able to access it if
	     * getPublicReadAccess returns true or a role that the user belongs to has
	     * write access.
	     *
	     * @param userId An instance of Parse.User or its objectId, or a Parse.Role.
	     * @returns {boolean}
	     */

	  }, {
	    key: "getReadAccess",
	    value: function (userId
	    /*: Entity*/
	    )
	    /*: boolean*/
	    {
	      return this._getAccess('find', userId) && this._getAccess('get', userId) && this._getAccess('count', userId);
	    }
	    /**
	     * Sets whether the given user id is allowed to write to this class.
	     *
	     * @param userId An instance of Parse.User or its objectId, or a Parse.Role..
	     * @param {boolean} allowed Whether that user should have write access.
	     */

	  }, {
	    key: "setWriteAccess",
	    value: function (userId
	    /*: Entity*/
	    , allowed
	    /*: boolean*/
	    ) {
	      this._setAccess('create', userId, allowed);

	      this._setAccess('update', userId, allowed);

	      this._setAccess('delete', userId, allowed);

	      this._setAccess('addField', userId, allowed);
	    }
	    /**
	     * Gets whether the given user id is *explicitly* allowed to write to this class.
	     * Even if this returns false, the user may still be able to write it if
	     * getPublicWriteAccess returns true or a role that the user belongs to has
	     * write access.
	     *
	     * @param userId An instance of Parse.User or its objectId, or a Parse.Role.
	     * @returns {boolean}
	     */

	  }, {
	    key: "getWriteAccess",
	    value: function (userId
	    /*: Entity*/
	    )
	    /*: boolean*/
	    {
	      return this._getAccess('create', userId) && this._getAccess('update', userId) && this._getAccess('delete', userId) && this._getAccess('addField', userId);
	    }
	    /**
	     * Sets whether the public is allowed to read from this class.
	     *
	     * @param {boolean} allowed
	     */

	  }, {
	    key: "setPublicReadAccess",
	    value: function (allowed
	    /*: boolean*/
	    ) {
	      this.setReadAccess(PUBLIC_KEY, allowed);
	    }
	    /**
	     * Gets whether the public is allowed to read from this class.
	     *
	     * @returns {boolean}
	     */

	  }, {
	    key: "getPublicReadAccess",
	    value: function ()
	    /*: boolean*/
	    {
	      return this.getReadAccess(PUBLIC_KEY);
	    }
	    /**
	     * Sets whether the public is allowed to write to this class.
	     *
	     * @param {boolean} allowed
	     */

	  }, {
	    key: "setPublicWriteAccess",
	    value: function (allowed
	    /*: boolean*/
	    ) {
	      this.setWriteAccess(PUBLIC_KEY, allowed);
	    }
	    /**
	     * Gets whether the public is allowed to write to this class.
	     *
	     * @returns {boolean}
	     */

	  }, {
	    key: "getPublicWriteAccess",
	    value: function ()
	    /*: boolean*/
	    {
	      return this.getWriteAccess(PUBLIC_KEY);
	    }
	    /**
	     * Sets whether the public is allowed to protect fields in this class.
	     *
	     * @param {string[]} fields
	     */

	  }, {
	    key: "setPublicProtectedFields",
	    value: function (fields
	    /*: string[]*/
	    ) {
	      this.setProtectedFields(PUBLIC_KEY, fields);
	    }
	    /**
	     * Gets whether the public is allowed to read fields from this class.
	     *
	     * @returns {string[]}
	     */

	  }, {
	    key: "getPublicProtectedFields",
	    value: function ()
	    /*: string[]*/
	    {
	      return this.getProtectedFields(PUBLIC_KEY);
	    }
	    /**
	     * Gets whether users belonging to the given role are allowed
	     * to read from this class. Even if this returns false, the role may
	     * still be able to write it if a parent role has read access.
	     *
	     * @param role The name of the role, or a Parse.Role object.
	     * @returns {boolean} true if the role has read access. false otherwise.
	     * @throws {TypeError} If role is neither a Parse.Role nor a String.
	     */

	  }, {
	    key: "getRoleReadAccess",
	    value: function (role
	    /*: ParseRole | string*/
	    )
	    /*: boolean*/
	    {
	      return this.getReadAccess(this._getRoleName(role));
	    }
	    /**
	     * Gets whether users belonging to the given role are allowed
	     * to write to this user. Even if this returns false, the role may
	     * still be able to write it if a parent role has write access.
	     *
	     * @param role The name of the role, or a Parse.Role object.
	     * @returns {boolean} true if the role has write access. false otherwise.
	     * @throws {TypeError} If role is neither a Parse.Role nor a String.
	     */

	  }, {
	    key: "getRoleWriteAccess",
	    value: function (role
	    /*: ParseRole | string*/
	    )
	    /*: boolean*/
	    {
	      return this.getWriteAccess(this._getRoleName(role));
	    }
	    /**
	     * Sets whether users belonging to the given role are allowed
	     * to read from this class.
	     *
	     * @param role The name of the role, or a Parse.Role object.
	     * @param {boolean} allowed Whether the given role can read this object.
	     * @throws {TypeError} If role is neither a Parse.Role nor a String.
	     */

	  }, {
	    key: "setRoleReadAccess",
	    value: function (role
	    /*: ParseRole | string*/
	    , allowed
	    /*: boolean*/
	    ) {
	      this.setReadAccess(this._getRoleName(role), allowed);
	    }
	    /**
	     * Sets whether users belonging to the given role are allowed
	     * to write to this class.
	     *
	     * @param role The name of the role, or a Parse.Role object.
	     * @param {boolean} allowed Whether the given role can write this object.
	     * @throws {TypeError} If role is neither a Parse.Role nor a String.
	     */

	  }, {
	    key: "setRoleWriteAccess",
	    value: function (role
	    /*: ParseRole | string*/
	    , allowed
	    /*: boolean*/
	    ) {
	      this.setWriteAccess(this._getRoleName(role), allowed);
	    }
	    /**
	     * Gets whether users belonging to the given role are allowed
	     * to count to this user. Even if this returns false, the role may
	     * still be able to count it if a parent role has count access.
	     *
	     * @param role The name of the role, or a Parse.Role object.
	     * @returns {string[]}
	     * @throws {TypeError} If role is neither a Parse.Role nor a String.
	     */

	  }, {
	    key: "getRoleProtectedFields",
	    value: function (role
	    /*: ParseRole | string*/
	    )
	    /*: string[]*/
	    {
	      return this.getProtectedFields(this._getRoleName(role));
	    }
	    /**
	     * Sets whether users belonging to the given role are allowed
	     * to set access field in this class.
	     *
	     * @param role The name of the role, or a Parse.Role object.
	     * @param {string[]} fields Fields to be protected by Role.
	     * @throws {TypeError} If role is neither a Parse.Role nor a String.
	     */

	  }, {
	    key: "setRoleProtectedFields",
	    value: function (role
	    /*: ParseRole | string*/
	    , fields
	    /*: string[]*/
	    ) {
	      this.setProtectedFields(this._getRoleName(role), fields);
	    }
	  }]);
	  return ParseCLP;
	}();

	var _default = ParseCLP;
	exports.default = _default;
	});

	var ParseConfig_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _stringify = interopRequireDefault(stringify$2);

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _promise = interopRequireDefault(promise$3);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _defineProperty2 = interopRequireDefault(defineProperty$b);

	var _CoreManager = interopRequireDefault(CoreManager);

	var _decode = interopRequireDefault(decode_1);

	var _encode = interopRequireDefault(encode_1);

	var _escape2 = interopRequireDefault(_escape);

	var _ParseError = interopRequireDefault(ParseError_1);

	var _Storage = interopRequireDefault(Storage_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */

	/**
	 * Parse.Config is a local representation of configuration data that
	 * can be set from the Parse dashboard.
	 *
	 * @alias Parse.Config
	 */


	var ParseConfig = /*#__PURE__*/function () {
	  function ParseConfig() {
	    (0, _classCallCheck2.default)(this, ParseConfig);
	    (0, _defineProperty2.default)(this, "attributes", void 0);
	    (0, _defineProperty2.default)(this, "_escapedAttributes", void 0);
	    this.attributes = {};
	    this._escapedAttributes = {};
	  }
	  /**
	   * Gets the value of an attribute.
	   *
	   * @param {string} attr The name of an attribute.
	   * @returns {*}
	   */


	  (0, _createClass2.default)(ParseConfig, [{
	    key: "get",
	    value: function (attr
	    /*: string*/
	    )
	    /*: any*/
	    {
	      return this.attributes[attr];
	    }
	    /**
	     * Gets the HTML-escaped value of an attribute.
	     *
	     * @param {string} attr The name of an attribute.
	     * @returns {string}
	     */

	  }, {
	    key: "escape",
	    value: function (attr
	    /*: string*/
	    )
	    /*: string*/
	    {
	      var html = this._escapedAttributes[attr];

	      if (html) {
	        return html;
	      }

	      var val = this.attributes[attr];
	      var escaped = '';

	      if (val != null) {
	        escaped = (0, _escape2.default)(val.toString());
	      }

	      this._escapedAttributes[attr] = escaped;
	      return escaped;
	    }
	    /**
	     * Retrieves the most recently-fetched configuration object, either from
	     * memory or from local storage if necessary.
	     *
	     * @static
	     * @returns {Parse.Config} The most recently-fetched Parse.Config if it
	     *     exists, else an empty Parse.Config.
	     */

	  }], [{
	    key: "current",
	    value: function () {
	      var controller = _CoreManager.default.getConfigController();

	      return controller.current();
	    }
	    /**
	     * Gets a new configuration object from the server.
	     *
	     * @static
	     * @param {object} options
	     * Valid options are:<ul>
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     * </ul>
	     * @returns {Promise} A promise that is resolved with a newly-created
	     *     configuration object when the get completes.
	     */

	  }, {
	    key: "get",
	    value: function () {
	      var options
	      /*: RequestOptions*/
	      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      var controller = _CoreManager.default.getConfigController();

	      return controller.get(options);
	    }
	    /**
	     * Save value keys to the server.
	     *
	     * @static
	     * @param {object} attrs The config parameters and values.
	     * @param {object} masterKeyOnlyFlags The flags that define whether config parameters listed
	     * in `attrs` should be retrievable only by using the master key.
	     * For example: `param1: true` makes `param1` only retrievable by using the master key.
	     * If a parameter is not provided or set to `false`, it can be retrieved without
	     * using the master key.
	     * @returns {Promise} A promise that is resolved with a newly-created
	     *     configuration object or with the current with the update.
	     */

	  }, {
	    key: "save",
	    value: function (attrs
	    /*: { [key: string]: any }*/
	    , masterKeyOnlyFlags
	    /*: { [key: string]: any }*/
	    ) {
	      var controller = _CoreManager.default.getConfigController(); //To avoid a mismatch with the local and the cloud config we get a new version


	      return controller.save(attrs, masterKeyOnlyFlags).then(function () {
	        return controller.get({
	          useMasterKey: true
	        });
	      }, function (error) {
	        return _promise.default.reject(error);
	      });
	    }
	    /**
	     * Used for testing
	     *
	     * @private
	     */

	  }, {
	    key: "_clearCache",
	    value: function () {
	      currentConfig = null;
	    }
	  }]);
	  return ParseConfig;
	}();

	var currentConfig = null;
	var CURRENT_CONFIG_KEY = 'currentConfig';

	function decodePayload(data) {
	  try {
	    var json = JSON.parse(data);

	    if (json && (0, _typeof2.default)(json) === 'object') {
	      return (0, _decode.default)(json);
	    }
	  } catch (e) {
	    return null;
	  }
	}

	var DefaultController = {
	  current: function () {
	    if (currentConfig) {
	      return currentConfig;
	    }

	    var config = new ParseConfig();

	    var storagePath = _Storage.default.generatePath(CURRENT_CONFIG_KEY);

	    if (!_Storage.default.async()) {
	      var configData = _Storage.default.getItem(storagePath);

	      if (configData) {
	        var attributes = decodePayload(configData);

	        if (attributes) {
	          config.attributes = attributes;
	          currentConfig = config;
	        }
	      }

	      return config;
	    } // Return a promise for async storage controllers


	    return _Storage.default.getItemAsync(storagePath).then(function (configData) {
	      if (configData) {
	        var _attributes = decodePayload(configData);

	        if (_attributes) {
	          config.attributes = _attributes;
	          currentConfig = config;
	        }
	      }

	      return config;
	    });
	  },
	  get: function () {
	    var options
	    /*: RequestOptions*/
	    = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    var RESTController = _CoreManager.default.getRESTController();

	    return RESTController.request('GET', 'config', {}, options).then(function (response) {
	      if (!response || !response.params) {
	        var error = new _ParseError.default(_ParseError.default.INVALID_JSON, 'Config JSON response invalid.');
	        return _promise.default.reject(error);
	      }

	      var config = new ParseConfig();
	      config.attributes = {};

	      for (var attr in response.params) {
	        config.attributes[attr] = (0, _decode.default)(response.params[attr]);
	      }

	      currentConfig = config;
	      return _Storage.default.setItemAsync(_Storage.default.generatePath(CURRENT_CONFIG_KEY), (0, _stringify.default)(response.params)).then(function () {
	        return config;
	      });
	    });
	  },
	  save: function (attrs
	  /*: { [key: string]: any }*/
	  , masterKeyOnlyFlags
	  /*: { [key: string]: any }*/
	  ) {
	    var RESTController = _CoreManager.default.getRESTController();

	    var encodedAttrs = {};

	    for (var _key in attrs) {
	      encodedAttrs[_key] = (0, _encode.default)(attrs[_key]);
	    }

	    return RESTController.request('PUT', 'config', {
	      params: encodedAttrs,
	      masterKeyOnly: masterKeyOnlyFlags
	    }, {
	      useMasterKey: true
	    }).then(function (response) {
	      if (response && response.result) {
	        return _promise.default.resolve();
	      } else {
	        var error = new _ParseError.default(_ParseError.default.INTERNAL_SERVER_ERROR, 'Error occured updating Config.');
	        return _promise.default.reject(error);
	      }
	    });
	  }
	};

	_CoreManager.default.setConfigController(DefaultController);

	var _default = ParseConfig;
	exports.default = _default;
	});

	var FacebookUtils_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _ParseUser = interopRequireDefault(ParseUser_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow-weak
	 */

	/* global FB */


	var initialized = false;
	var requestedPermissions;
	var initOptions;
	var provider = {
	  authenticate: function (options) {
	    var _this = this;

	    if (typeof FB === 'undefined') {
	      options.error(this, 'Facebook SDK not found.');
	    }

	    FB.login(function (response) {
	      if (response.authResponse) {
	        if (options.success) {
	          options.success(_this, {
	            id: response.authResponse.userID,
	            access_token: response.authResponse.accessToken,
	            expiration_date: new Date(response.authResponse.expiresIn * 1000 + new Date().getTime()).toJSON()
	          });
	        }
	      } else {
	        if (options.error) {
	          options.error(_this, response);
	        }
	      }
	    }, {
	      scope: requestedPermissions
	    });
	  },
	  restoreAuthentication: function (authData) {
	    if (authData) {
	      var newOptions = {};

	      if (initOptions) {
	        for (var key in initOptions) {
	          newOptions[key] = initOptions[key];
	        }
	      } // Suppress checks for login status from the browser.


	      newOptions.status = false; // If the user doesn't match the one known by the FB SDK, log out.
	      // Most of the time, the users will match -- it's only in cases where
	      // the FB SDK knows of a different user than the one being restored
	      // from a Parse User that logged in with username/password.

	      var existingResponse = FB.getAuthResponse();

	      if (existingResponse && existingResponse.userID !== authData.id) {
	        FB.logout();
	      }

	      FB.init(newOptions);
	    }

	    return true;
	  },
	  getAuthType: function () {
	    return 'facebook';
	  },
	  deauthenticate: function () {
	    this.restoreAuthentication(null);
	  }
	};
	/**
	 * Provides a set of utilities for using Parse with Facebook.
	 *
	 * @class Parse.FacebookUtils
	 * @static
	 * @hideconstructor
	 */

	var FacebookUtils = {
	  /**
	   * Initializes Parse Facebook integration.  Call this function after you
	   * have loaded the Facebook Javascript SDK with the same parameters
	   * as you would pass to<code>
	   * <a href=
	   * "https://developers.facebook.com/docs/reference/javascript/FB.init/">
	   * FB.init()</a></code>.  Parse.FacebookUtils will invoke FB.init() for you
	   * with these arguments.
	   *
	   * @function init
	   * @name Parse.FacebookUtils.init
	   * @param {object} options Facebook options argument as described here:
	   *   <a href=
	   *   "https://developers.facebook.com/docs/reference/javascript/FB.init/">
	   *   FB.init()</a>. The status flag will be coerced to 'false' because it
	   *   interferes with Parse Facebook integration. Call FB.getLoginStatus()
	   *   explicitly if this behavior is required by your application.
	   */
	  init: function (options) {
	    if (typeof FB === 'undefined') {
	      throw new Error('The Facebook JavaScript SDK must be loaded before calling init.');
	    }

	    initOptions = {};

	    if (options) {
	      for (var key in options) {
	        initOptions[key] = options[key];
	      }
	    }

	    if (initOptions.status && typeof console !== 'undefined') {
	      var warn = console.warn || console.log || function () {}; // eslint-disable-line no-console


	      warn.call(console, 'The "status" flag passed into' + ' FB.init, when set to true, can interfere with Parse Facebook' + ' integration, so it has been suppressed. Please call' + ' FB.getLoginStatus() explicitly if you require this behavior.');
	    }

	    initOptions.status = false;
	    FB.init(initOptions);

	    _ParseUser.default._registerAuthenticationProvider(provider);

	    initialized = true;
	  },

	  /**
	   * Gets whether the user has their account linked to Facebook.
	   *
	   * @function isLinked
	   * @name Parse.FacebookUtils.isLinked
	   * @param {Parse.User} user User to check for a facebook link.
	   *     The user must be logged in on this device.
	   * @returns {boolean} <code>true</code> if the user has their account
	   *     linked to Facebook.
	   */
	  isLinked: function (user) {
	    return user._isLinked('facebook');
	  },

	  /**
	   * Logs in a user using Facebook. This method delegates to the Facebook
	   * SDK to authenticate the user, and then automatically logs in (or
	   * creates, in the case where it is a new user) a Parse.User.
	   *
	   * Standard API:
	   *
	   * <code>logIn(permission: string, authData: Object);</code>
	   *
	   * Advanced API: Used for handling your own oAuth tokens
	   * {@link https://docs.parseplatform.org/rest/guide/#linking-users}
	   *
	   * <code>logIn(authData: Object, options?: Object);</code>
	   *
	   * @function logIn
	   * @name Parse.FacebookUtils.logIn
	   * @param {(string | object)} permissions The permissions required for Facebook
	   *    log in.  This is a comma-separated string of permissions.
	   *    Alternatively, supply a Facebook authData object as described in our
	   *    REST API docs if you want to handle getting facebook auth tokens
	   *    yourself.
	   * @param {object} options MasterKey / SessionToken. Alternatively can be used for authData if permissions is a string
	   * @returns {Promise}
	   */
	  logIn: function (permissions, options) {
	    if (!permissions || typeof permissions === 'string') {
	      if (!initialized) {
	        throw new Error('You must initialize FacebookUtils before calling logIn.');
	      }

	      requestedPermissions = permissions;
	      return _ParseUser.default.logInWith('facebook', options);
	    }

	    return _ParseUser.default.logInWith('facebook', {
	      authData: permissions
	    }, options);
	  },

	  /**
	   * Links Facebook to an existing PFUser. This method delegates to the
	   * Facebook SDK to authenticate the user, and then automatically links
	   * the account to the Parse.User.
	   *
	   * Standard API:
	   *
	   * <code>link(user: Parse.User, permission: string, authData?: Object);</code>
	   *
	   * Advanced API: Used for handling your own oAuth tokens
	   * {@link https://docs.parseplatform.org/rest/guide/#linking-users}
	   *
	   * <code>link(user: Parse.User, authData: Object, options?: FullOptions);</code>
	   *
	   * @function link
	   * @name Parse.FacebookUtils.link
	   * @param {Parse.User} user User to link to Facebook. This must be the
	   *     current user.
	   * @param {(string | object)} permissions The permissions required for Facebook
	   *    log in.  This is a comma-separated string of permissions.
	   *    Alternatively, supply a Facebook authData object as described in our
	   *    REST API docs if you want to handle getting facebook auth tokens
	   *    yourself.
	   * @param {object} options MasterKey / SessionToken. Alternatively can be used for authData if permissions is a string
	   * @returns {Promise}
	   */
	  link: function (user, permissions, options) {
	    if (!permissions || typeof permissions === 'string') {
	      if (!initialized) {
	        throw new Error('You must initialize FacebookUtils before calling link.');
	      }

	      requestedPermissions = permissions;
	      return user.linkWith('facebook', options);
	    }

	    return user.linkWith('facebook', {
	      authData: permissions
	    }, options);
	  },

	  /**
	   * Unlinks the Parse.User from a Facebook account.
	   *
	   * @function unlink
	   * @name Parse.FacebookUtils.unlink
	   * @param {Parse.User} user User to unlink from Facebook. This must be the
	   *     current user.
	   * @param {object} options Standard options object with success and error
	   *    callbacks.
	   * @returns {Promise}
	   */
	  unlink: function (user, options) {
	    if (!initialized) {
	      throw new Error('You must initialize FacebookUtils before calling unlink.');
	    }

	    return user._unlinkFrom('facebook', options);
	  },
	  // Used for testing purposes
	  _getAuthProvider: function () {
	    return provider;
	  }
	};
	var _default = FacebookUtils;
	exports.default = _default;
	});

	var ParseInstallation = createCommonjsModule(function (module, exports) {







	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _createClass2 = interopRequireDefault(createClass);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _inherits2 = interopRequireDefault(inherits);

	var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

	var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf$6);

	var _ParseObject2 = interopRequireDefault(ParseObject_1);

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();

	  return function () {
	    var Super = (0, _getPrototypeOf2.default)(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
	      result = construct$4(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return (0, _possibleConstructorReturn2.default)(this, result);
	  };
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !construct$4) return false;
	  if (construct$4.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(construct$4(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	var Installation = /*#__PURE__*/function (_ParseObject) {
	  (0, _inherits2.default)(Installation, _ParseObject);

	  var _super = _createSuper(Installation);

	  function Installation(attributes
	  /*: ?AttributeMap*/
	  ) {
	    var _this;

	    (0, _classCallCheck2.default)(this, Installation);
	    _this = _super.call(this, '_Installation');

	    if (attributes && (0, _typeof2.default)(attributes) === 'object') {
	      if (!_this.set(attributes || {})) {
	        throw new Error("Can't create an invalid Installation");
	      }
	    }

	    return _this;
	  }

	  return (0, _createClass2.default)(Installation);
	}(_ParseObject2.default);

	exports.default = Installation;

	_ParseObject2.default.registerSubclass('_Installation', Installation);
	});

	// `Set` constructor
	// https://tc39.es/ecma262/#sec-set-objects
	collection('Set', function (init) {
	  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	var set$2 = path.Set;

	var set$3 = set$2;

	var set$4 = set$3;

	var TypeError$m = global$1.TypeError;

	// `Array.prototype.{ reduce, reduceRight }` methods implementation
	var createMethod$5 = function (IS_RIGHT) {
	  return function (that, callbackfn, argumentsLength, memo) {
	    aCallable(callbackfn);
	    var O = toObject(that);
	    var self = indexedObject(O);
	    var length = lengthOfArrayLike(O);
	    var index = IS_RIGHT ? length - 1 : 0;
	    var i = IS_RIGHT ? -1 : 1;
	    if (argumentsLength < 2) while (true) {
	      if (index in self) {
	        memo = self[index];
	        index += i;
	        break;
	      }
	      index += i;
	      if (IS_RIGHT ? index < 0 : length <= index) {
	        throw TypeError$m('Reduce of empty array with no initial value');
	      }
	    }
	    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }
	    return memo;
	  };
	};

	var arrayReduce = {
	  // `Array.prototype.reduce` method
	  // https://tc39.es/ecma262/#sec-array.prototype.reduce
	  left: createMethod$5(false),
	  // `Array.prototype.reduceRight` method
	  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
	  right: createMethod$5(true)
	};

	var $reduce = arrayReduce.left;




	var STRICT_METHOD$4 = arrayMethodIsStrict('reduce');
	// Chrome 80-82 has a critical bug
	// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
	var CHROME_BUG = !engineIsNode && engineV8Version > 79 && engineV8Version < 83;

	// `Array.prototype.reduce` method
	// https://tc39.es/ecma262/#sec-array.prototype.reduce
	_export({ target: 'Array', proto: true, forced: !STRICT_METHOD$4 || CHROME_BUG }, {
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    var length = arguments.length;
	    return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);
	  }
	});

	var reduce = entryVirtual('Array').reduce;

	var ArrayPrototype$f = Array.prototype;

	var reduce$1 = function (it) {
	  var own = it.reduce;
	  return it === ArrayPrototype$f || (objectIsPrototypeOf(ArrayPrototype$f, it) && own === ArrayPrototype$f.reduce) ? reduce : own;
	};

	var reduce$2 = reduce$1;

	var reduce$3 = reduce$2;

	var _map$1 = interopRequireDefault(map$9);

	var _promise$3 = interopRequireDefault(promise$3);

	var _reduce = interopRequireDefault(reduce$3);

	var _stringify$3 = interopRequireDefault(stringify$2);

	var _regenerator$1 = interopRequireDefault(regenerator);

	var _asyncToGenerator2$1 = interopRequireDefault(asyncToGenerator);



	var _Storage$2 = interopRequireDefault(Storage_1);

	function _createForOfIteratorHelper$1(o, allowArrayLike) {
	  var it = typeof symbol$6 !== "undefined" && getIteratorMethod$5(o) || o["@@iterator"];

	  if (!it) {
	    if (isArray$3(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function () {};

	      return {
	        s: F,
	        n: function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function (_e) {
	          throw _e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function () {
	      it = it.call(o);
	    },
	    n: function () {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function (_e2) {
	      didErr = true;
	      err = _e2;
	    },
	    f: function () {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	function _unsupportedIterableToArray$1(o, minLen) {
	  var _context7;

	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);

	  var n = slice$3(_context7 = Object.prototype.toString.call(o)).call(_context7, 8, -1);

	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return from$3(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
	}

	function _arrayLikeToArray$1(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	var LocalDatastoreController = {
	  fromPinWithName: function (name
	  /*: string*/
	  )
	  /*: Array<Object>*/
	  {
	    return (0, _asyncToGenerator2$1.default)( /*#__PURE__*/_regenerator$1.default.mark(function _callee() {
	      var values, objects;
	      return _regenerator$1.default.wrap(function (_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return _Storage$2.default.getItemAsync(name);

	            case 2:
	              values = _context.sent;

	              if (values) {
	                _context.next = 5;
	                break;
	              }

	              return _context.abrupt("return", []);

	            case 5:
	              objects = JSON.parse(values);
	              return _context.abrupt("return", objects);

	            case 7:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }))();
	  },
	  pinWithName: function (name
	  /*: string*/
	  , value
	  /*: any*/
	  ) {
	    var values = (0, _stringify$3.default)(value);
	    return _Storage$2.default.setItemAsync(name, values);
	  },
	  unPinWithName: function (name
	  /*: string*/
	  ) {
	    return _Storage$2.default.removeItemAsync(name);
	  },
	  getAllContents: function ()
	  /*: Object*/
	  {
	    return (0, _asyncToGenerator2$1.default)( /*#__PURE__*/_regenerator$1.default.mark(function _callee3() {
	      var keys;
	      return _regenerator$1.default.wrap(function (_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              _context3.next = 2;
	              return _Storage$2.default.getAllKeysAsync();

	            case 2:
	              keys = _context3.sent;
	              return _context3.abrupt("return", (0, _reduce.default)(keys).call(keys, /*#__PURE__*/function () {
	                var _ref = (0, _asyncToGenerator2$1.default)( /*#__PURE__*/_regenerator$1.default.mark(function _callee2(previousPromise, key) {
	                  var LDS, value;
	                  return _regenerator$1.default.wrap(function (_context2) {
	                    while (1) {
	                      switch (_context2.prev = _context2.next) {
	                        case 0:
	                          _context2.next = 2;
	                          return previousPromise;

	                        case 2:
	                          LDS = _context2.sent;

	                          if (!(0, LocalDatastoreUtils.isLocalDatastoreKey)(key)) {
	                            _context2.next = 8;
	                            break;
	                          }

	                          _context2.next = 6;
	                          return _Storage$2.default.getItemAsync(key);

	                        case 6:
	                          value = _context2.sent;

	                          try {
	                            LDS[key] = JSON.parse(value);
	                          } catch (error) {
	                            console.error('Error getAllContents: ', error);
	                          }

	                        case 8:
	                          return _context2.abrupt("return", LDS);

	                        case 9:
	                        case "end":
	                          return _context2.stop();
	                      }
	                    }
	                  }, _callee2);
	                }));

	                return function () {
	                  return _ref.apply(this, arguments);
	                };
	              }(), _promise$3.default.resolve({})));

	            case 4:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3);
	    }))();
	  },
	  // Used for testing
	  getRawStorage: function ()
	  /*: Object*/
	  {
	    return (0, _asyncToGenerator2$1.default)( /*#__PURE__*/_regenerator$1.default.mark(function _callee5() {
	      var keys;
	      return _regenerator$1.default.wrap(function (_context5) {
	        while (1) {
	          switch (_context5.prev = _context5.next) {
	            case 0:
	              _context5.next = 2;
	              return _Storage$2.default.getAllKeysAsync();

	            case 2:
	              keys = _context5.sent;
	              return _context5.abrupt("return", (0, _reduce.default)(keys).call(keys, /*#__PURE__*/function () {
	                var _ref2 = (0, _asyncToGenerator2$1.default)( /*#__PURE__*/_regenerator$1.default.mark(function _callee4(previousPromise, key) {
	                  var LDS, value;
	                  return _regenerator$1.default.wrap(function (_context4) {
	                    while (1) {
	                      switch (_context4.prev = _context4.next) {
	                        case 0:
	                          _context4.next = 2;
	                          return previousPromise;

	                        case 2:
	                          LDS = _context4.sent;
	                          _context4.next = 5;
	                          return _Storage$2.default.getItemAsync(key);

	                        case 5:
	                          value = _context4.sent;
	                          LDS[key] = value;
	                          return _context4.abrupt("return", LDS);

	                        case 8:
	                        case "end":
	                          return _context4.stop();
	                      }
	                    }
	                  }, _callee4);
	                }));

	                return function () {
	                  return _ref2.apply(this, arguments);
	                };
	              }(), _promise$3.default.resolve({})));

	            case 4:
	            case "end":
	              return _context5.stop();
	          }
	        }
	      }, _callee5);
	    }))();
	  },
	  clear: function ()
	  /*: Promise*/
	  {
	    var _this = this;

	    return (0, _asyncToGenerator2$1.default)( /*#__PURE__*/_regenerator$1.default.mark(function _callee6() {
	      var keys, toRemove, _iterator, _step, key, promises;

	      return _regenerator$1.default.wrap(function (_context6) {
	        while (1) {
	          switch (_context6.prev = _context6.next) {
	            case 0:
	              _context6.next = 2;
	              return _Storage$2.default.getAllKeysAsync();

	            case 2:
	              keys = _context6.sent;
	              toRemove = [];
	              _iterator = _createForOfIteratorHelper$1(keys);

	              try {
	                for (_iterator.s(); !(_step = _iterator.n()).done;) {
	                  key = _step.value;

	                  if ((0, LocalDatastoreUtils.isLocalDatastoreKey)(key)) {
	                    toRemove.push(key);
	                  }
	                }
	              } catch (err) {
	                _iterator.e(err);
	              } finally {
	                _iterator.f();
	              }

	              promises = (0, _map$1.default)(toRemove).call(toRemove, _this.unPinWithName);
	              return _context6.abrupt("return", _promise$3.default.all(promises));

	            case 8:
	            case "end":
	              return _context6.stop();
	          }
	        }
	      }, _callee6);
	    }))();
	  }
	};
	var LocalDatastoreController_1 = LocalDatastoreController;

	var _find$1 = interopRequireDefault(find$4);

	var _from = interopRequireDefault(from$3);

	var _map$2 = interopRequireDefault(map$9);

	var _isArray$1 = interopRequireDefault(isArray$3);

	var _keys2 = interopRequireDefault(keys$7);

	var _startsWith = interopRequireDefault(startsWith$3);

	var _keys3 = interopRequireDefault(keys$3);

	var _includes$1 = interopRequireDefault(includes$4);

	var _filter$1 = interopRequireDefault(filter$3);

	var _regenerator$2 = interopRequireDefault(regenerator);

	var _concat$2 = interopRequireDefault(concat$5);

	var _set = interopRequireDefault(set$4);

	var _toConsumableArray2$1 = interopRequireDefault(toConsumableArray);

	var _promise$4 = interopRequireDefault(promise$3);

	var _slicedToArray2$1 = interopRequireDefault(slicedToArray);

	var _asyncToGenerator2$2 = interopRequireDefault(asyncToGenerator);

	var _CoreManager$3 = interopRequireDefault(CoreManager);

	var _ParseQuery$1 = interopRequireDefault(ParseQuery_1);



	function _createForOfIteratorHelper$2(o, allowArrayLike) {
	  var it = typeof symbol$6 !== "undefined" && getIteratorMethod$5(o) || o["@@iterator"];

	  if (!it) {
	    if (isArray$3(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function () {};

	      return {
	        s: F,
	        n: function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function (_e) {
	          throw _e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function () {
	      it = it.call(o);
	    },
	    n: function () {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function (_e2) {
	      didErr = true;
	      err = _e2;
	    },
	    f: function () {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	function _unsupportedIterableToArray$2(o, minLen) {
	  var _context18;

	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);

	  var n = slice$3(_context18 = Object.prototype.toString.call(o)).call(_context18, 8, -1);

	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return from$3(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
	}

	function _arrayLikeToArray$2(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}
	/**
	 * Provides a local datastore which can be used to store and retrieve <code>Parse.Object</code>. <br />
	 * To enable this functionality, call <code>Parse.enableLocalDatastore()</code>.
	 *
	 * Pin object to add to local datastore
	 *
	 * <pre>await object.pin();</pre>
	 * <pre>await object.pinWithName('pinName');</pre>
	 *
	 * Query pinned objects
	 *
	 * <pre>query.fromLocalDatastore();</pre>
	 * <pre>query.fromPin();</pre>
	 * <pre>query.fromPinWithName();</pre>
	 *
	 * <pre>const localObjects = await query.find();</pre>
	 *
	 * @class Parse.LocalDatastore
	 * @static
	 */


	var LocalDatastore = {
	  isEnabled: false,
	  isSyncing: false,
	  fromPinWithName: function (name
	  /*: string*/
	  )
	  /*: Promise<Array<Object>>*/
	  {
	    var controller = _CoreManager$3.default.getLocalDatastoreController();

	    return controller.fromPinWithName(name);
	  },
	  pinWithName: function (name
	  /*: string*/
	  , value
	  /*: any*/
	  )
	  /*: Promise<void>*/
	  {
	    var controller = _CoreManager$3.default.getLocalDatastoreController();

	    return controller.pinWithName(name, value);
	  },
	  unPinWithName: function (name
	  /*: string*/
	  )
	  /*: Promise<void>*/
	  {
	    var controller = _CoreManager$3.default.getLocalDatastoreController();

	    return controller.unPinWithName(name);
	  },
	  _getAllContents: function ()
	  /*: Promise<Object>*/
	  {
	    var controller = _CoreManager$3.default.getLocalDatastoreController();

	    return controller.getAllContents();
	  },
	  // Use for testing
	  _getRawStorage: function ()
	  /*: Promise<Object>*/
	  {
	    var controller = _CoreManager$3.default.getLocalDatastoreController();

	    return controller.getRawStorage();
	  },
	  _clear: function ()
	  /*: Promise<void>*/
	  {
	    var controller = _CoreManager$3.default.getLocalDatastoreController();

	    return controller.clear();
	  },
	  // Pin the object and children recursively
	  // Saves the object and children key to Pin Name
	  _handlePinAllWithName: function (name
	  /*: string*/
	  , objects
	  /*: Array<ParseObject>*/
	  )
	  /*: Promise<void>*/
	  {
	    var _this = this;

	    return (0, _asyncToGenerator2$2.default)( /*#__PURE__*/_regenerator$2.default.mark(function _callee() {
	      var _context;

	      var pinName, toPinPromises, objectKeys, _iterator, _step, parent, children, parentKey, json, objectKey, fromPinPromise, _yield$Promise$all, _yield$Promise$all2, pinned, toPin;

	      return _regenerator$2.default.wrap(function (_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              pinName = _this.getPinName(name);
	              toPinPromises = [];
	              objectKeys = [];
	              _iterator = _createForOfIteratorHelper$2(objects);

	              try {
	                for (_iterator.s(); !(_step = _iterator.n()).done;) {
	                  parent = _step.value;
	                  children = _this._getChildren(parent);
	                  parentKey = _this.getKeyForObject(parent);
	                  json = parent._toFullJSON(undefined, true);

	                  if (parent._localId) {
	                    json._localId = parent._localId;
	                  }

	                  children[parentKey] = json;

	                  for (objectKey in children) {
	                    objectKeys.push(objectKey);
	                    toPinPromises.push(_this.pinWithName(objectKey, [children[objectKey]]));
	                  }
	                }
	              } catch (err) {
	                _iterator.e(err);
	              } finally {
	                _iterator.f();
	              }

	              fromPinPromise = _this.fromPinWithName(pinName);
	              _context2.next = 8;
	              return _promise$4.default.all([fromPinPromise, toPinPromises]);

	            case 8:
	              _yield$Promise$all = _context2.sent;
	              _yield$Promise$all2 = (0, _slicedToArray2$1.default)(_yield$Promise$all, 1);
	              pinned = _yield$Promise$all2[0];
	              toPin = (0, _toConsumableArray2$1.default)(new _set.default((0, _concat$2.default)(_context = []).call(_context, (0, _toConsumableArray2$1.default)(pinned || []), objectKeys)));
	              return _context2.abrupt("return", _this.pinWithName(pinName, toPin));

	            case 13:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee);
	    }))();
	  },
	  // Removes object and children keys from pin name
	  // Keeps the object and children pinned
	  _handleUnPinAllWithName: function (name
	  /*: string*/
	  , objects
	  /*: Array<ParseObject>*/
	  ) {
	    var _this2 = this;

	    return (0, _asyncToGenerator2$2.default)( /*#__PURE__*/_regenerator$2.default.mark(function _callee2() {
	      var localDatastore, pinName, promises, objectKeys, _iterator2, _step2, _objectKeys, _context3, parent, children, parentKey, pinned, _iterator3, _step3, objectKey, hasReference, key, pinnedObjects;

	      return _regenerator$2.default.wrap(function (_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              _context4.next = 2;
	              return _this2._getAllContents();

	            case 2:
	              localDatastore = _context4.sent;
	              pinName = _this2.getPinName(name);
	              promises = [];
	              objectKeys = [];
	              _iterator2 = _createForOfIteratorHelper$2(objects);

	              try {
	                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	                  parent = _step2.value;
	                  children = _this2._getChildren(parent);
	                  parentKey = _this2.getKeyForObject(parent);

	                  (_objectKeys = objectKeys).push.apply(_objectKeys, (0, _concat$2.default)(_context3 = [parentKey]).call(_context3, (0, _toConsumableArray2$1.default)((0, _keys3.default)(children))));
	                }
	              } catch (err) {
	                _iterator2.e(err);
	              } finally {
	                _iterator2.f();
	              }

	              objectKeys = (0, _toConsumableArray2$1.default)(new _set.default(objectKeys));
	              pinned = localDatastore[pinName] || [];
	              pinned = (0, _filter$1.default)(pinned).call(pinned, function (item) {
	                return !(0, _includes$1.default)(objectKeys).call(objectKeys, item);
	              });

	              if (pinned.length == 0) {
	                promises.push(_this2.unPinWithName(pinName));
	                delete localDatastore[pinName];
	              } else {
	                promises.push(_this2.pinWithName(pinName, pinned));
	                localDatastore[pinName] = pinned;
	              }

	              _iterator3 = _createForOfIteratorHelper$2(objectKeys);
	              _context4.prev = 13;

	              _iterator3.s();

	            case 15:
	              if ((_step3 = _iterator3.n()).done) {
	                _context4.next = 31;
	                break;
	              }

	              objectKey = _step3.value;
	              hasReference = false;
	              _context4.t0 = (0, _keys2.default)(_regenerator$2.default).call(_regenerator$2.default, localDatastore);

	            case 19:
	              if ((_context4.t1 = _context4.t0()).done) {
	                _context4.next = 28;
	                break;
	              }

	              key = _context4.t1.value;

	              if (!(key === LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, LocalDatastoreUtils.PIN_PREFIX))) {
	                _context4.next = 26;
	                break;
	              }

	              pinnedObjects = localDatastore[key] || [];

	              if (!(0, _includes$1.default)(pinnedObjects).call(pinnedObjects, objectKey)) {
	                _context4.next = 26;
	                break;
	              }

	              hasReference = true;
	              return _context4.abrupt("break", 28);

	            case 26:
	              _context4.next = 19;
	              break;

	            case 28:
	              if (!hasReference) {
	                promises.push(_this2.unPinWithName(objectKey));
	              }

	            case 29:
	              _context4.next = 15;
	              break;

	            case 31:
	              _context4.next = 36;
	              break;

	            case 33:
	              _context4.prev = 33;
	              _context4.t2 = _context4["catch"](13);

	              _iterator3.e(_context4.t2);

	            case 36:
	              _context4.prev = 36;

	              _iterator3.f();

	              return _context4.finish(36);

	            case 39:
	              return _context4.abrupt("return", _promise$4.default.all(promises));

	            case 40:
	            case "end":
	              return _context4.stop();
	          }
	        }
	      }, _callee2, null, [[13, 33, 36, 39]]);
	    }))();
	  },
	  // Retrieve all pointer fields from object recursively
	  _getChildren: function (object
	  /*: ParseObject*/
	  ) {
	    var encountered = {};

	    var json = object._toFullJSON(undefined, true);

	    for (var key in json) {
	      if (json[key] && json[key].__type && json[key].__type === 'Object') {
	        this._traverse(json[key], encountered);
	      }
	    }

	    return encountered;
	  },
	  _traverse: function (object
	  /*: any*/
	  , encountered
	  /*: any*/
	  ) {
	    if (!object.objectId) {
	      return;
	    } else {
	      var objectKey = this.getKeyForObject(object);

	      if (encountered[objectKey]) {
	        return;
	      }

	      encountered[objectKey] = object;
	    }

	    for (var key in object) {
	      var json = object[key];

	      if (!object[key]) {
	        json = object;
	      }

	      if (json.__type && json.__type === 'Object') {
	        this._traverse(json, encountered);
	      }
	    }
	  },
	  // Transform keys in pin name to objects
	  _serializeObjectsFromPinName: function (name
	  /*: string*/
	  ) {
	    var _this3 = this;

	    return (0, _asyncToGenerator2$2.default)( /*#__PURE__*/_regenerator$2.default.mark(function _callee3() {
	      var _context5, _concatInstanceProper, _context6;

	      var localDatastore, allObjects, key, pinName, pinned, promises, objects;
	      return _regenerator$2.default.wrap(function (_context7) {
	        while (1) {
	          switch (_context7.prev = _context7.next) {
	            case 0:
	              _context7.next = 2;
	              return _this3._getAllContents();

	            case 2:
	              localDatastore = _context7.sent;
	              allObjects = [];

	              for (key in localDatastore) {
	                if ((0, _startsWith.default)(key).call(key, LocalDatastoreUtils.OBJECT_PREFIX)) {
	                  allObjects.push(localDatastore[key][0]);
	                }
	              }

	              if (name) {
	                _context7.next = 7;
	                break;
	              }

	              return _context7.abrupt("return", allObjects);

	            case 7:
	              pinName = _this3.getPinName(name);
	              pinned = localDatastore[pinName];

	              if ((0, _isArray$1.default)(pinned)) {
	                _context7.next = 11;
	                break;
	              }

	              return _context7.abrupt("return", []);

	            case 11:
	              promises = (0, _map$2.default)(pinned).call(pinned, function (objectKey) {
	                return _this3.fromPinWithName(objectKey);
	              });
	              _context7.next = 14;
	              return _promise$4.default.all(promises);

	            case 14:
	              objects = _context7.sent;
	              objects = (_concatInstanceProper = (0, _concat$2.default)(_context5 = [])).call.apply(_concatInstanceProper, (0, _concat$2.default)(_context6 = [_context5]).call(_context6, (0, _toConsumableArray2$1.default)(objects)));
	              return _context7.abrupt("return", (0, _filter$1.default)(objects).call(objects, function (object) {
	                return object != null;
	              }));

	            case 17:
	            case "end":
	              return _context7.stop();
	          }
	        }
	      }, _callee3);
	    }))();
	  },
	  // Replaces object pointers with pinned pointers
	  // The object pointers may contain old data
	  // Uses Breadth First Search Algorithm
	  _serializeObject: function (objectKey
	  /*: string*/
	  , localDatastore
	  /*: any*/
	  ) {
	    var _this4 = this;

	    return (0, _asyncToGenerator2$2.default)( /*#__PURE__*/_regenerator$2.default.mark(function _callee4() {
	      var LDS, root, queue, meta, uniqueId, nodeId, subTreeRoot, field, value, key, pointer;
	      return _regenerator$2.default.wrap(function (_context8) {
	        while (1) {
	          switch (_context8.prev = _context8.next) {
	            case 0:
	              LDS = localDatastore;

	              if (LDS) {
	                _context8.next = 5;
	                break;
	              }

	              _context8.next = 4;
	              return _this4._getAllContents();

	            case 4:
	              LDS = _context8.sent;

	            case 5:
	              if (!(!LDS[objectKey] || LDS[objectKey].length === 0)) {
	                _context8.next = 7;
	                break;
	              }

	              return _context8.abrupt("return", null);

	            case 7:
	              root = LDS[objectKey][0];
	              queue = [];
	              meta = {};
	              uniqueId = 0;
	              meta[uniqueId] = root;
	              queue.push(uniqueId);

	              while (queue.length !== 0) {
	                nodeId = queue.shift();
	                subTreeRoot = meta[nodeId];

	                for (field in subTreeRoot) {
	                  value = subTreeRoot[field];

	                  if (value.__type && value.__type === 'Object') {
	                    key = _this4.getKeyForObject(value);

	                    if (LDS[key] && LDS[key].length > 0) {
	                      pointer = LDS[key][0];
	                      uniqueId++;
	                      meta[uniqueId] = pointer;
	                      subTreeRoot[field] = pointer;
	                      queue.push(uniqueId);
	                    }
	                  }
	                }
	              }

	              return _context8.abrupt("return", root);

	            case 15:
	            case "end":
	              return _context8.stop();
	          }
	        }
	      }, _callee4);
	    }))();
	  },
	  // Called when an object is save / fetched
	  // Update object pin value
	  _updateObjectIfPinned: function (object
	  /*: ParseObject*/
	  )
	  /*: Promise<void>*/
	  {
	    var _this5 = this;

	    return (0, _asyncToGenerator2$2.default)( /*#__PURE__*/_regenerator$2.default.mark(function _callee5() {
	      var objectKey, pinned;
	      return _regenerator$2.default.wrap(function (_context9) {
	        while (1) {
	          switch (_context9.prev = _context9.next) {
	            case 0:
	              if (_this5.isEnabled) {
	                _context9.next = 2;
	                break;
	              }

	              return _context9.abrupt("return");

	            case 2:
	              objectKey = _this5.getKeyForObject(object);
	              _context9.next = 5;
	              return _this5.fromPinWithName(objectKey);

	            case 5:
	              pinned = _context9.sent;

	              if (!(!pinned || pinned.length === 0)) {
	                _context9.next = 8;
	                break;
	              }

	              return _context9.abrupt("return");

	            case 8:
	              return _context9.abrupt("return", _this5.pinWithName(objectKey, [object._toFullJSON()]));

	            case 9:
	            case "end":
	              return _context9.stop();
	          }
	        }
	      }, _callee5);
	    }))();
	  },
	  // Called when object is destroyed
	  // Unpin object and remove all references from pin names
	  // TODO: Destroy children?
	  _destroyObjectIfPinned: function (object
	  /*: ParseObject*/
	  ) {
	    var _this6 = this;

	    return (0, _asyncToGenerator2$2.default)( /*#__PURE__*/_regenerator$2.default.mark(function _callee6() {
	      var localDatastore, objectKey, pin, promises, key, pinned;
	      return _regenerator$2.default.wrap(function (_context10) {
	        while (1) {
	          switch (_context10.prev = _context10.next) {
	            case 0:
	              if (_this6.isEnabled) {
	                _context10.next = 2;
	                break;
	              }

	              return _context10.abrupt("return");

	            case 2:
	              _context10.next = 4;
	              return _this6._getAllContents();

	            case 4:
	              localDatastore = _context10.sent;
	              objectKey = _this6.getKeyForObject(object);
	              pin = localDatastore[objectKey];

	              if (pin) {
	                _context10.next = 9;
	                break;
	              }

	              return _context10.abrupt("return");

	            case 9:
	              promises = [_this6.unPinWithName(objectKey)];
	              delete localDatastore[objectKey];

	              for (key in localDatastore) {
	                if (key === LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, LocalDatastoreUtils.PIN_PREFIX)) {
	                  pinned = localDatastore[key] || [];

	                  if ((0, _includes$1.default)(pinned).call(pinned, objectKey)) {
	                    pinned = (0, _filter$1.default)(pinned).call(pinned, function (item) {
	                      return item !== objectKey;
	                    });

	                    if (pinned.length == 0) {
	                      promises.push(_this6.unPinWithName(key));
	                      delete localDatastore[key];
	                    } else {
	                      promises.push(_this6.pinWithName(key, pinned));
	                      localDatastore[key] = pinned;
	                    }
	                  }
	                }
	              }

	              return _context10.abrupt("return", _promise$4.default.all(promises));

	            case 13:
	            case "end":
	              return _context10.stop();
	          }
	        }
	      }, _callee6);
	    }))();
	  },
	  // Update pin and references of the unsaved object
	  _updateLocalIdForObject: function (localId
	  /*: string*/
	  , object
	  /*: ParseObject*/
	  ) {
	    var _this7 = this;

	    return (0, _asyncToGenerator2$2.default)( /*#__PURE__*/_regenerator$2.default.mark(function _callee7() {
	      var _context11, _context12;

	      var localKey, objectKey, unsaved, promises, localDatastore, key, pinned;
	      return _regenerator$2.default.wrap(function (_context13) {
	        while (1) {
	          switch (_context13.prev = _context13.next) {
	            case 0:
	              if (_this7.isEnabled) {
	                _context13.next = 2;
	                break;
	              }

	              return _context13.abrupt("return");

	            case 2:
	              localKey = (0, _concat$2.default)(_context11 = (0, _concat$2.default)(_context12 = "".concat(LocalDatastoreUtils.OBJECT_PREFIX)).call(_context12, object.className, "_")).call(_context11, localId);
	              objectKey = _this7.getKeyForObject(object);
	              _context13.next = 6;
	              return _this7.fromPinWithName(localKey);

	            case 6:
	              unsaved = _context13.sent;

	              if (!(!unsaved || unsaved.length === 0)) {
	                _context13.next = 9;
	                break;
	              }

	              return _context13.abrupt("return");

	            case 9:
	              promises = [_this7.unPinWithName(localKey), _this7.pinWithName(objectKey, unsaved)];
	              _context13.next = 12;
	              return _this7._getAllContents();

	            case 12:
	              localDatastore = _context13.sent;

	              for (key in localDatastore) {
	                if (key === LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, LocalDatastoreUtils.PIN_PREFIX)) {
	                  pinned = localDatastore[key] || [];

	                  if ((0, _includes$1.default)(pinned).call(pinned, localKey)) {
	                    pinned = (0, _filter$1.default)(pinned).call(pinned, function (item) {
	                      return item !== localKey;
	                    });
	                    pinned.push(objectKey);
	                    promises.push(_this7.pinWithName(key, pinned));
	                    localDatastore[key] = pinned;
	                  }
	                }
	              }

	              return _context13.abrupt("return", _promise$4.default.all(promises));

	            case 15:
	            case "end":
	              return _context13.stop();
	          }
	        }
	      }, _callee7);
	    }))();
	  },

	  /**
	   * Updates Local Datastore from Server
	   *
	   * <pre>
	   * await Parse.LocalDatastore.updateFromServer();
	   * </pre>
	   *
	   * @function updateFromServer
	   * @name Parse.LocalDatastore.updateFromServer
	   * @static
	   */
	  updateFromServer: function () {
	    var _this8 = this;

	    return (0, _asyncToGenerator2$2.default)( /*#__PURE__*/_regenerator$2.default.mark(function _callee8() {
	      var _context14;

	      var localDatastore, keys, key, pointersHash, _i, _keys, _key, _key$split, _key$split2, className, objectId, queryPromises, responses, objects, pinPromises;

	      return _regenerator$2.default.wrap(function (_context15) {
	        while (1) {
	          switch (_context15.prev = _context15.next) {
	            case 0:
	              if (!(!_this8.checkIfEnabled() || _this8.isSyncing)) {
	                _context15.next = 2;
	                break;
	              }

	              return _context15.abrupt("return");

	            case 2:
	              _context15.next = 4;
	              return _this8._getAllContents();

	            case 4:
	              localDatastore = _context15.sent;
	              keys = [];

	              for (key in localDatastore) {
	                if ((0, _startsWith.default)(key).call(key, LocalDatastoreUtils.OBJECT_PREFIX)) {
	                  keys.push(key);
	                }
	              }

	              if (!(keys.length === 0)) {
	                _context15.next = 9;
	                break;
	              }

	              return _context15.abrupt("return");

	            case 9:
	              _this8.isSyncing = true;
	              pointersHash = {};
	              _i = 0, _keys = keys;

	            case 12:
	              if (!(_i < _keys.length)) {
	                _context15.next = 23;
	                break;
	              }

	              _key = _keys[_i]; // Ignore the OBJECT_PREFIX

	              _key$split = _key.split('_'), _key$split2 = (0, _slicedToArray2$1.default)(_key$split, 4), className = _key$split2[2], objectId = _key$split2[3]; // User key is split into [ 'Parse', 'LDS', '', 'User', 'objectId' ]

	              if (_key.split('_').length === 5 && _key.split('_')[3] === 'User') {
	                className = '_User';
	                objectId = _key.split('_')[4];
	              }

	              if (!(0, _startsWith.default)(objectId).call(objectId, 'local')) {
	                _context15.next = 18;
	                break;
	              }

	              return _context15.abrupt("continue", 20);

	            case 18:
	              if (!(className in pointersHash)) {
	                pointersHash[className] = new _set.default();
	              }

	              pointersHash[className].add(objectId);

	            case 20:
	              _i++;
	              _context15.next = 12;
	              break;

	            case 23:
	              queryPromises = (0, _map$2.default)(_context14 = (0, _keys3.default)(pointersHash)).call(_context14, function (className) {
	                var objectIds = (0, _from.default)(pointersHash[className]);
	                var query = new _ParseQuery$1.default(className);
	                query.limit(objectIds.length);

	                if (objectIds.length === 1) {
	                  query.equalTo('objectId', objectIds[0]);
	                } else {
	                  query.containedIn('objectId', objectIds);
	                }

	                return (0, _find$1.default)(query).call(query);
	              });
	              _context15.prev = 24;
	              _context15.next = 27;
	              return _promise$4.default.all(queryPromises);

	            case 27:
	              responses = _context15.sent;
	              objects = (0, _concat$2.default)([]).apply([], responses);
	              pinPromises = (0, _map$2.default)(objects).call(objects, function (object) {
	                var objectKey = _this8.getKeyForObject(object);

	                return _this8.pinWithName(objectKey, object._toFullJSON());
	              });
	              _context15.next = 32;
	              return _promise$4.default.all(pinPromises);

	            case 32:
	              _this8.isSyncing = false;
	              _context15.next = 39;
	              break;

	            case 35:
	              _context15.prev = 35;
	              _context15.t0 = _context15["catch"](24);
	              console.error('Error syncing LocalDatastore: ', _context15.t0);
	              _this8.isSyncing = false;

	            case 39:
	            case "end":
	              return _context15.stop();
	          }
	        }
	      }, _callee8, null, [[24, 35]]);
	    }))();
	  },
	  getKeyForObject: function (object
	  /*: any*/
	  ) {
	    var _context16, _context17;

	    var objectId = object.objectId || object._getId();

	    return (0, _concat$2.default)(_context16 = (0, _concat$2.default)(_context17 = "".concat(LocalDatastoreUtils.OBJECT_PREFIX)).call(_context17, object.className, "_")).call(_context16, objectId);
	  },
	  getPinName: function (pinName
	  /*: ?string*/
	  ) {
	    if (!pinName || pinName === LocalDatastoreUtils.DEFAULT_PIN) {
	      return LocalDatastoreUtils.DEFAULT_PIN;
	    }

	    return LocalDatastoreUtils.PIN_PREFIX + pinName;
	  },
	  checkIfEnabled: function () {
	    if (!this.isEnabled) {
	      console.error('Parse.enableLocalDatastore() must be called first');
	    }

	    return this.isEnabled;
	  }
	};
	var LocalDatastore_1 = LocalDatastore;

	_CoreManager$3.default.setLocalDatastoreController(LocalDatastoreController_1);

	_CoreManager$3.default.setLocalDatastore(LocalDatastore);

	var Push = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.getPushStatus = getPushStatus;
	exports.send = send;

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _CoreManager = interopRequireDefault(CoreManager);

	var _ParseQuery = interopRequireDefault(ParseQuery_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */

	/**
	 * Contains functions to deal with Push in Parse.
	 *
	 * @class Parse.Push
	 * @static
	 * @hideconstructor
	 */

	/**
	 * Sends a push notification.
	 * **Available in Cloud Code only.**
	 *
	 * See {@link https://docs.parseplatform.org/js/guide/#push-notifications Push Notification Guide}
	 *
	 * @function send
	 * @name Parse.Push.send
	 * @param {object} data -  The data of the push notification. Valid fields
	 * are:
	 *   <ol>
	 *     <li>channels - An Array of channels to push to.</li>
	 *     <li>push_time - A Date object for when to send the push.</li>
	 *     <li>expiration_time -  A Date object for when to expire
	 *         the push.</li>
	 *     <li>expiration_interval - The seconds from now to expire the push.</li>
	 *     <li>where - A Parse.Query over Parse.Installation that is used to match
	 *         a set of installations to push to.</li>
	 *     <li>data - The data to send as part of the push.</li>
	 *   <ol>
	 * @param {object} options Valid options
	 * are:<ul>
	 *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	 *     be used for this request.
	 * </ul>
	 * @returns {Promise} A promise that is fulfilled when the push request
	 *     completes.
	 */


	function send(data
	/*: PushData*/
	)
	/*: Promise*/
	{
	  var options
	  /*:: ?: FullOptions*/
	  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  if (data.where && data.where instanceof _ParseQuery.default) {
	    data.where = data.where.toJSON().where;
	  }

	  if (data.push_time && (0, _typeof2.default)(data.push_time) === 'object') {
	    data.push_time = data.push_time.toJSON();
	  }

	  if (data.expiration_time && (0, _typeof2.default)(data.expiration_time) === 'object') {
	    data.expiration_time = data.expiration_time.toJSON();
	  }

	  if (data.expiration_time && data.expiration_interval) {
	    throw new Error('expiration_time and expiration_interval cannot both be set.');
	  }

	  var pushOptions = {
	    useMasterKey: true
	  };

	  if (options.hasOwnProperty('useMasterKey')) {
	    pushOptions.useMasterKey = options.useMasterKey;
	  }

	  return _CoreManager.default.getPushController().send(data, pushOptions);
	}
	/**
	 * Gets push status by Id
	 *
	 * @function getPushStatus
	 * @name Parse.Push.getPushStatus
	 * @param {string} pushStatusId The Id of Push Status.
	 * @param {object} options Valid options
	 * are:<ul>
	 *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	 *     be used for this request.
	 * </ul>
	 * @returns {Parse.Object} Status of Push.
	 */


	function getPushStatus(pushStatusId
	/*: string*/
	)
	/*: Promise<string>*/
	{
	  var options
	  /*:: ?: FullOptions*/
	  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var pushOptions = {
	    useMasterKey: true
	  };

	  if (options.hasOwnProperty('useMasterKey')) {
	    pushOptions.useMasterKey = options.useMasterKey;
	  }

	  var query = new _ParseQuery.default('_PushStatus');
	  return query.get(pushStatusId, pushOptions);
	}

	var DefaultController = {
	  send: function (data
	  /*: PushData*/
	  , options
	  /*:: ?: FullOptions*/
	  ) {
	    return _CoreManager.default.getRESTController().request('POST', 'push', data, options);
	  }
	};

	_CoreManager.default.setPushController(DefaultController);
	});

	var ParseSchema_1 = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _indexOf = interopRequireDefault(indexOf$8);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _defineProperty2 = interopRequireDefault(defineProperty$b);

	var _CoreManager = interopRequireDefault(CoreManager);

	var _ParseObject = interopRequireDefault(ParseObject_1);

	var _ParseCLP = interopRequireDefault(ParseCLP_1);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */


	var FIELD_TYPES = ['String', 'Number', 'Boolean', 'Date', 'File', 'GeoPoint', 'Polygon', 'Array', 'Object', 'Pointer', 'Relation'];
	/*:: type FieldOptions = {
	  required: boolean,
	  defaultValue: mixed,
	};*/

	/**
	 * A Parse.Schema object is for handling schema data from Parse.
	 * <p>All the schemas methods require MasterKey.
	 *
	 * When adding fields, you may set required and default values. (Requires Parse Server 3.7.0+)
	 *
	 * <pre>
	 * const options = { required: true, defaultValue: 'hello world' };
	 * const schema = new Parse.Schema('MyClass');
	 * schema.addString('field', options);
	 * schema.addIndex('index_name', { 'field': 1 });
	 * schema.save();
	 * </pre>
	 * </p>
	 *
	 * @alias Parse.Schema
	 */

	var ParseSchema = /*#__PURE__*/function () {
	  /**
	   * @param {string} className Parse Class string.
	   */
	  function ParseSchema(className
	  /*: string*/
	  ) {
	    (0, _classCallCheck2.default)(this, ParseSchema);
	    (0, _defineProperty2.default)(this, "className", void 0);
	    (0, _defineProperty2.default)(this, "_fields", void 0);
	    (0, _defineProperty2.default)(this, "_indexes", void 0);
	    (0, _defineProperty2.default)(this, "_clp", void 0);

	    if (typeof className === 'string') {
	      if (className === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {
	        this.className = '_User';
	      } else {
	        this.className = className;
	      }
	    }

	    this._fields = {};
	    this._indexes = {};
	  }
	  /**
	   * Static method to get all schemas
	   *
	   * @returns {Promise} A promise that is resolved with the result when
	   * the query completes.
	   */


	  (0, _createClass2.default)(ParseSchema, [{
	    key: "get",
	    value:
	    /**
	     * Get the Schema from Parse
	     *
	     * @returns {Promise} A promise that is resolved with the result when
	     * the query completes.
	     */
	    function () {
	      this.assertClassName();

	      var controller = _CoreManager.default.getSchemaController();

	      return controller.get(this.className).then(function (response) {
	        if (!response) {
	          throw new Error('Schema not found.');
	        }

	        return response;
	      });
	    }
	    /**
	     * Create a new Schema on Parse
	     *
	     * @returns {Promise} A promise that is resolved with the result when
	     * the query completes.
	     */

	  }, {
	    key: "save",
	    value: function () {
	      this.assertClassName();

	      var controller = _CoreManager.default.getSchemaController();

	      var params = {
	        className: this.className,
	        fields: this._fields,
	        indexes: this._indexes,
	        classLevelPermissions: this._clp
	      };
	      return controller.create(this.className, params);
	    }
	    /**
	     * Update a Schema on Parse
	     *
	     * @returns {Promise} A promise that is resolved with the result when
	     * the query completes.
	     */

	  }, {
	    key: "update",
	    value: function () {
	      this.assertClassName();

	      var controller = _CoreManager.default.getSchemaController();

	      var params = {
	        className: this.className,
	        fields: this._fields,
	        indexes: this._indexes,
	        classLevelPermissions: this._clp
	      };
	      this._fields = {};
	      this._indexes = {};
	      return controller.update(this.className, params);
	    }
	    /**
	     * Removing a Schema from Parse
	     * Can only be used on Schema without objects
	     *
	     * @returns {Promise} A promise that is resolved with the result when
	     * the query completes.
	     */

	  }, {
	    key: "delete",
	    value: function () {
	      this.assertClassName();

	      var controller = _CoreManager.default.getSchemaController();

	      return controller.delete(this.className);
	    }
	    /**
	     * Removes all objects from a Schema (class) in Parse.
	     * EXERCISE CAUTION, running this will delete all objects for this schema and cannot be reversed
	     *
	     * @returns {Promise} A promise that is resolved with the result when
	     * the query completes.
	     */

	  }, {
	    key: "purge",
	    value: function () {
	      this.assertClassName();

	      var controller = _CoreManager.default.getSchemaController();

	      return controller.purge(this.className);
	    }
	    /**
	     * Assert if ClassName has been filled
	     *
	     * @private
	     */

	  }, {
	    key: "assertClassName",
	    value: function () {
	      if (!this.className) {
	        throw new Error('You must set a Class Name before making any request.');
	      }
	    }
	    /**
	     * Sets Class Level Permissions when creating / updating a Schema.
	     * EXERCISE CAUTION, running this may override CLP for this schema and cannot be reversed
	     *
	     * @param {object | Parse.CLP} clp Class Level Permissions
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "setCLP",
	    value: function (clp
	    /*: PermissionsMap | ParseCLP*/
	    ) {
	      if (clp instanceof _ParseCLP.default) {
	        this._clp = clp.toJSON();
	      } else {
	        this._clp = clp;
	      }

	      return this;
	    }
	    /**
	     * Adding a Field to Create / Update a Schema
	     *
	     * @param {string} name Name of the field that will be created on Parse
	     * @param {string} type Can be a (String|Number|Boolean|Date|Parse.File|Parse.GeoPoint|Array|Object|Pointer|Parse.Relation)
	     * @param {object} options
	     * Valid options are:<ul>
	     *   <li>required: If field is not set, save operation fails (Requires Parse Server 3.7.0+)
	     *   <li>defaultValue: If field is not set, a default value is selected (Requires Parse Server 3.7.0+)
	     *   <li>targetClass: Required if type is Pointer or Parse.Relation
	     * </ul>
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "addField",
	    value: function (name
	    /*: string*/
	    , type
	    /*: string*/
	    ) {
	      var options
	      /*: FieldOptions*/
	      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      type = type || 'String';

	      if (!name) {
	        throw new Error('field name may not be null.');
	      }

	      if ((0, _indexOf.default)(FIELD_TYPES).call(FIELD_TYPES, type) === -1) {
	        throw new Error("".concat(type, " is not a valid type."));
	      }

	      if (type === 'Pointer') {
	        return this.addPointer(name, options.targetClass, options);
	      }

	      if (type === 'Relation') {
	        return this.addRelation(name, options.targetClass, options);
	      }

	      var fieldOptions = {
	        type: type
	      };

	      if (typeof options.required === 'boolean') {
	        fieldOptions.required = options.required;
	      }

	      if (options.defaultValue !== undefined) {
	        fieldOptions.defaultValue = options.defaultValue;
	      }

	      this._fields[name] = fieldOptions;
	      return this;
	    }
	    /**
	     * Adding an Index to Create / Update a Schema
	     *
	     * @param {string} name Name of the index
	     * @param {object} index { field: value }
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     *
	     * <pre>
	     * schema.addIndex('index_name', { 'field': 1 });
	     * </pre>
	     */

	  }, {
	    key: "addIndex",
	    value: function (name
	    /*: string*/
	    , index
	    /*: any*/
	    ) {
	      if (!name) {
	        throw new Error('index name may not be null.');
	      }

	      if (!index) {
	        throw new Error('index may not be null.');
	      }

	      this._indexes[name] = index;
	      return this;
	    }
	    /**
	     * Adding String Field
	     *
	     * @param {string} name Name of the field that will be created on Parse
	     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "addString",
	    value: function (name
	    /*: string*/
	    , options
	    /*: FieldOptions*/
	    ) {
	      return this.addField(name, 'String', options);
	    }
	    /**
	     * Adding Number Field
	     *
	     * @param {string} name Name of the field that will be created on Parse
	     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "addNumber",
	    value: function (name
	    /*: string*/
	    , options
	    /*: FieldOptions*/
	    ) {
	      return this.addField(name, 'Number', options);
	    }
	    /**
	     * Adding Boolean Field
	     *
	     * @param {string} name Name of the field that will be created on Parse
	     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "addBoolean",
	    value: function (name
	    /*: string*/
	    , options
	    /*: FieldOptions*/
	    ) {
	      return this.addField(name, 'Boolean', options);
	    }
	    /**
	     * Adding Date Field
	     *
	     * @param {string} name Name of the field that will be created on Parse
	     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "addDate",
	    value: function (name
	    /*: string*/
	    , options
	    /*: FieldOptions*/
	    ) {
	      if (options && options.defaultValue) {
	        options.defaultValue = {
	          __type: 'Date',
	          iso: new Date(options.defaultValue)
	        };
	      }

	      return this.addField(name, 'Date', options);
	    }
	    /**
	     * Adding File Field
	     *
	     * @param {string} name Name of the field that will be created on Parse
	     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "addFile",
	    value: function (name
	    /*: string*/
	    , options
	    /*: FieldOptions*/
	    ) {
	      return this.addField(name, 'File', options);
	    }
	    /**
	     * Adding GeoPoint Field
	     *
	     * @param {string} name Name of the field that will be created on Parse
	     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "addGeoPoint",
	    value: function (name
	    /*: string*/
	    , options
	    /*: FieldOptions*/
	    ) {
	      return this.addField(name, 'GeoPoint', options);
	    }
	    /**
	     * Adding Polygon Field
	     *
	     * @param {string} name Name of the field that will be created on Parse
	     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "addPolygon",
	    value: function (name
	    /*: string*/
	    , options
	    /*: FieldOptions*/
	    ) {
	      return this.addField(name, 'Polygon', options);
	    }
	    /**
	     * Adding Array Field
	     *
	     * @param {string} name Name of the field that will be created on Parse
	     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "addArray",
	    value: function (name
	    /*: string*/
	    , options
	    /*: FieldOptions*/
	    ) {
	      return this.addField(name, 'Array', options);
	    }
	    /**
	     * Adding Object Field
	     *
	     * @param {string} name Name of the field that will be created on Parse
	     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "addObject",
	    value: function (name
	    /*: string*/
	    , options
	    /*: FieldOptions*/
	    ) {
	      return this.addField(name, 'Object', options);
	    }
	    /**
	     * Adding Pointer Field
	     *
	     * @param {string} name Name of the field that will be created on Parse
	     * @param {string} targetClass Name of the target Pointer Class
	     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "addPointer",
	    value: function (name
	    /*: string*/
	    , targetClass
	    /*: string*/
	    ) {
	      var options
	      /*: FieldOptions*/
	      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	      if (!name) {
	        throw new Error('field name may not be null.');
	      }

	      if (!targetClass) {
	        throw new Error('You need to set the targetClass of the Pointer.');
	      }

	      var fieldOptions = {
	        type: 'Pointer',
	        targetClass: targetClass
	      };

	      if (typeof options.required === 'boolean') {
	        fieldOptions.required = options.required;
	      }

	      if (options.defaultValue !== undefined) {
	        fieldOptions.defaultValue = options.defaultValue;

	        if (options.defaultValue instanceof _ParseObject.default) {
	          fieldOptions.defaultValue = options.defaultValue.toPointer();
	        }
	      }

	      this._fields[name] = fieldOptions;
	      return this;
	    }
	    /**
	     * Adding Relation Field
	     *
	     * @param {string} name Name of the field that will be created on Parse
	     * @param {string} targetClass Name of the target Pointer Class
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "addRelation",
	    value: function (name
	    /*: string*/
	    , targetClass
	    /*: string*/
	    ) {
	      if (!name) {
	        throw new Error('field name may not be null.');
	      }

	      if (!targetClass) {
	        throw new Error('You need to set the targetClass of the Relation.');
	      }

	      this._fields[name] = {
	        type: 'Relation',
	        targetClass: targetClass
	      };
	      return this;
	    }
	    /**
	     * Deleting a Field to Update on a Schema
	     *
	     * @param {string} name Name of the field
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "deleteField",
	    value: function (name
	    /*: string*/
	    ) {
	      this._fields[name] = {
	        __op: 'Delete'
	      };
	      return this;
	    }
	    /**
	     * Deleting an Index to Update on a Schema
	     *
	     * @param {string} name Name of the field
	     * @returns {Parse.Schema} Returns the schema, so you can chain this call.
	     */

	  }, {
	    key: "deleteIndex",
	    value: function (name
	    /*: string*/
	    ) {
	      this._indexes[name] = {
	        __op: 'Delete'
	      };
	      return this;
	    }
	  }], [{
	    key: "all",
	    value: function () {
	      var controller = _CoreManager.default.getSchemaController();

	      return controller.get('').then(function (response) {
	        if (response.results.length === 0) {
	          throw new Error('Schema not found.');
	        }

	        return response.results;
	      });
	    }
	  }]);
	  return ParseSchema;
	}();

	var DefaultController = {
	  send: function (className
	  /*: string*/
	  , method
	  /*: string*/
	  )
	  /*: Promise*/
	  {
	    var params
	    /*: any*/
	    = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    var RESTController = _CoreManager.default.getRESTController();

	    return RESTController.request(method, "schemas/".concat(className), params, {
	      useMasterKey: true
	    });
	  },
	  get: function (className
	  /*: string*/
	  )
	  /*: Promise*/
	  {
	    return this.send(className, 'GET');
	  },
	  create: function (className
	  /*: string*/
	  , params
	  /*: any*/
	  )
	  /*: Promise*/
	  {
	    return this.send(className, 'POST', params);
	  },
	  update: function (className
	  /*: string*/
	  , params
	  /*: any*/
	  )
	  /*: Promise*/
	  {
	    return this.send(className, 'PUT', params);
	  },
	  delete: function (className
	  /*: string*/
	  )
	  /*: Promise*/
	  {
	    return this.send(className, 'DELETE');
	  },
	  purge: function (className
	  /*: string*/
	  )
	  /*: Promise*/
	  {
	    var RESTController = _CoreManager.default.getRESTController();

	    return RESTController.request('DELETE', "purge/".concat(className), {}, {
	      useMasterKey: true
	    });
	  }
	};

	_CoreManager.default.setSchemaController(DefaultController);

	var _default = ParseSchema;
	exports.default = _default;
	});

	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * This is a simple wrapper to unify EventEmitter implementations across platforms.
	 */

	var EventEmitter_1 = require$$0__default['default'].EventEmitter;

	var bind$a = bind$5;

	var values = entryVirtual('Array').values;

	var values$1 = values;

	var ArrayPrototype$g = Array.prototype;

	var DOMIterables$3 = {
	  DOMTokenList: true,
	  NodeList: true
	};

	var values$2 = function (it) {
	  var own = it.values;
	  return it === ArrayPrototype$g || (objectIsPrototypeOf(ArrayPrototype$g, it) && own === ArrayPrototype$g.values)
	    || hasOwnProperty_1(DOMIterables$3, classof(it)) ? values$1 : own;
	};

	var values$3 = values$2;

	var LiveQuerySubscription = createCommonjsModule(function (module, exports) {







	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _inherits2 = interopRequireDefault(inherits);

	var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

	var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf$6);

	var _EventEmitter2 = interopRequireDefault(EventEmitter_1);

	var _CoreManager = interopRequireDefault(CoreManager);



	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();

	  return function () {
	    var Super = (0, _getPrototypeOf2.default)(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
	      result = construct$4(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return (0, _possibleConstructorReturn2.default)(this, result);
	  };
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !construct$4) return false;
	  if (construct$4.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(construct$4(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}
	/**
	 * Creates a new LiveQuery Subscription.
	 * Extends events.EventEmitter
	 * <a href="https://nodejs.org/api/events.html#events_class_eventemitter">cloud functions</a>.
	 *
	 * <p>Response Object - Contains data from the client that made the request
	 * <ul>
	 * <li>clientId</li>
	 * <li>installationId - requires Parse Server 4.0.0+</li>
	 * </ul>
	 * </p>
	 *
	 * <p>Open Event - When you call query.subscribe(), we send a subscribe request to
	 * the LiveQuery server, when we get the confirmation from the LiveQuery server,
	 * this event will be emitted. When the client loses WebSocket connection to the
	 * LiveQuery server, we will try to auto reconnect the LiveQuery server. If we
	 * reconnect the LiveQuery server and successfully resubscribe the ParseQuery,
	 * you'll also get this event.
	 *
	 * <pre>
	 * subscription.on('open', (response) => {
	 *
	 * });</pre></p>
	 *
	 * <p>Create Event - When a new ParseObject is created and it fulfills the ParseQuery you subscribe,
	 * you'll get this event. The object is the ParseObject which is created.
	 *
	 * <pre>
	 * subscription.on('create', (object, response) => {
	 *
	 * });</pre></p>
	 *
	 * <p>Update Event - When an existing ParseObject (original) which fulfills the ParseQuery you subscribe
	 * is updated (The ParseObject fulfills the ParseQuery before and after changes),
	 * you'll get this event. The object is the ParseObject which is updated.
	 * Its content is the latest value of the ParseObject.
	 *
	 * Parse-Server 3.1.3+ Required for original object parameter
	 *
	 * <pre>
	 * subscription.on('update', (object, original, response) => {
	 *
	 * });</pre></p>
	 *
	 * <p>Enter Event - When an existing ParseObject's (original) old value doesn't fulfill the ParseQuery
	 * but its new value fulfills the ParseQuery, you'll get this event. The object is the
	 * ParseObject which enters the ParseQuery. Its content is the latest value of the ParseObject.
	 *
	 * Parse-Server 3.1.3+ Required for original object parameter
	 *
	 * <pre>
	 * subscription.on('enter', (object, original, response) => {
	 *
	 * });</pre></p>
	 *
	 *
	 * <p>Update Event - When an existing ParseObject's old value fulfills the ParseQuery but its new value
	 * doesn't fulfill the ParseQuery, you'll get this event. The object is the ParseObject
	 * which leaves the ParseQuery. Its content is the latest value of the ParseObject.
	 *
	 * <pre>
	 * subscription.on('leave', (object, response) => {
	 *
	 * });</pre></p>
	 *
	 *
	 * <p>Delete Event - When an existing ParseObject which fulfills the ParseQuery is deleted, you'll
	 * get this event. The object is the ParseObject which is deleted.
	 *
	 * <pre>
	 * subscription.on('delete', (object, response) => {
	 *
	 * });</pre></p>
	 *
	 *
	 * <p>Close Event - When the client loses the WebSocket connection to the LiveQuery
	 * server and we stop receiving events, you'll get this event.
	 *
	 * <pre>
	 * subscription.on('close', () => {
	 *
	 * });</pre></p>
	 *
	 * @alias Parse.LiveQuerySubscription
	 */


	var Subscription = /*#__PURE__*/function (_EventEmitter) {
	  (0, _inherits2.default)(Subscription, _EventEmitter);

	  var _super = _createSuper(Subscription);
	  /*
	   * @param {string} id - subscription id
	   * @param {string} query - query to subscribe to
	   * @param {string} sessionToken - optional session token
	   */


	  function Subscription(id, query, sessionToken) {
	    var _this;

	    (0, _classCallCheck2.default)(this, Subscription);
	    _this = _super.call(this);
	    _this.id = id;
	    _this.query = query;
	    _this.sessionToken = sessionToken;
	    _this.subscribePromise = (0, promiseUtils.resolvingPromise)();
	    _this.subscribed = false; // adding listener so process does not crash
	    // best practice is for developer to register their own listener

	    _this.on('error', function () {});

	    return _this;
	  }
	  /**
	   * Close the subscription
	   *
	   * @returns {Promise}
	   */


	  (0, _createClass2.default)(Subscription, [{
	    key: "unsubscribe",
	    value: function ()
	    /*: Promise*/
	    {
	      var _this2 = this;

	      return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient().then(function (liveQueryClient) {
	        liveQueryClient.unsubscribe(_this2);

	        _this2.emit('close');
	      });
	    }
	  }]);
	  return Subscription;
	}(_EventEmitter2.default);

	var _default = Subscription;
	exports.default = _default;
	});

	var LiveQueryClient_1 = createCommonjsModule(function (module, exports) {

















	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _typeof2 = interopRequireDefault(_typeof_1);

	var _bind = interopRequireDefault(bind$a);

	var _setTimeout2 = interopRequireDefault(setTimeout$3);

	var _values = interopRequireDefault(values$3);

	var _forEach = interopRequireDefault(forEach$4);

	var _stringify = interopRequireDefault(stringify$2);

	var _keys = interopRequireDefault(keys$7);

	var _map = interopRequireDefault(map$a);

	var _indexOf = interopRequireDefault(indexOf$8);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _assertThisInitialized2 = interopRequireDefault(assertThisInitialized);

	var _inherits2 = interopRequireDefault(inherits);

	var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

	var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf$6);

	var _defineProperty2 = interopRequireDefault(defineProperty$b);

	var _CoreManager = interopRequireDefault(CoreManager);

	var _EventEmitter2 = interopRequireDefault(EventEmitter_1);

	var _ParseObject = interopRequireDefault(ParseObject_1);

	var _LiveQuerySubscription = interopRequireDefault(LiveQuerySubscription);



	function _createForOfIteratorHelper(o, allowArrayLike) {
	  var it = typeof symbol$6 !== "undefined" && getIteratorMethod$5(o) || o["@@iterator"];

	  if (!it) {
	    if (isArray$3(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function () {};

	      return {
	        s: F,
	        n: function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function (_e) {
	          throw _e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function () {
	      it = it.call(o);
	    },
	    n: function () {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function (_e2) {
	      didErr = true;
	      err = _e2;
	    },
	    f: function () {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	function _unsupportedIterableToArray(o, minLen) {
	  var _context6;

	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);

	  var n = slice$3(_context6 = Object.prototype.toString.call(o)).call(_context6, 8, -1);

	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return from$3(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();

	  return function () {
	    var Super = (0, _getPrototypeOf2.default)(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
	      result = construct$4(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return (0, _possibleConstructorReturn2.default)(this, result);
	  };
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !construct$4) return false;
	  if (construct$4.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(construct$4(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	} // The LiveQuery client inner state


	var CLIENT_STATE = {
	  INITIALIZED: 'initialized',
	  CONNECTING: 'connecting',
	  CONNECTED: 'connected',
	  CLOSED: 'closed',
	  RECONNECTING: 'reconnecting',
	  DISCONNECTED: 'disconnected'
	}; // The event type the LiveQuery client should sent to server

	var OP_TYPES = {
	  CONNECT: 'connect',
	  SUBSCRIBE: 'subscribe',
	  UNSUBSCRIBE: 'unsubscribe',
	  ERROR: 'error'
	}; // The event we get back from LiveQuery server

	var OP_EVENTS = {
	  CONNECTED: 'connected',
	  SUBSCRIBED: 'subscribed',
	  UNSUBSCRIBED: 'unsubscribed',
	  ERROR: 'error',
	  CREATE: 'create',
	  UPDATE: 'update',
	  ENTER: 'enter',
	  LEAVE: 'leave',
	  DELETE: 'delete'
	}; // The event the LiveQuery client should emit

	var CLIENT_EMMITER_TYPES = {
	  CLOSE: 'close',
	  ERROR: 'error',
	  OPEN: 'open'
	}; // The event the LiveQuery subscription should emit

	var SUBSCRIPTION_EMMITER_TYPES = {
	  OPEN: 'open',
	  CLOSE: 'close',
	  ERROR: 'error',
	  CREATE: 'create',
	  UPDATE: 'update',
	  ENTER: 'enter',
	  LEAVE: 'leave',
	  DELETE: 'delete'
	};

	var generateInterval = function (k) {
	  return Math.random() * Math.min(30, Math.pow(2, k) - 1) * 1000;
	};
	/**
	 * Creates a new LiveQueryClient.
	 * Extends events.EventEmitter
	 * <a href="https://nodejs.org/api/events.html#events_class_eventemitter">cloud functions</a>.
	 *
	 * A wrapper of a standard WebSocket client. We add several useful methods to
	 * help you connect/disconnect to LiveQueryServer, subscribe/unsubscribe a ParseQuery easily.
	 *
	 * javascriptKey and masterKey are used for verifying the LiveQueryClient when it tries
	 * to connect to the LiveQuery server
	 *
	 * We expose three events to help you monitor the status of the LiveQueryClient.
	 *
	 * <pre>
	 * let Parse = require('parse/node');
	 * let LiveQueryClient = Parse.LiveQueryClient;
	 * let client = new LiveQueryClient({
	 *   applicationId: '',
	 *   serverURL: '',
	 *   javascriptKey: '',
	 *   masterKey: ''
	 *  });
	 * </pre>
	 *
	 * Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.
	 * <pre>
	 * client.on('open', () => {
	 *
	 * });</pre>
	 *
	 * Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.
	 * <pre>
	 * client.on('close', () => {
	 *
	 * });</pre>
	 *
	 * Error - When some network error or LiveQuery server error happens, you'll get this event.
	 * <pre>
	 * client.on('error', (error) => {
	 *
	 * });</pre>
	 *
	 * @alias Parse.LiveQueryClient
	 */


	var LiveQueryClient = /*#__PURE__*/function (_EventEmitter) {
	  (0, _inherits2.default)(LiveQueryClient, _EventEmitter);

	  var _super = _createSuper(LiveQueryClient);
	  /**
	   * @param {object} options
	   * @param {string} options.applicationId - applicationId of your Parse app
	   * @param {string} options.serverURL - <b>the URL of your LiveQuery server</b>
	   * @param {string} options.javascriptKey (optional)
	   * @param {string} options.masterKey (optional) Your Parse Master Key. (Node.js only!)
	   * @param {string} options.sessionToken (optional)
	   * @param {string} options.installationId (optional)
	   */


	  function LiveQueryClient(_ref) {
	    var _this;

	    var applicationId = _ref.applicationId,
	        serverURL = _ref.serverURL,
	        javascriptKey = _ref.javascriptKey,
	        masterKey = _ref.masterKey,
	        sessionToken = _ref.sessionToken,
	        installationId = _ref.installationId;
	    (0, _classCallCheck2.default)(this, LiveQueryClient);
	    _this = _super.call(this);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "attempts", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "id", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "requestId", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "applicationId", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "serverURL", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "javascriptKey", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "masterKey", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sessionToken", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "installationId", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "additionalProperties", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "connectPromise", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "subscriptions", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "socket", void 0);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", void 0);

	    if (!serverURL || (0, _indexOf.default)(serverURL).call(serverURL, 'ws') !== 0) {
	      throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');
	    }

	    _this.reconnectHandle = null;
	    _this.attempts = 1;
	    _this.id = 0;
	    _this.requestId = 1;
	    _this.serverURL = serverURL;
	    _this.applicationId = applicationId;
	    _this.javascriptKey = javascriptKey || undefined;
	    _this.masterKey = masterKey || undefined;
	    _this.sessionToken = sessionToken || undefined;
	    _this.installationId = installationId || undefined;
	    _this.additionalProperties = true;
	    _this.connectPromise = (0, promiseUtils.resolvingPromise)();
	    _this.subscriptions = new _map.default();
	    _this.state = CLIENT_STATE.INITIALIZED; // adding listener so process does not crash
	    // best practice is for developer to register their own listener

	    _this.on('error', function () {});

	    return _this;
	  }

	  (0, _createClass2.default)(LiveQueryClient, [{
	    key: "shouldOpen",
	    value: function ()
	    /*: any*/
	    {
	      return this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED;
	    }
	    /**
	     * Subscribes to a ParseQuery
	     *
	     * If you provide the sessionToken, when the LiveQuery server gets ParseObject's
	     * updates from parse server, it'll try to check whether the sessionToken fulfills
	     * the ParseObject's ACL. The LiveQuery server will only send updates to clients whose
	     * sessionToken is fit for the ParseObject's ACL. You can check the LiveQuery protocol
	     * <a href="https://github.com/parse-community/parse-server/wiki/Parse-LiveQuery-Protocol-Specification">here</a> for more details. The subscription you get is the same subscription you get
	     * from our Standard API.
	     *
	     * @param {object} query - the ParseQuery you want to subscribe to
	     * @param {string} sessionToken (optional)
	     * @returns {LiveQuerySubscription} subscription
	     */

	  }, {
	    key: "subscribe",
	    value: function (query
	    /*: Object*/
	    , sessionToken
	    /*: ?string*/
	    )
	    /*: LiveQuerySubscription*/
	    {
	      var _this2 = this;

	      if (!query) {
	        return;
	      }

	      var className = query.className;
	      var queryJSON = query.toJSON();
	      var where = queryJSON.where;
	      var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(',') : undefined;
	      var subscribeRequest = {
	        op: OP_TYPES.SUBSCRIBE,
	        requestId: this.requestId,
	        query: {
	          className: className,
	          where: where,
	          fields: fields
	        }
	      };

	      if (sessionToken) {
	        subscribeRequest.sessionToken = sessionToken;
	      }

	      var subscription = new _LiveQuerySubscription.default(this.requestId, query, sessionToken);
	      this.subscriptions.set(this.requestId, subscription);
	      this.requestId += 1;
	      this.connectPromise.then(function () {
	        _this2.socket.send((0, _stringify.default)(subscribeRequest));
	      });
	      return subscription;
	    }
	    /**
	     * After calling unsubscribe you'll stop receiving events from the subscription object.
	     *
	     * @param {object} subscription - subscription you would like to unsubscribe from.
	     */

	  }, {
	    key: "unsubscribe",
	    value: function (subscription
	    /*: Object*/
	    ) {
	      var _this3 = this;

	      if (!subscription) {
	        return;
	      }

	      this.subscriptions.delete(subscription.id);
	      var unsubscribeRequest = {
	        op: OP_TYPES.UNSUBSCRIBE,
	        requestId: subscription.id
	      };
	      this.connectPromise.then(function () {
	        _this3.socket.send((0, _stringify.default)(unsubscribeRequest));
	      });
	    }
	    /**
	     * After open is called, the LiveQueryClient will try to send a connect request
	     * to the LiveQuery server.
	     *
	     */

	  }, {
	    key: "open",
	    value: function () {
	      var _this4 = this;

	      var WebSocketImplementation = _CoreManager.default.getWebSocketController();

	      if (!WebSocketImplementation) {
	        this.emit(CLIENT_EMMITER_TYPES.ERROR, 'Can not find WebSocket implementation');
	        return;
	      }

	      if (this.state !== CLIENT_STATE.RECONNECTING) {
	        this.state = CLIENT_STATE.CONNECTING;
	      }

	      this.socket = new WebSocketImplementation(this.serverURL); // Bind WebSocket callbacks

	      this.socket.onopen = function () {
	        _this4._handleWebSocketOpen();
	      };

	      this.socket.onmessage = function (event) {
	        _this4._handleWebSocketMessage(event);
	      };

	      this.socket.onclose = function () {
	        _this4._handleWebSocketClose();
	      };

	      this.socket.onerror = function (error) {
	        _this4._handleWebSocketError(error);
	      };
	    }
	  }, {
	    key: "resubscribe",
	    value: function () {
	      var _context,
	          _this5 = this;

	      (0, _forEach.default)(_context = this.subscriptions).call(_context, function (subscription, requestId) {
	        var query = subscription.query;
	        var queryJSON = query.toJSON();
	        var where = queryJSON.where;
	        var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(',') : undefined;
	        var className = query.className;
	        var sessionToken = subscription.sessionToken;
	        var subscribeRequest = {
	          op: OP_TYPES.SUBSCRIBE,
	          requestId: requestId,
	          query: {
	            className: className,
	            where: where,
	            fields: fields
	          }
	        };

	        if (sessionToken) {
	          subscribeRequest.sessionToken = sessionToken;
	        }

	        _this5.connectPromise.then(function () {
	          _this5.socket.send((0, _stringify.default)(subscribeRequest));
	        });
	      });
	    }
	    /**
	     * This method will close the WebSocket connection to this LiveQueryClient,
	     * cancel the auto reconnect and unsubscribe all subscriptions based on it.
	     *
	     */

	  }, {
	    key: "close",
	    value: function () {
	      var _context2;

	      if (this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED) {
	        return;
	      }

	      this.state = CLIENT_STATE.DISCONNECTED;
	      this.socket.close(); // Notify each subscription about the close

	      var _iterator = _createForOfIteratorHelper((0, _values.default)(_context2 = this.subscriptions).call(_context2)),
	          _step;

	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var subscription = _step.value;
	          subscription.subscribed = false;
	          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }

	      this._handleReset();

	      this.emit(CLIENT_EMMITER_TYPES.CLOSE);
	    } // ensure we start with valid state if connect is called again after close

	  }, {
	    key: "_handleReset",
	    value: function () {
	      this.attempts = 1;
	      this.id = 0;
	      this.requestId = 1;
	      this.connectPromise = (0, promiseUtils.resolvingPromise)();
	      this.subscriptions = new _map.default();
	    }
	  }, {
	    key: "_handleWebSocketOpen",
	    value: function () {
	      this.attempts = 1;
	      var connectRequest = {
	        op: OP_TYPES.CONNECT,
	        applicationId: this.applicationId,
	        javascriptKey: this.javascriptKey,
	        masterKey: this.masterKey,
	        sessionToken: this.sessionToken
	      };

	      if (this.additionalProperties) {
	        connectRequest.installationId = this.installationId;
	      }

	      this.socket.send((0, _stringify.default)(connectRequest));
	    }
	  }, {
	    key: "_handleWebSocketMessage",
	    value: function (event
	    /*: any*/
	    ) {
	      var data = event.data;

	      if (typeof data === 'string') {
	        data = JSON.parse(data);
	      }

	      var subscription = null;

	      if (data.requestId) {
	        subscription = this.subscriptions.get(data.requestId);
	      }

	      var response = {
	        clientId: data.clientId,
	        installationId: data.installationId
	      };

	      switch (data.op) {
	        case OP_EVENTS.CONNECTED:
	          if (this.state === CLIENT_STATE.RECONNECTING) {
	            this.resubscribe();
	          }

	          this.emit(CLIENT_EMMITER_TYPES.OPEN);
	          this.id = data.clientId;
	          this.connectPromise.resolve();
	          this.state = CLIENT_STATE.CONNECTED;
	          break;

	        case OP_EVENTS.SUBSCRIBED:
	          if (subscription) {
	            subscription.subscribed = true;
	            subscription.subscribePromise.resolve();
	            (0, _setTimeout2.default)(function () {
	              return subscription.emit(SUBSCRIPTION_EMMITER_TYPES.OPEN, response);
	            }, 200);
	          }

	          break;

	        case OP_EVENTS.ERROR:
	          if (data.requestId) {
	            if (subscription) {
	              subscription.subscribePromise.resolve();
	              (0, _setTimeout2.default)(function () {
	                return subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, data.error);
	              }, 200);
	            }
	          } else {
	            this.emit(CLIENT_EMMITER_TYPES.ERROR, data.error);
	          }

	          if (data.error === 'Additional properties not allowed') {
	            this.additionalProperties = false;
	          }

	          if (data.reconnect) {
	            this._handleReconnect();
	          }

	          break;

	        case OP_EVENTS.UNSUBSCRIBED:
	          // We have already deleted subscription in unsubscribe(), do nothing here
	          break;

	        default:
	          {
	            // create, update, enter, leave, delete cases
	            if (!subscription) {
	              break;
	            }

	            var override = false;

	            if (data.original) {
	              override = true;
	              delete data.original.__type; // Check for removed fields

	              for (var field in data.original) {
	                if (!(field in data.object)) {
	                  data.object[field] = undefined;
	                }
	              }

	              data.original = _ParseObject.default.fromJSON(data.original, false);
	            }

	            delete data.object.__type;

	            var parseObject = _ParseObject.default.fromJSON(data.object, override);

	            if (data.original) {
	              subscription.emit(data.op, parseObject, data.original, response);
	            } else {
	              subscription.emit(data.op, parseObject, response);
	            }

	            var localDatastore = _CoreManager.default.getLocalDatastore();

	            if (override && localDatastore.isEnabled) {
	              localDatastore._updateObjectIfPinned(parseObject).then(function () {});
	            }
	          }
	      }
	    }
	  }, {
	    key: "_handleWebSocketClose",
	    value: function () {
	      var _context3;

	      if (this.state === CLIENT_STATE.DISCONNECTED) {
	        return;
	      }

	      this.state = CLIENT_STATE.CLOSED;
	      this.emit(CLIENT_EMMITER_TYPES.CLOSE); // Notify each subscription about the close

	      var _iterator2 = _createForOfIteratorHelper((0, _values.default)(_context3 = this.subscriptions).call(_context3)),
	          _step2;

	      try {
	        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	          var subscription = _step2.value;
	          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);
	        }
	      } catch (err) {
	        _iterator2.e(err);
	      } finally {
	        _iterator2.f();
	      }

	      this._handleReconnect();
	    }
	  }, {
	    key: "_handleWebSocketError",
	    value: function (error
	    /*: any*/
	    ) {
	      var _context4;

	      this.emit(CLIENT_EMMITER_TYPES.ERROR, error);

	      var _iterator3 = _createForOfIteratorHelper((0, _values.default)(_context4 = this.subscriptions).call(_context4)),
	          _step3;

	      try {
	        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	          var subscription = _step3.value;
	          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, error);
	        }
	      } catch (err) {
	        _iterator3.e(err);
	      } finally {
	        _iterator3.f();
	      }

	      this._handleReconnect();
	    }
	  }, {
	    key: "_handleReconnect",
	    value: function () {
	      var _context5,
	          _this6 = this; // if closed or currently reconnecting we stop attempting to reconnect


	      if (this.state === CLIENT_STATE.DISCONNECTED) {
	        return;
	      }

	      this.state = CLIENT_STATE.RECONNECTING;
	      var time = generateInterval(this.attempts); // handle case when both close/error occur at frequent rates we ensure we do not reconnect unnecessarily.
	      // we're unable to distinguish different between close/error when we're unable to reconnect therefore
	      // we try to reconnect in both cases
	      // server side ws and browser WebSocket behave differently in when close/error get triggered

	      if (this.reconnectHandle) {
	        clearTimeout(this.reconnectHandle);
	      }

	      this.reconnectHandle = (0, _setTimeout2.default)((0, _bind.default)(_context5 = function () {
	        _this6.attempts++;
	        _this6.connectPromise = (0, promiseUtils.resolvingPromise)();

	        _this6.open();
	      }).call(_context5, this), time);
	    }
	  }]);
	  return LiveQueryClient;
	}(_EventEmitter2.default);

	_CoreManager.default.setWebSocketController(typeof WebSocket === 'function' || (typeof WebSocket === "undefined" ? "undefined" : (0, _typeof2.default)(WebSocket)) === 'object' ? WebSocket : null);

	var _default = LiveQueryClient;
	exports.default = _default;
	});

	var ParseLiveQuery = createCommonjsModule(function (module, exports) {





	defineProperty$3(exports, "__esModule", {
	  value: true
	});

	exports.default = void 0;

	var _indexOf = interopRequireDefault(indexOf$8);

	var _promise = interopRequireDefault(promise$3);

	var _slicedToArray2 = interopRequireDefault(slicedToArray);

	var _regenerator = interopRequireDefault(regenerator);

	var _asyncToGenerator2 = interopRequireDefault(asyncToGenerator);

	var _EventEmitter = interopRequireDefault(EventEmitter_1);

	var _LiveQueryClient = interopRequireDefault(LiveQueryClient_1);

	var _CoreManager = interopRequireDefault(CoreManager);
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @flow
	 */


	function getLiveQueryClient()
	/*: LiveQueryClient*/
	{
	  return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();
	}
	/**
	 * We expose three events to help you monitor the status of the WebSocket connection:
	 *
	 * <p>Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.
	 *
	 * <pre>
	 * Parse.LiveQuery.on('open', () => {
	 *
	 * });</pre></p>
	 *
	 * <p>Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.
	 *
	 * <pre>
	 * Parse.LiveQuery.on('close', () => {
	 *
	 * });</pre></p>
	 *
	 * <p>Error - When some network error or LiveQuery server error happens, you'll get this event.
	 *
	 * <pre>
	 * Parse.LiveQuery.on('error', (error) => {
	 *
	 * });</pre></p>
	 *
	 * @class Parse.LiveQuery
	 * @static
	 */


	var LiveQuery = new _EventEmitter.default();
	/**
	 * After open is called, the LiveQuery will try to send a connect request
	 * to the LiveQuery server.
	 */

	LiveQuery.open = /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
	  var liveQueryClient;
	  return _regenerator.default.wrap(function (_context) {
	    while (1) {
	      switch (_context.prev = _context.next) {
	        case 0:
	          _context.next = 2;
	          return getLiveQueryClient();

	        case 2:
	          liveQueryClient = _context.sent;
	          liveQueryClient.open();

	        case 4:
	        case "end":
	          return _context.stop();
	      }
	    }
	  }, _callee);
	}));
	/**
	 * When you're done using LiveQuery, you can call Parse.LiveQuery.close().
	 * This function will close the WebSocket connection to the LiveQuery server,
	 * cancel the auto reconnect, and unsubscribe all subscriptions based on it.
	 * If you call query.subscribe() after this, we'll create a new WebSocket
	 * connection to the LiveQuery server.
	 */

	LiveQuery.close = /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
	  var liveQueryClient;
	  return _regenerator.default.wrap(function (_context2) {
	    while (1) {
	      switch (_context2.prev = _context2.next) {
	        case 0:
	          _context2.next = 2;
	          return getLiveQueryClient();

	        case 2:
	          liveQueryClient = _context2.sent;
	          liveQueryClient.close();

	        case 4:
	        case "end":
	          return _context2.stop();
	      }
	    }
	  }, _callee2);
	})); // Register a default onError callback to make sure we do not crash on error

	LiveQuery.on('error', function () {});
	var _default = LiveQuery;
	exports.default = _default;
	var defaultLiveQueryClient;
	var DefaultLiveQueryController = {
	  setDefaultLiveQueryClient: function (liveQueryClient
	  /*: LiveQueryClient*/
	  ) {
	    defaultLiveQueryClient = liveQueryClient;
	  },
	  getDefaultLiveQueryClient: function ()
	  /*: Promise<LiveQueryClient>*/
	  {
	    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
	      var _yield$Promise$all, _yield$Promise$all2, currentUser, installationId, sessionToken, liveQueryServerURL, serverURL, protocol, host, applicationId, javascriptKey, masterKey;

	      return _regenerator.default.wrap(function (_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              if (!defaultLiveQueryClient) {
	                _context3.next = 2;
	                break;
	              }

	              return _context3.abrupt("return", defaultLiveQueryClient);

	            case 2:
	              _context3.next = 4;
	              return _promise.default.all([_CoreManager.default.getUserController().currentUserAsync(), _CoreManager.default.getInstallationController().currentInstallationId()]);

	            case 4:
	              _yield$Promise$all = _context3.sent;
	              _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2);
	              currentUser = _yield$Promise$all2[0];
	              installationId = _yield$Promise$all2[1];
	              sessionToken = currentUser ? currentUser.getSessionToken() : undefined;
	              liveQueryServerURL = _CoreManager.default.get('LIVEQUERY_SERVER_URL');

	              if (!(liveQueryServerURL && (0, _indexOf.default)(liveQueryServerURL).call(liveQueryServerURL, 'ws') !== 0)) {
	                _context3.next = 12;
	                break;
	              }

	              throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');

	            case 12:
	              // If we can not find Parse.liveQueryServerURL, we try to extract it from Parse.serverURL
	              if (!liveQueryServerURL) {
	                serverURL = _CoreManager.default.get('SERVER_URL');
	                protocol = (0, _indexOf.default)(serverURL).call(serverURL, 'https') === 0 ? 'wss://' : 'ws://';
	                host = serverURL.replace(/^https?:\/\//, '');
	                liveQueryServerURL = protocol + host;

	                _CoreManager.default.set('LIVEQUERY_SERVER_URL', liveQueryServerURL);
	              }

	              applicationId = _CoreManager.default.get('APPLICATION_ID');
	              javascriptKey = _CoreManager.default.get('JAVASCRIPT_KEY');
	              masterKey = _CoreManager.default.get('MASTER_KEY');
	              defaultLiveQueryClient = new _LiveQueryClient.default({
	                applicationId: applicationId,
	                serverURL: liveQueryServerURL,
	                javascriptKey: javascriptKey,
	                masterKey: masterKey,
	                sessionToken: sessionToken,
	                installationId: installationId
	              });
	              defaultLiveQueryClient.on('error', function (error) {
	                LiveQuery.emit('error', error);
	              });
	              defaultLiveQueryClient.on('open', function () {
	                LiveQuery.emit('open');
	              });
	              defaultLiveQueryClient.on('close', function () {
	                LiveQuery.emit('close');
	              });
	              return _context3.abrupt("return", defaultLiveQueryClient);

	            case 21:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3);
	    }))();
	  },
	  _clearCachedDefaultClient: function () {
	    defaultLiveQueryClient = null;
	  }
	};

	_CoreManager.default.setLiveQueryController(DefaultLiveQueryController);
	});

	/**
	 * Work around Safari 14 IndexedDB open bug.
	 *
	 * Safari has a horrible bug where IDB requests can hang while the browser is starting up. https://bugs.webkit.org/show_bug.cgi?id=226547
	 * The only solution is to keep nudging it until it's awake.
	 */
	function idbReady() {
	    var isSafari = !navigator.userAgentData &&
	        /Safari\//.test(navigator.userAgent) &&
	        !/Chrom(e|ium)\//.test(navigator.userAgent);
	    // No point putting other browsers or older versions of Safari through this mess.
	    if (!isSafari || !indexedDB.databases)
	        return Promise.resolve();
	    var intervalId;
	    return new Promise(function (resolve) {
	        var tryIdb = function () { return indexedDB.databases().finally(resolve); };
	        intervalId = setInterval(tryIdb, 100);
	        tryIdb();
	    }).finally(function () { return clearInterval(intervalId); });
	}

	function promisifyRequest(request) {
	    return new Promise((resolve, reject) => {
	        // @ts-ignore - file size hacks
	        request.oncomplete = request.onsuccess = () => resolve(request.result);
	        // @ts-ignore - file size hacks
	        request.onabort = request.onerror = () => reject(request.error);
	    });
	}
	function createStore(dbName, storeName) {
	    const dbp = idbReady().then(() => {
	        const request = indexedDB.open(dbName);
	        request.onupgradeneeded = () => request.result.createObjectStore(storeName);
	        return promisifyRequest(request);
	    });
	    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
	}
	let defaultGetStoreFunc;
	function defaultGetStore() {
	    if (!defaultGetStoreFunc) {
	        defaultGetStoreFunc = createStore('keyval-store', 'keyval');
	    }
	    return defaultGetStoreFunc;
	}
	/**
	 * Get a value by its key.
	 *
	 * @param key
	 * @param customStore Method to get a custom store. Use with caution (see the docs).
	 */
	function get$9(key, customStore = defaultGetStore()) {
	    return customStore('readonly', (store) => promisifyRequest(store.get(key)));
	}
	/**
	 * Set a value with a key.
	 *
	 * @param key
	 * @param value
	 * @param customStore Method to get a custom store. Use with caution (see the docs).
	 */
	function set$5(key, value, customStore = defaultGetStore()) {
	    return customStore('readwrite', (store) => {
	        store.put(value, key);
	        return promisifyRequest(store.transaction);
	    });
	}
	/**
	 * Set multiple values at once. This is faster than calling set() multiple times.
	 * It's also atomic – if one of the pairs can't be added, none will be added.
	 *
	 * @param entries Array of entries, where each entry is an array of `[key, value]`.
	 * @param customStore Method to get a custom store. Use with caution (see the docs).
	 */
	function setMany(entries, customStore = defaultGetStore()) {
	    return customStore('readwrite', (store) => {
	        entries.forEach((entry) => store.put(entry[1], entry[0]));
	        return promisifyRequest(store.transaction);
	    });
	}
	/**
	 * Get multiple values by their keys
	 *
	 * @param keys
	 * @param customStore Method to get a custom store. Use with caution (see the docs).
	 */
	function getMany(keys, customStore = defaultGetStore()) {
	    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));
	}
	/**
	 * Update a value. This lets you see the old value and update it as an atomic operation.
	 *
	 * @param key
	 * @param updater A callback that takes the old value and returns a new value.
	 * @param customStore Method to get a custom store. Use with caution (see the docs).
	 */
	function update(key, updater, customStore = defaultGetStore()) {
	    return customStore('readwrite', (store) => 
	    // Need to create the promise manually.
	    // If I try to chain promises, the transaction closes in browsers
	    // that use a promise polyfill (IE10/11).
	    new Promise((resolve, reject) => {
	        store.get(key).onsuccess = function () {
	            try {
	                store.put(updater(this.result), key);
	                resolve(promisifyRequest(store.transaction));
	            }
	            catch (err) {
	                reject(err);
	            }
	        };
	    }));
	}
	/**
	 * Delete a particular key from the store.
	 *
	 * @param key
	 * @param customStore Method to get a custom store. Use with caution (see the docs).
	 */
	function del(key, customStore = defaultGetStore()) {
	    return customStore('readwrite', (store) => {
	        store.delete(key);
	        return promisifyRequest(store.transaction);
	    });
	}
	/**
	 * Delete multiple keys at once.
	 *
	 * @param keys List of keys to delete.
	 * @param customStore Method to get a custom store. Use with caution (see the docs).
	 */
	function delMany(keys, customStore = defaultGetStore()) {
	    return customStore('readwrite', (store) => {
	        keys.forEach((key) => store.delete(key));
	        return promisifyRequest(store.transaction);
	    });
	}
	/**
	 * Clear all values in the store.
	 *
	 * @param customStore Method to get a custom store. Use with caution (see the docs).
	 */
	function clear$1(customStore = defaultGetStore()) {
	    return customStore('readwrite', (store) => {
	        store.clear();
	        return promisifyRequest(store.transaction);
	    });
	}
	function eachCursor(customStore, callback) {
	    return customStore('readonly', (store) => {
	        // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.
	        // And openKeyCursor isn't supported by Safari.
	        store.openCursor().onsuccess = function () {
	            if (!this.result)
	                return;
	            callback(this.result);
	            this.result.continue();
	        };
	        return promisifyRequest(store.transaction);
	    });
	}
	/**
	 * Get all keys in the store.
	 *
	 * @param customStore Method to get a custom store. Use with caution (see the docs).
	 */
	function keys$8(customStore = defaultGetStore()) {
	    const items = [];
	    return eachCursor(customStore, (cursor) => items.push(cursor.key)).then(() => items);
	}
	/**
	 * Get all values in the store.
	 *
	 * @param customStore Method to get a custom store. Use with caution (see the docs).
	 */
	function values$4(customStore = defaultGetStore()) {
	    const items = [];
	    return eachCursor(customStore, (cursor) => items.push(cursor.value)).then(() => items);
	}
	/**
	 * Get all entries in the store. Each entry is an array of `[key, value]`.
	 *
	 * @param customStore Method to get a custom store. Use with caution (see the docs).
	 */
	function entries$7(customStore = defaultGetStore()) {
	    const items = [];
	    return eachCursor(customStore, (cursor) => items.push([cursor.key, cursor.value])).then(() => items);
	}

	var dist = /*#__PURE__*/Object.freeze({
		__proto__: null,
		clear: clear$1,
		createStore: createStore,
		del: del,
		delMany: delMany,
		entries: entries$7,
		get: get$9,
		getMany: getMany,
		keys: keys$8,
		promisifyRequest: promisifyRequest,
		set: set$5,
		setMany: setMany,
		update: update,
		values: values$4
	});

	var _idbKeyval = /*@__PURE__*/getAugmentedNamespace(dist);

	var IndexedDBStorageController_1 = createCommonjsModule(function (module) {




	/**
	 * @flow
	 */


	try {
	  var ParseStore = (0, _idbKeyval.createStore)('parseDB', 'parseStore');
	  var IndexedDBStorageController = {
	    async: 1,
	    getItemAsync: function (path
	    /*: string*/
	    ) {
	      return (0, _idbKeyval.get)(path, ParseStore);
	    },
	    setItemAsync: function (path
	    /*: string*/
	    , value
	    /*: string*/
	    ) {
	      return (0, _idbKeyval.set)(path, value, ParseStore);
	    },
	    removeItemAsync: function (path
	    /*: string*/
	    ) {
	      return (0, _idbKeyval.del)(path, ParseStore);
	    },
	    getAllKeysAsync: function () {
	      return (0, keys$7(_idbKeyval))(ParseStore);
	    },
	    clear: function () {
	      return (0, _idbKeyval.clear)(ParseStore);
	    }
	  };
	  module.exports = IndexedDBStorageController;
	} catch (e) {// IndexedDB not supported
	}
	});

	var _promise$5 = interopRequireDefault(promise$3);

	var _decode = interopRequireDefault(decode_1);

	var _encode = interopRequireDefault(encode_1);

	var _CoreManager$4 = interopRequireDefault(CoreManager);

	var _CryptoController = interopRequireDefault(CryptoController_1);

	var _EventuallyQueue = interopRequireDefault(EventuallyQueue_1);

	var _InstallationController = interopRequireDefault(InstallationController_1);

	var ParseOp$1 = _interopRequireWildcard(ParseOp);

	var _RESTController = interopRequireDefault(RESTController_1);

	function _getRequireWildcardCache(nodeInterop) {
	  if (typeof weakMap$2 !== "function") return null;
	  var cacheBabelInterop = new weakMap$2();
	  var cacheNodeInterop = new weakMap$2();
	  return (_getRequireWildcardCache = function (nodeInterop) {
	    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
	  })(nodeInterop);
	}

	function _interopRequireWildcard(obj, nodeInterop) {
	  if (!nodeInterop && obj && obj.__esModule) {
	    return obj;
	  }

	  if (obj === null || _typeof_1(obj) !== "object" && typeof obj !== "function") {
	    return {
	      default: obj
	    };
	  }

	  var cache = _getRequireWildcardCache(nodeInterop);

	  if (cache && cache.has(obj)) {
	    return cache.get(obj);
	  }

	  var newObj = {};

	  for (var key in obj) {
	    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
	      var desc = defineProperty$3 && getOwnPropertyDescriptor$3 ? getOwnPropertyDescriptor$3(obj, key) : null;

	      if (desc && (desc.get || desc.set)) {
	        defineProperty$3(newObj, key, desc);
	      } else {
	        newObj[key] = obj[key];
	      }
	    }
	  }

	  newObj.default = obj;

	  if (cache) {
	    cache.set(obj, newObj);
	  }

	  return newObj;
	}
	/**
	 * Copyright (c) 2015-present, Parse, LLC.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	/**
	 * Contains all Parse API classes and functions.
	 *
	 * @static
	 * @global
	 * @class
	 * @hideconstructor
	 */


	var Parse = {
	  /**
	   * Call this method first to set up your authentication tokens for Parse.
	   *
	   * @param {string} applicationId Your Parse Application ID.
	   * @param {string} [javaScriptKey] Your Parse JavaScript Key (Not needed for parse-server)
	   * @param {string} [masterKey] Your Parse Master Key. (Node.js only!)
	   * @static
	   */
	  initialize: function (applicationId
	  /*: string*/
	  , javaScriptKey
	  /*: string*/
	  ) {
	    if (_CoreManager$4.default.get('IS_NODE') && !process.env.SERVER_RENDERING) {
	      /* eslint-disable no-console */
	      console.log("It looks like you're using the browser version of the SDK in a " + "node.js environment. You should require('parse/node') instead.");
	      /* eslint-enable no-console */
	    }

	    Parse._initialize(applicationId, javaScriptKey);
	  },
	  _initialize: function (applicationId
	  /*: string*/
	  , javaScriptKey
	  /*: string*/
	  , masterKey
	  /*: string*/
	  ) {
	    _CoreManager$4.default.set('APPLICATION_ID', applicationId);

	    _CoreManager$4.default.set('JAVASCRIPT_KEY', javaScriptKey);

	    _CoreManager$4.default.set('MASTER_KEY', masterKey);

	    _CoreManager$4.default.set('USE_MASTER_KEY', false);
	  },

	  /**
	   * Call this method to set your AsyncStorage engine
	   * Starting Parse@1.11, the ParseSDK do not provide a React AsyncStorage as the ReactNative module
	   * is not provided at a stable path and changes over versions.
	   *
	   * @param {AsyncStorage} storage a react native async storage.
	   * @static
	   */
	  setAsyncStorage: function (storage
	  /*: any*/
	  ) {
	    _CoreManager$4.default.setAsyncStorage(storage);
	  },

	  /**
	   * Call this method to set your LocalDatastoreStorage engine
	   * If using React-Native use {@link Parse.setAsyncStorage Parse.setAsyncStorage()}
	   *
	   * @param {LocalDatastoreController} controller a data storage.
	   * @static
	   */
	  setLocalDatastoreController: function (controller
	  /*: any*/
	  ) {
	    _CoreManager$4.default.setLocalDatastoreController(controller);
	  },

	  /**
	   * Returns information regarding the current server's health
	   *
	   * @returns {Promise}
	   * @static
	   */
	  getServerHealth: function () {
	    return _CoreManager$4.default.getRESTController().request('GET', 'health');
	  },

	  /**
	   * @member {string} Parse.applicationId
	   * @static
	   */
	  set applicationId(value) {
	    _CoreManager$4.default.set('APPLICATION_ID', value);
	  },

	  get applicationId() {
	    return _CoreManager$4.default.get('APPLICATION_ID');
	  },

	  /**
	   * @member {string} Parse.javaScriptKey
	   * @static
	   */
	  set javaScriptKey(value) {
	    _CoreManager$4.default.set('JAVASCRIPT_KEY', value);
	  },

	  get javaScriptKey() {
	    return _CoreManager$4.default.get('JAVASCRIPT_KEY');
	  },

	  /**
	   * @member {string} Parse.masterKey
	   * @static
	   */
	  set masterKey(value) {
	    _CoreManager$4.default.set('MASTER_KEY', value);
	  },

	  get masterKey() {
	    return _CoreManager$4.default.get('MASTER_KEY');
	  },

	  /**
	   * @member {string} Parse.serverURL
	   * @static
	   */
	  set serverURL(value) {
	    _CoreManager$4.default.set('SERVER_URL', value);
	  },

	  get serverURL() {
	    return _CoreManager$4.default.get('SERVER_URL');
	  },

	  /**
	   * @member {string} Parse.serverAuthToken
	   * @static
	   */
	  set serverAuthToken(value) {
	    _CoreManager$4.default.set('SERVER_AUTH_TOKEN', value);
	  },

	  get serverAuthToken() {
	    return _CoreManager$4.default.get('SERVER_AUTH_TOKEN');
	  },

	  /**
	   * @member {string} Parse.serverAuthType
	   * @static
	   */
	  set serverAuthType(value) {
	    _CoreManager$4.default.set('SERVER_AUTH_TYPE', value);
	  },

	  get serverAuthType() {
	    return _CoreManager$4.default.get('SERVER_AUTH_TYPE');
	  },

	  /**
	   * @member {string} Parse.liveQueryServerURL
	   * @static
	   */
	  set liveQueryServerURL(value) {
	    _CoreManager$4.default.set('LIVEQUERY_SERVER_URL', value);
	  },

	  get liveQueryServerURL() {
	    return _CoreManager$4.default.get('LIVEQUERY_SERVER_URL');
	  },

	  /**
	   * @member {string} Parse.encryptedUser
	   * @static
	   */
	  set encryptedUser(value) {
	    _CoreManager$4.default.set('ENCRYPTED_USER', value);
	  },

	  get encryptedUser() {
	    return _CoreManager$4.default.get('ENCRYPTED_USER');
	  },

	  /**
	   * @member {string} Parse.secret
	   * @static
	   */
	  set secret(value) {
	    _CoreManager$4.default.set('ENCRYPTED_KEY', value);
	  },

	  get secret() {
	    return _CoreManager$4.default.get('ENCRYPTED_KEY');
	  },

	  /**
	   * @member {boolean} Parse.idempotency
	   * @static
	   */
	  set idempotency(value) {
	    _CoreManager$4.default.set('IDEMPOTENCY', value);
	  },

	  get idempotency() {
	    return _CoreManager$4.default.get('IDEMPOTENCY');
	  },

	  /**
	   * @member {boolean} Parse.allowCustomObjectId
	   * @static
	   */
	  set allowCustomObjectId(value) {
	    _CoreManager$4.default.set('ALLOW_CUSTOM_OBJECT_ID', value);
	  },

	  get allowCustomObjectId() {
	    return _CoreManager$4.default.get('ALLOW_CUSTOM_OBJECT_ID');
	  }

	};
	Parse.ACL = ParseACL_1.default;
	Parse.Analytics = Analytics;
	Parse.AnonymousUtils = AnonymousUtils_1.default;
	Parse.Cloud = Cloud;
	Parse.CLP = ParseCLP_1.default;
	Parse.CoreManager = CoreManager;
	Parse.Config = ParseConfig_1.default;
	Parse.Error = ParseError_1.default;
	Parse.EventuallyQueue = _EventuallyQueue.default;
	Parse.FacebookUtils = FacebookUtils_1.default;
	Parse.File = ParseFile_1.default;
	Parse.GeoPoint = ParseGeoPoint_1.default;
	Parse.Polygon = ParsePolygon_1.default;
	Parse.Installation = ParseInstallation.default;
	Parse.LocalDatastore = LocalDatastore_1;
	Parse.Object = ParseObject_1.default;
	Parse.Op = {
	  Set: ParseOp$1.SetOp,
	  Unset: ParseOp$1.UnsetOp,
	  Increment: ParseOp$1.IncrementOp,
	  Add: ParseOp$1.AddOp,
	  Remove: ParseOp$1.RemoveOp,
	  AddUnique: ParseOp$1.AddUniqueOp,
	  Relation: ParseOp$1.RelationOp
	};
	Parse.Push = Push;
	Parse.Query = ParseQuery_1.default;
	Parse.Relation = ParseRelation_1.default;
	Parse.Role = ParseRole_1.default;
	Parse.Schema = ParseSchema_1.default;
	Parse.Session = ParseSession_1.default;
	Parse.Storage = Storage_1;
	Parse.User = ParseUser_1.default;
	Parse.LiveQuery = ParseLiveQuery.default;
	Parse.LiveQueryClient = LiveQueryClient_1.default;
	Parse.IndexedDB = IndexedDBStorageController_1;

	Parse._request = function () {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return _CoreManager$4.default.getRESTController().request.apply(null, args);
	};

	Parse._ajax = function () {
	  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    args[_key2] = arguments[_key2];
	  }

	  return _CoreManager$4.default.getRESTController().ajax.apply(null, args);
	}; // We attempt to match the signatures of the legacy versions of these methods


	Parse._decode = function (_, value) {
	  return (0, _decode.default)(value);
	};

	Parse._encode = function (value, _, disallowObjects) {
	  return (0, _encode.default)(value, disallowObjects);
	};

	Parse._getInstallationId = function () {
	  return _CoreManager$4.default.getInstallationController().currentInstallationId();
	};
	/**
	 * Enable pinning in your application.
	 * This must be called after `Parse.initialize` in your application.
	 *
	 * @param [polling] Allow pinging the server /health endpoint. Default true
	 * @param [ms] Milliseconds to ping the server. Default 2000ms
	 * @static
	 */


	Parse.enableLocalDatastore = function () {
	  var polling = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	  var ms
	  /*: number*/
	  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;

	  if (!Parse.applicationId) {
	    console.log("'enableLocalDataStore' must be called after 'initialize'");
	    return;
	  }

	  if (!Parse.LocalDatastore.isEnabled) {
	    Parse.LocalDatastore.isEnabled = true;

	    if (polling) {
	      _EventuallyQueue.default.poll(ms);
	    }
	  }
	};
	/**
	 * Flag that indicates whether Local Datastore is enabled.
	 *
	 * @static
	 * @returns {boolean}
	 */


	Parse.isLocalDatastoreEnabled = function () {
	  return Parse.LocalDatastore.isEnabled;
	};
	/**
	 * Gets all contents from Local Datastore
	 *
	 * <pre>
	 * await Parse.dumpLocalDatastore();
	 * </pre>
	 *
	 * @static
	 * @returns {object}
	 */


	Parse.dumpLocalDatastore = function () {
	  if (!Parse.LocalDatastore.isEnabled) {
	    console.log('Parse.enableLocalDatastore() must be called first'); // eslint-disable-line no-console

	    return _promise$5.default.resolve({});
	  } else {
	    return Parse.LocalDatastore._getAllContents();
	  }
	};
	/**
	 * Enable the current user encryption.
	 * This must be called before login any user.
	 *
	 * @static
	 */


	Parse.enableEncryptedUser = function () {
	  Parse.encryptedUser = true;
	};
	/**
	 * Flag that indicates whether Encrypted User is enabled.
	 *
	 * @static
	 * @returns {boolean}
	 */


	Parse.isEncryptedUserEnabled = function () {
	  return Parse.encryptedUser;
	};

	_CoreManager$4.default.setCryptoController(_CryptoController.default);

	_CoreManager$4.default.setInstallationController(_InstallationController.default);

	_CoreManager$4.default.setRESTController(_RESTController.default);

	// For legacy requires, of the form `var Parse = require('parse').Parse`
	Parse.Parse = Parse;
	var Parse_1 = Parse;

	var parse = Parse_1;

	const apiKey = "tZdf1nz28kstofNaHmre9jg7YQqJEYczPBD5fbyz";
	const jsKey = "QMt9heREtqrJpH9544jXqg9cANPpc55tdaFSXVbo";

	// export default { apiKey, jsKey };

	const definition = {
	  name: "ActivityLog",
	  fields: {
	    activity: "activity",
	    date: "date",
	    user: "user",
	  },
	};

	function createActivityLog(activity) {
	  const activityLog = parse.Object.extend(definition.name);
	  const currentUser = parse.User.current();
	  activityLog.set(definition.fields.activity, activity);
	  activityLog.set(definition.fields.date, new Date());
	  activityLog.set(definition.fields.user, currentUser);
	  activityLog.setACL(new parse.ACL(currentUser));
	  try {
	      activityLog.save();
	      return true
	  } catch (error) {
	      console.log(error);
	      return false
	  }
	}

	/**
	 * 
	 * @param {string} input 
	 * @returns 32bit integer
	 * @description Obfuscates string
	 */
	function hash(input) {
	    var hash = 0, i, chr;
	    if (input.length === 0) return hash;
	    for (i = 0; i < input.length; i++) {
	      chr   = input.charCodeAt(i);
	      hash  = ((hash << 5) - hash) + chr;
	      hash |= 0; // Convert to 32bit integer
	    }
	    return hash;
	  }

	const definition$1 = {
	  name: "User",
	  fields: {
	    username: "username",
	    password: "password",
	    // email: "email", // using email as username
	    timeWastingSiteList: "timeWastingSiteList",
	    redirectionTargetSite: "redirectionTargetSite",
	    createdDate: "createdDate",
	    archivedDate: "archivedDate",
	    isArchived: "isArchived",
	  },
	};

	async function signup(email, password) {
	  const user = parse.User();
	  user.set(definition$1.fields.username, email);
	  user.set(definition$1.fields.password, password);
	  user.set(definition$1.fields.timeWastingSiteList, []);
	  user.set(definition$1.fields.redirectionTargetSite, "");
	  user.set(definition$1.fields.createdDate, new Date());
	  user.set(definition$1.fields.archivedDate, {});
	  user.set(definition$1.fields.isArchived, false);
	  try {
	    await user.signup();
	    return true;
	  } catch (error) {
	    console.log(error);
	    return false;
	  }
	}

	async function login(email, password) {
	  try {
	    const user = await parse.User.logIn(email, password);
	    return true;
	  } catch (error) {
	    console.log(error);
	    return false;
	  }
	}

	async function archiveUser() {
	  const currentUser = await parse.User.currentUser();
	  currentUser.set(definition$1.fields.isArchived, true);
	  currentUser.set(definition$1.fields.archivedDate, new Date());
	  currentUser.set(definition$1.fields.username, hash(currentUser.username));
	  try {
	    currentUser.save();
	    return true;
	  } catch (error) {
	    console.log(error);
	    return false;
	  }
	}

	async function resetPassword(email) {
	  try {
	    await parse.User.requestPasswordReset(email);
	    return true;
	  } catch (error) {
	    console.log(error);
	    return false;
	  }
	}

	async function setTargetSite(url) {
	  const currentUser = parse.User.current();
	  currentUser.set(definition$1.fields.redirectionTargetSite, url);
	  try {
	    await currentUser.save();
	    return true;
	  } catch (error) {
	    console.log(error);
	    return false;
	  }
	}

	const definition$2 = {
	  name: "event",
	  fields: {
	    date: "date",
	    type: "type",
	    details: "details",
	    user: "user",
	  },
	};

	const eventNames = {
	  gotoOrigin: "gotoOrigin", // Bad name
	  redirected: "redirected",
	  settingsChanged: "settingsChanged", //TODO: ?
	  redirectWarningTriggered: "redirectWarningTriggered",
	  redirectWarningSnoozed: "redirectWarningSnoozed",
	  redirectionTargetSiteFocused: "redirectionTargetSiteFocused",
	  redirectionTargetSiteUnfocused: "redirectionTargetSiteUnfocused",
	  siteBlockerTriggered: "siteBlockerTriggered",
	  blockerButtonPressed: "blockerButtonPressed",
	  redirectionToggledOff: "redirectionToggledOff",
	  redirectionToggledOn: "redirectionToggledOn",
	  redirectionTargetVisited: "redirectionTargetVisited",
	};

	const reasonNames = {
	  gotoOrigin: {
	    complete: "Session completed",
	    skip: "Session skipped",
	  },
	  redirected: {
	    autoResolved: "Countdown auto-resolved",
	    instant: "Instant redirect due to tab change or navigation event",
	  },
	};

	function createEvent(type, details) {
	  const event = parse.Object.extend(definition$2.name);
	  const currentUser = parse.User.current();
	  event.set(definition$2.fields.date, new Date());
	  event.set(definition$2.fields.type, type);
	  event.set(definition$2.fields.details, details);
	  event.set(definition$2.fields.user, parse.User.current());
	  event.setACL(new parse.ACL(currentUser));
	  try {
	    event.save();
	    return true;
	  } catch (error) {
	    console.log(error);
	    return false;
	  }
	}

	const definition$3 = {
	  name: "Session",
	  fields: {
	    from: "from",
	    to: "to",
	    status: "status",
	    startDate: "startDate",
	    endDate: "endDate",
	    user: "user",
	  },
	};

	const statusNames = {
	  started: "started",
	  skipped: "skipped",
	  completed: "completed",
	  unconventionallyAborted: "unconventionallyAborted",
	};

	function createSession() {
	  const session = parse.Object.extend(definition$3.name);
	  const currentUser = parse.User.current();
	  session.set(definition$3.fields.from, from);
	  session.set(definition$3.fields.to, to);
	  session.set(definition$3.fields.status, statusNames.started);
	  session.set(definition$3.fields.startDate, new Date());
	  session.set(definition$3.fields.endDate, {});
	  session.set(definition$3.fields.user, parse.User.current());
	  session.setACL(new parse.ACL(currentUser));
	  try {
	    session.save();
	    return true;
	  } catch (error) {
	    console.log(error);
	    return false;
	  }
	}

	const definition$4 = {
	  name: "TimeWastingSite",
	  fields: {
	    url: "url",
	    user: "user",
	    addedDate: "addedDate",
	    removedDate: "removedDate",
	  },
	};

	async function createTimeWastingSite(url) {
	  const timeWastingSite = parse.Object.extend(definition$4.name);
	  const currentUser = parse.User.current();
	  timeWastingSite.set(definition$4.fields.url, url);
	  timeWastingSite.set(definition$4.fields.user, parse.User.current());
	  timeWastingSite.set(definition$4.fields.addedDate, new Date());
	  timeWastingSite.set(definition$4.fields.removedDate, {});
	  timeWastingSite.setACL(new parse.ACL(currentUser));
	  try {
	    await timeWastingSite.save();
	    return true;
	  } catch (error) {
	    console.log(error);
	    return false;
	  }
	}

	async function removeTimeWastingSite(url) {
	  const timeWastingSite = parse.Object.extend(definition$4.name);
	  const currentUser = parse.User.current();
	  const query = new parse.Query(timeWastingSite);
	  query.equalTo(definition$4.fields.user, currentUser);
	  query.equalTo(definition$4.fields.url, url);
	  try {
	    await timeWastingSite.destroy();
	    return true;
	  } catch (error) {
	    console.log(error);
	    return false;
	  }
	}

	parse.initialize(apiKey, jsKey);
	parse.serverURL = "https://parseapi.back4app.com/";

	var API = {
	  activityLog: {create: createActivityLog},
	  event: {create: createEvent},
	  redirectionTargetSite: {create: createRedirectionTargetSite, remove: removeRedirectionTargetSite},
	  session: {create: createSession},
	  timeWastingSite: {create: createTimeWastingSite, remove: removeTimeWastingSite},
	  user: {signup: signup, login: login, archive: archiveUser, resetPassword: resetPassword, setTargetSite: setTargetSite },
	};

	let list;
	let user;
	let data$1 = {
	  chromeActive: 0,
	  chromeInactive: 0,
	};
	let counterId;
	let loggerId;

	function intervalSetup() {
	  syncUser();
	  syncList();
	  startCounter();
	  startLogger();
	  addOnWindowsCloseListener();
	}

	async function counter$1() {
	  const window = await browserPolyfill.windows.getCurrent();
	  const views = chrome.extension.getViews({ type: "popup" });
	  if (window.focused || views.length > 0) {
	    data$1.chromeActive++;
	    const result = await browserPolyfill.tabs.query({
	      active: true,
	      currentWindow: true,
	    });
	    const name = parseUrl(result[0].url).name;
	    if (
	      list.includes(name) ||
	      learningSites.find((site) => site.name === name) !== undefined
	    ) {
	      data$1[name] = data$1[name] ? data$1[name] + 1 : 1;
	    }
	  } else {
	    data$1.chromeInactive++;
	  }
	}

	function logger() {
	  storeData(data$1);
	  resetData();
	}

	function startCounter() {
	  counterId = setInterval(counter$1, 1000); // 1 second
	}

	function stopCounter() {
	  clearInterval(counterId);
	}

	function startLogger() {
	  loggerId = setInterval(logger, 1000 * 60 * 5); // 5 minutes
	}

	function stopLogger() {
	  clearInterval(loggerId);
	}

	async function restartCounter() {
	  stopCounter();
	  await syncList();
	  startCounter();
	}

	async function restartLogger() {
	  stopLogger();
	  storeData(data$1);
	  resetData();
	  await syncUser();
	  startLogger();
	}

	async function syncUser() {
	  const result = await storage$1.uid.get();
	  user = result;
	}

	async function syncList() {
	  const result = await storage$1.list.get();
	  list = result ? result.map((item) => item.name) : [];
	}

	function storeData(data) {
	  if (user) {
	    storage$1.stats.storeSession(data);
	    API.activityLog.create(data);
	  }
	}

	function resetData() {
	  data$1 = {
	    chromeActive: 0,
	    chromeInactive: 0,
	  };
	}

	function addOnWindowsCloseListener() {
	  browserPolyfill.windows.onRemoved.addListener((details) => {
	    storeData(data$1);
	    resetData();
	  });
	}

	var intervals = {
	  intervalSetup,
	  counter: { start: startCounter, restart: restartCounter },
	  logger: { start: startLogger, restart: restartLogger },
	  addOnWindowsCloseListener,
	};

	//Functions to control the badge that appears on the extension icon in the chrome toolbar.
	 
	  /**
	  * @description Adds text to the badge.
	  * @param { String | number } value Should be less than 4 characters long.  */
	  function setText(value) {
	    browserPolyfill.browserAction.setBadgeText({text: `${value}`});
	  }

	  /**
	  * @description Changes the background colour of the badge to green.  */
	  function setBusy() {
	    browserPolyfill.browserAction.setBadgeBackgroundColor({color:'limegreen'});
	  }

	  /**
	  * @description Changes the background colour of the badge to blue.  */
	  function setDone() {
	    browserPolyfill.browserAction.setBadgeBackgroundColor({color:'deepskyblue'});
	  }

	  /**
	  * @description Removes the badge from the icon entirely.  */
	  function remove() {
	    browserPolyfill.browserAction.setBadgeText({text: ''});
	  }

	  var badge = {
	    setText, setBusy, setDone, remove
	  };

	let learningTimeRemaining = 0;
	let learningTimeIntervalRef;

	async function decrementLearningTime() {
	  if (await checkActive()) {
	    if (learningTimeRemaining > 0) {
	      learningTimeRemaining -= 1000;
	      badge.setText(parseTimerDown(learningTimeRemaining));
	    } else if (learningTimeRemaining < 0) {
	      learningTimeRemaining = 0;
	    } else {
	      startBonusTime();
	    }
	  }
	}

	async function startLearningSession() {
	  if (bonusTimeIntervalRef) stopBonusTime();
	  if (learningTimeIntervalRef) clearInterval(learningTimeIntervalRef);
	  badge.setBusy();
	  learningTimeRemaining = parseTime.toSystem(
	    await storage$1.timeSettings.learningTime.get()
	  );
	  badge.setText(parseTimerDown(learningTimeRemaining));
	  learningTimeIntervalRef = setInterval(decrementLearningTime, 1000);
	}

	function stopLearningSession() {
	  clearInterval(learningTimeIntervalRef);
	  learningTimeIntervalRef = undefined;
	  learningTimeRemaining = 0;
	  badge.remove();
	}

	let rewardTimeRemaining = 0;
	let rewardTimeIntervalRef;

	async function decrementRewardTime(callback) {
	  if (rewardTimeRemaining > 0) {
	    rewardTimeRemaining -= 1000;
	  } else if (rewardTimeRemaining < 0) {
	    rewardTimeRemaining = 0;
	  } else {
	    stopProcrastinationSession(callback);
	  }
	}

	async function startProcrastinationSession(callback, rewardTime) {
	  stopLearningSession();
	  stopBonusTime();
	  rewardTimeRemaining = rewardTime;
	  rewardTimeIntervalRef = setInterval(
	    () => decrementRewardTime(callback),
	    1000
	  );
	}

	function stopProcrastinationSession(callback) {
	  clearInterval(rewardTimeIntervalRef);
	  rewardTimeIntervalRef = undefined;
	  storage$1.shouldRedirect.set(true);
	  callback();
	}

	let bonusTime = 0;
	let bonusTimeIntervalRef;

	async function incrementBonusTime() {
	  if (await checkActive()) {
	    if (bonusTime >= 0) {
	      bonusTime += 1000;
	    } else {
	      bonusTime = 0;
	    }
	  }
	}

	function startBonusTime() {
	  if (bonusTimeIntervalRef) stopBonusTime();
	  badge.setDone();
	  badge.setText("Done");
	  clearInterval(learningTimeIntervalRef);
	  learningTimeIntervalRef = undefined;
	  bonusTimeIntervalRef = setInterval(incrementBonusTime, 1000);
	}

	function stopBonusTime() {
	  clearInterval(bonusTimeIntervalRef);
	  bonusTime = 0;
	  bonusTimeIntervalRef = undefined;
	}

	async function checkActive() {
	  const window = await browserPolyfill.windows.getCurrent();
	  const views = chrome.extension.getViews({ type: "popup" });
	  if (window.focused || views.length > 0) {
	    const currentTabs = await browserPolyfill.tabs.query({
	      active: true,
	      currentWindow: true,
	    });
	    if (currentTabs.length > 0) {
	      const current = currentTabs[0];
	      const origin = await storage$1.origin.get();
	      if (origin !== undefined) {
	        if (origin.tabId !== undefined) {
	          return current.id === origin.tabId;
	        }
	      }
	    }
	  } else {
	    return false;
	  }
	}

	function killAiki() {
	  clearInterval(rewardTimeIntervalRef);
	  rewardTimeIntervalRef = undefined;
	  stopBonusTime();
	  storage$1.shouldRedirect.set(true);
	  rewardTimeRemaining = 0;
	  bonusTime = 0;
	  learningTimeRemaining = 0;
	}

	function getTime() {
	  return {
	    bonusTime: bonusTime,
	    learningTimeRemaining: learningTimeRemaining,
	    rewardTimeRemaining: rewardTimeRemaining,
	  };
	}

	var timer = {
	  startLearningSession,
	  stopLearningSession,
	  startProcrastinationSession,
	  stopProcrastinationSession,
	  stopBonusTime,
	  getTime,
	  killAiki,
	};

	const l = console.log;

	let shouldShowWelcome = true;

	async function addRedirectionTargetListener() {
	  const url = learningSites.map((item) => {
	    return { hostContains: `${item.name}.` };
	  });
	  const filter = { url: url };

	  async function redirectionTargetListener(details) {
	    API.event.create(eventNames.redirectionTargetVisited, details);
	  }

	  browserPolyfill.webNavigation.onBeforeNavigate.addListener(
	    redirectionTargetListener,
	    filter
	  );
	}

	async function createFilter() {
	  const procList = await storage$1.list.get();
	  const url = procList.map((item) => {
	    return { hostContains: `${item.name}.` };
	  });
	  const filter = { url: url };
	  return filter;
	}

	async function addNavigationListener() {
	  const filter = await createFilter();
	  browserPolyfill.webNavigation.onBeforeNavigate.addListener(redirect, filter);
	}

	async function removeNavigationListener() {
	  const filter = await createFilter();
	  browserPolyfill.webNavigation.onBeforeNavigate.removeListener(redirect, filter);
	}

	async function restartNavigationListener() {
	  await removeNavigationListener();
	  addNavigationListener();
	}

	function addTabChangeListener() {
	  browserPolyfill.tabs.onActivated.addListener(checkTabById);
	}

	function removeTabChangeListener() {
	  browserPolyfill.tabs.onActivated.removeListener(checkTabById);
	}

	async function windowChangeListener(windowId) {
	  if (windowId >= 0) {
	    try {
	      const tabs = await browserPolyfill.tabs.query({
	        active: true,
	        currentWindow: true,
	      });
	      if (tabs.length > 0) {
	        checkTab(tabs[0]);
	      }
	    } catch (error) {
	      // console.log(error);
	    }
	  }
	}

	function addWindowChangeListener() {
	  browserPolyfill.windows.onFocusChanged.addListener(windowChangeListener);
	}

	function removeWindowChangeListener() {
	  browserPolyfill.windows.onFocusChanged.removeListener(windowChangeListener);
	}

	async function restartWindowChangeListener() {
	  removeWindowChangeListener();
	  addWindowChangeListener();
	}

	async function restartTabChangeListener() {
	  removeTabChangeListener();
	  addTabChangeListener();
	}

	function addOriginUpdatedListener() {
	  browserPolyfill.tabs.onUpdated.addListener(originUpdatedListener);
	}

	function removeOriginUpdatedListener() {
	  browserPolyfill.tabs.onUpdated.removeListener(originUpdatedListener);
	}

	async function originUpdatedListener(details) {
	  const origin = await storage$1.origin.get();
	  if (origin) {
	    if (origin.tabId === details) {
	      const tab = await browserPolyfill.tabs.get(details);
	      l(tab);
	      if (tab.url.includes(participantResource.name)) {
	        storage$1.learningUri.set(tab.url);
	      }
	    }
	  }
	}

	/**
	 * @async @function
	 * @description Checks if redirection should happen,
	 * then starts a learning session countdown,
	 * stores the origin tab and url in storage,
	 * then updates the tab with a pre-defined learning resourse url
	 * @param {object} details
	 * @param {string} details.url
	 * @param {number} details.tabId */
	async function redirect(details) {
	  if (await checkActiveTime()) {
	    if (details.frameId === 0 && !details.url.includes("auth")) {
	      const toggled = await storage$1.redirection.get();
	      const shouldRedirect = await storage$1.shouldRedirect.get();
	      if (toggled && shouldRedirect) {
	        // l("ShouldRedirect", shouldRedirect);
	        const origin = await storage$1.origin.get();
	        // l("Checking against this: ", origin);
	        if (origin) {
	          // l(details);
	          addProcsiteLoadedListener();
	        } else {
	          timer.startLearningSession();
	          const learningUri = await storage$1.learningUri.get();
	          try {
	            await browserPolyfill.tabs.update(details.tabId, {
	              url: learningUri,
	            });

	            storage$1.origin.set({ url: details.url, tabId: details.tabId });
	            const eventDetails = {
	              reason: reasonNames.redirected.instant,
	              from: parseUrl(details.url).name,
	              to: participantResource.name,
	            };
	            API.event.create(eventNames.redirected, eventDetails);
	            addLearningSiteLoadedListener(details.tabId);
	          } catch (error) {
	            // console.log(error.message);
	          }
	          addOriginUpdatedListener(details.tabId);
	        }
	      }
	    }
	  }
	}

	async function checkActiveTime() {
	  const fromTime = await storage$1.operatingHours.from.get();
	  const toTime = await storage$1.operatingHours.to.get();
	  const date = makeDate();
	  if (date.hours < fromTime.hrs) {
	    return false;
	  } else if (date.hours === fromTime.hours && date.minutes < fromTime.minutes) {
	    return false;
	  }
	  if (date.hours > toTime.hrs) {
	    return false;
	  } else if (date.hours === toTime.hrs && date.minutes > toTime.min) {
	    return false;
	  }
	  return true;
	}

	function addOriginTabCloseListener() {
	  browserPolyfill.tabs.onRemoved.addListener(onOriginRemoved);
	}

	async function onOriginRemoved(details) {
	  const origin = await storage$1.origin.get();
	  if (origin) {
	    if (details === origin.tabId) {
	      // l("Origin killed");
	      removeOriginUpdatedListener();
	      removeAllContentBlockers();
	      storage$1.origin.remove();
	      timer.stopBonusTime(); // Without this badge goes "Done". This is bad. Maybe I'll fix it later.
	      timer.stopLearningSession(); // This is fine
	      storage$1.shouldRedirect.set(true);
	    }
	  }
	}

	async function addLearningSiteLoadedListener() {
	  browserPolyfill.webNavigation.onCompleted.addListener(messageLearningResource, {
	    url: [{ hostContains: `.${participantResource.name}.` }],
	  });
	}

	function removeLearningSiteLoadedListener() {
	  l("Removing Leaning site loaded listener");
	  browserPolyfill.webNavigation.onCompleted.removeListener(messageLearningResource);
	  shouldShowWelcome = true;
	}

	async function messageLearningResource(details) {
	  try {
	    const origin = await storage$1.origin.get();
	    if (!origin || origin.tabId === details.tabId) {
	      const response = await browserPolyfill.tabs.sendMessage(details.tabId, {
	        action: "display: encouragement",
	        countdown: timer.getTime().learningTimeRemaining,
	        shouldShowWelcome: shouldShowWelcome,
	      });
	      shouldShowWelcome = false;
	      if ((await response.action) === "continue") {
	        // storage.learningUri.set(response.uri);
	        gotoOrigin("continue", response.source);
	        removeLearningSiteLoadedListener();
	      } else if ((await response.action) === "end injection") {
	        removeLearningSiteLoadedListener();
	      }
	    }
	  } catch (error) {
	    // console.log(error);
	  }
	}

	/**
	@function
	@async
	@description Gets currently active tab and sends message to the content script if it
	is a procrastination website. */
	async function checkActiveTab() {
	  try {
	    const tabs = await browserPolyfill.tabs.query({
	      active: true,
	      currentWindow: true,
	    });
	    if (tabs.length > 0) {
	      const tab = tabs[0];
	      const tabSiteName = parseUrl(tab.url).name;
	      const procList = await storage$1.list.get();
	      const procListNames = procList.map((site) => site.name);
	      if (procListNames.includes(tabSiteName)) {
	        const details = {
	          triggerSite: tabSiteName,
	          redirectingTo: participantResource.name,
	        };
	        API.event.create(eventNames.redirectWarningTriggered, details);
	        const learningUri = await storage$1.learningUri.get();
	        talkToContent(tab.id, learningUri, tab.url);
	      }
	    }
	  } catch (error) {
	    // console.log(error.message);
	  }
	}

	async function checkTabById({ tabId }) {
	  try {
	    const tab = await browserPolyfill.tabs.get(tabId);
	    checkTab(tab);
	  } catch (error) {
	    // console.log(error.message);
	  }
	}
	// TODO: Rewrite these two functions ^ & v to 1 single function that checks if tab has url (if not, get it)

	/**
	 * @async
	 * @function
	 * @description Checks a tab against a list of websites defined as procrastination websites.
	 * If a tab's url is found in the list, it calls the redirect function using that tab's details.
	 * @param {object} tab
	 * @param {number} tab.frameId
	 * @param {string} tab.url
	 * @param {number} tab.id */
	async function checkTab(tab) {
	  const tabSiteName = parseUrl(tab.url).name;
	  const procList = await storage$1.list.get();
	  const procListNames = procList.map((site) => site.name);
	  const origin = await storage$1.origin.get();
	  checkIfTargetSiteFocusChange(origin, tab);
	  if (procListNames.includes(tabSiteName)) {
	    if (origin) {
	      const eventDetails = {
	        blockedSite: tabSiteName,
	        origin: origin,
	      };
	      API.event.create(eventNames.siteBlockerTriggered, eventDetails);
	      renderContentBlocker({ tabId: tab.id, frameId: 0 });
	    } else {
	      redirect({ frameId: 0, url: tab.url, tabId: tab.id });
	    }
	  }
	}

	async function checkIfTargetSiteFocusChange(origin, tab) {
	  if (origin) {
	    const eventDetails = {
	      origin: origin,
	      focusedTab: tab,
	    };
	    if (origin.tabId === tab.id) {
	      API.event.create(eventNames.redirectionTargetSiteFocused, eventDetails);
	    }
	  }
	}

	/**
	 * @async
	 * @function
	 * @description Changes location of the tab registered as the tab
	 * that triggered a redirection from procrastination to learning site.
	 * The uri was saved upon redirection, and here restored in full in the same tab.
	 * Origin is an object of type: {integer: tabId, string: url} */
	async function gotoOrigin(reason, source) {
	  await storage$1.stats[reason]();
	  const origin = await storage$1.origin.get();
	  removeOriginUpdatedListener();
	  try {
	    const learningTab = await browserPolyfill.tabs.get(origin.tabId);
	    storage$1.learningUri.set(learningTab.url);
	  } catch (error) {
	    l(error);
	  }
	  await storage$1.shouldRedirect.set(false);
	  storage$1.origin.remove();
	  try {
	    await browserPolyfill.tabs.update(origin.tabId, { url: origin.url });
	    removeAllContentBlockers();
	    const details = {
	      reason: reasonNames.gotoOrigin[reason],
	      source: source,
	      from: participantResource.name,
	      to: parseUrl(origin.url).name,
	    };
	    API.event.create(eventNames.gotoOrigin, details);
	  } catch (error) {
	    l(error);
	  }

	  const redirectionToggled = await storage$1.redirection.get();
	  if (redirectionToggled) {
	    const rewardTime = parseTime.toSystem(
	      await storage$1.timeSettings.rewardTime.get()
	    );
	    timer.startProcrastinationSession(checkActiveTab, rewardTime);
	  }
	}

	async function talkToContent(tabId, url, originUrl) {
	  try {
	    const result = await browserPolyfill.tabs.sendMessage(tabId, {
	      action: "display: snooze",
	      url: url,
	    });
	    if (result.action === "snooze") {
	      const details = {
	        from: parseUrl(originUrl).name,
	        to: participantResource.name,
	      };
	      API.event.create(eventNames.redirectWarningSnoozed, details);
	      storage$1.stats.snooze();
	      await storage$1.shouldRedirect.set(false);
	      timer.startProcrastinationSession(checkActiveTab, 60000);
	    } else {
	      addLearningSiteLoadedListener();
	      const eventDetails = {
	        reason: reasonNames.redirected.autoResolved,
	        from: parseUrl(originUrl).name,
	        to: participantResource.name,
	      };
	      API.event.create(eventNames.redirected, eventDetails);
	      timer.startLearningSession();
	      storage$1.origin.set({ url: originUrl, tabId: tabId });
	      addOriginUpdatedListener(tabId);
	    }
	  } catch (error) {
	    // console.log(error.message);
	  }
	}

	function renderContentBlocker(details) {
	  if (details.frameId === 0) {
	    removeProcsiteLoadedListener();
	    storage$1.blockedTabs.add(details.tabId);
	    try {
	      // l("Sending block request to content");
	      browserPolyfill.tabs.sendMessage(details.tabId, {
	        action: "inject blocker",
	      });
	    } catch (error) {
	      // l(error);
	    }
	  }
	}

	function removeContentBlocker(tabId) {
	  // l("Removing blocker on tab ", tabId);
	  try {
	    browserPolyfill.tabs.sendMessage(tabId, { action: "remove blocker" });
	  } catch (error) {
	    l(error);
	  }
	}

	async function removeAllContentBlockers() {
	  const blockedTabs = await storage$1.blockedTabs.get();
	  // l("Blocked tabs: ", blockedTabs);
	  blockedTabs.forEach((tabId) => {
	    removeContentBlocker(tabId);
	  });
	  storage$1.blockedTabs.clear();
	}

	async function addProcsiteLoadedListener() {
	  // l("Adding listener");
	  const filter = await createFilter();
	  // l(filter);
	  browserPolyfill.webNavigation.onCompleted.addListener(renderContentBlocker, filter);
	}

	async function removeProcsiteLoadedListener() {
	  // l("Removing listener");
	  browserPolyfill.webNavigation.onCompleted.removeListener(renderContentBlocker);
	}

	var redirection = {
	  navigationListener: {
	    start: addNavigationListener,
	    stop: removeNavigationListener,
	    restart: restartNavigationListener,
	  },
	  tabChangeListener: {
	    start: addTabChangeListener,
	    stop: removeTabChangeListener,
	    restart: restartTabChangeListener,
	  },
	  windowChangeListener: {
	    start: addWindowChangeListener,
	    stop: removeWindowChangeListener,
	    restart: restartWindowChangeListener,
	  },
	  gotoOrigin,
	  addOriginTabCloseListener,
	  removeLearningSiteLoadedListener,
	  checkActiveTab,
	  addMirceaListener: addRedirectionTargetListener,
	};

	// Controls themes for the application. This is achieved by switching out global CSS variables in global.css
	const storage$2 = browserPolyfill.storage.local;

	// Variable that selects the root CSS file.
	const r = document.querySelector(":root");
	r.style;

	/**
	 * @function
	 * @param {string} theme
	 * @description  Sets the theme stored in local storage to the provided theme. */
	function setTheme(theme) {
	  storage$2.set({ theme: theme });
	}

	/* Add listener if the runtime is caused by initial installation of extension.
	If so, run initial setup */
	browserPolyfill.runtime.onInstalled.addListener(({ reason }) => {
	  if (reason === "install") {
	    installationSetup();
	  }
	});

	/**
	 * @async @function
	 * @description Runs the initial installation setup, creating values in storage used by the application,
	 * as well as automatically opening the settings page such that the user can input user ID and procrastination websites. */
	async function installationSetup() {
	  storage$1.clearStorage();
	  storage$1.stats.init();
	  storage$1.operatingHours.init();
	  setTheme("light");
	  storage$1.shouldRedirect.set(true);
	  storage$1.redirection.toggle();
	  storage$1.list.set([]);
	  storage$1.uid.set("");
	  // const extensionReference = await browser.management.getSelf(); TODO
	  // const optionsPageURL = extensionReference.optionsUrl
	  storage$1.learningUri.set(extRef.optionsUrl);
	  storage$1.timeSettings.init();
	  const extRef = await browserPolyfill.management.getSelf();
	  browserPolyfill.tabs.create({
	    active: true,
	    url: extRef.optionsUrl,
	  });
	}

	/**
	 * @function
	 * @description runtime instance setup function.
	 * initiates setup of interval logging functionality, as well as adding navigation and tab change listeners. */
	async function setup() {
	  redirection.addMirceaListener();
	  intervals.intervalSetup();
	  storage$1.shouldRedirect.set(true);
	  redirection.navigationListener.start();
	  redirection.tabChangeListener.start();
	  redirection.windowChangeListener.start();
	  redirection.addOriginTabCloseListener();
	}

	async function killAiki$1() {
	  const tabs = await browserPolyfill.tabs.query({
	    active: true,
	    currentWindow: true,
	  });
	  browserPolyfill.tabs.sendMessage(tabs[0].id, {
	    action: "kill aiki",
	  });
	  timer.stopLearningSession();
	  timer.stopBonusTime();
	  timer.killAiki();
	  badge.remove();
	  const details = {
	    message: "Aiki killed",
	  };
	  API.event.create(eventNames.redirectionToggledOff, details);
	}

	async function reviveAiki() {
	  redirection.checkActiveTab();
	  const details = { message: "Aiki revived" };
	  API.event.create(eventNames.redirectionToggledOn, details);
	}

	async function gotoOriginTab() {
	  const origin = await storage$1.origin.get();
	  API.event.create(eventNames.blockerButtonPressed, {});
	  browserPolyfill.tabs.update(origin.tabId, { selected: true });
	}

	/* Adding listener for incomming communication from extension options page runtime and extension popup runetime 

	case "user" means the user added or removed a user ID. This requires the logger interval to be reset, 
	as the user value in the interval function is no longer correct. 

	case "list" means the user added or removed a procrastination website in settings page. 
	This requires the counting interval as well as the navigationListener need to be reset, 
	as these use the procrastination list.

	case "origin" is called by the popup runtime and means the tab that was used to open a procrastination website should
	return to the original procrastination website (ie. the user clicked "continue" or "Emergency skip")
	This also ends the injection listener.

	case "timer" is called by the popup runtime and returns the current time values 
	(ie. learning time remaining and extra time spent). */
	browserPolyfill.extension.onConnect.addListener(function (port) {
	  port.onMessage.addListener(function (msg) {
	    switch (msg.split(": ")[1]) {
	      case "user":
	        intervals.logger.restart();
	        break;
	      case "list":
	        intervals.counter.restart();
	        redirection.navigationListener.restart();
	        break;
	      case "origin":
	        redirection.gotoOrigin(msg.split(": ")[2], "popup");
	        redirection.removeLearningSiteLoadedListener();
	        break;
	      case "timer":
	        port.postMessage(timer.getTime());
	        break;
	      case "off":
	        killAiki$1();
	        break;
	      case "on":
	        reviveAiki();
	        break;
	      case "originTab":
	        gotoOriginTab();
	    }
	  });
	});

	/* Setup is run at each runtime creation (user opens the browser application) */
	setup();

}(crypto, require$$0));
//# sourceMappingURL=background.js.map
